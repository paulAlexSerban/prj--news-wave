[
  {
    "id": 1,
    "name": "CSS Tricks",
    "title": "CSS Tricks",
    "description": "CSS Tricks",
    "homepage": "https://css-tricks.com",
    "feed_url": "https://css-tricks.com/feed/",
    "category": "Technology",
    "subcategory": "Web Development",
    "topic": "Programming",
    "group": "Front-end Development",
    "subject": "CSS",
    "tags": [
      "HTML",
      "CSS",
      "JavaScript"
    ],
    "feed": {
      "items": [
        {
          "creator": "Neal Fennimore",
          "title": "Passkeys: What the Heck and Why?",
          "link": "https://css-tricks.com/passkeys-what-the-heck-and-why/",
          "pubDate": "Wed, 12 Apr 2023 17:41:53 +0000",
          "content:encoded": "\n<p>These things called&nbsp;<strong>passkeys</strong>&nbsp;sure are making the rounds these days. They were a main attraction at&nbsp;<a href=\"https://www.w3.org/2022/09/TPAC/demos/passkeys.html\" rel=\"noopener\">W3C TPAC 2022</a>, gained support in&nbsp;<a href=\"https://developer.apple.com/documentation/safari-release-notes/safari-16_1-release-notes/\" rel=\"noopener\">Safari 16</a>, are finding their way into&nbsp;<a href=\"https://developer.apple.com/passkeys/\" rel=\"noopener\">macOS and iOS</a>, and are slated to be&nbsp;<a href=\"https://www.future.1password.com/passkeys/\" rel=\"noopener\">the future for password managers like 1Password</a>. They are&nbsp;<a href=\"https://passkeys.dev/device-support/\" rel=\"noopener\">already supported</a>&nbsp;in Android, and will soon find their way into Chrome OS and Windows in future releases.</p>\n\n\n\n<p>Geeky OS security enhancements don’t exactly make big headlines in the front-end community, but it stands to reason that passkeys are going to be a “thing”. And considering how passwords and password apps affect the user experience of things like authentication and form processing, we might want to at least wrap our minds around them, so we know what’s coming.</p>\n\n\n\n<p>That’s the point of this article. I’ve been studying and experimenting with passkeys — and the WebAuthn API they are built on top of — for some time now. Let me share what I’ve learned.</p>\n\n\n\n<span id=\"more-377305\"></span>\n\n\n<h3 class=\"simpletoc-hidden wp-block-heading\" id=\"table-of-contents\">Table of contents</h3>\n\n<ul class=\"simpletoc-list\"   >\n</li><li>\n<a  href=\"#terminology\">Terminology</a></li><li>\n<a  href=\"#what-are-passkeys\">What are passkeys?</a></li><li>\n<a  href=\"#how-do-passkeys-replace-passwords\">How do passkeys replace passwords?</a></li><li>\n<a  href=\"#more-about-cryptography\">More about cryptography</a></li><li>\n<a  href=\"#how-do-we-access-passkeys\">How do we access passkeys?</a></li><li>\n<a  href=\"#the-difference-between-passkeys-and-webauthn\">The difference between passkeys and WebAuthn</a></li><li>\n<a  href=\"#the-process-in-a-nutshell\">The process… in a nutshell</a></li><li>\n<a  href=\"#the-meat-and-potatoes\">The meat and potatoes</a></li><li>\n<a  href=\"#some-downsides\">Some downsides</a></li><li>\n<a  href=\"#where-are-things-going\">Where are things going?</a></li><li>\n<a  href=\"#resources\">Resources</a></li></ul>\n\n<h3 class=\"wp-block-heading\" id=\"terminology\">Terminology</h3>\n\n\n<p>Here’s the obligatory section of the terminology you’re going to want to know as we dig in. Like most tech, passkeys are wrought with esoteric verbiage and acronyms that are often roadblocks to understanding. I’ll try to de-mystify several for you here.</p>\n\n\n\n<ul>\n<li><strong>Relying Party:</strong>&nbsp;the server you will be authenticating against. We&#8217;ll use “server” to imply the Relying Party in this article.</li>\n\n\n\n<li><strong>Client:</strong>&nbsp;in our case, the web browser or operating system.</li>\n\n\n\n<li><strong>Authenticator:</strong>&nbsp;Software and/or hardware devices that allow generation and storage for public key pairs.</li>\n\n\n\n<li><strong>FIDO</strong>: An open standards body that also creates specifications around FIDO credentials.</li>\n\n\n\n<li><strong>WebAuthn</strong>: The underlying protocol for passkeys, Also known as a&nbsp;<a href=\"https://fidoalliance.org/fido2/\" rel=\"noopener\">FIDO2</a>&nbsp;credential or single-device FIDO credentials.</li>\n\n\n\n<li><strong>Passkeys</strong>: WebAuthn, but with cloud syncing (also called multi-device FIDO credentials, discoverable credentials, or resident credentials).</li>\n\n\n\n<li><strong>Public Key Cryptography:</strong>&nbsp;A generated key pair that includes a private and public key. Depending on the algorithm, it should either be used for signing and verification or encrypting and decrypting. This is also known as&nbsp;<em>asymmetric cryptography</em>.</li>\n\n\n\n<li><strong>RSA:</strong>&nbsp;An acronym of the creators’ names, Rivest Shamir and Adel. RSA is an older, but still useful, family of public key cryptography based on factoring primes.</li>\n\n\n\n<li><strong>Elliptic Curve Cryptography (ECC):</strong>&nbsp;A newer family of cryptography&nbsp;<a href=\"https://csrc.nist.gov/Projects/Elliptic-Curve-Cryptography\" rel=\"noopener\">based on elliptic curves</a>.</li>\n\n\n\n<li><strong>ES256:</strong>&nbsp;An elliptic curve public key that uses an ECDSA signing algorithm (<a href=\"https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-5.pdf\" rel=\"noopener\">PDF</a>) with&nbsp;<a href=\"https://en.wikipedia.org/wiki/SHA-2\" rel=\"noopener\">SHA256</a>&nbsp;for hashing.</li>\n\n\n\n<li><strong>RS256:</strong>&nbsp;Like ES256, but it uses RSA with&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/sign#rsassa-pkcs1-v1_5_2\" rel=\"noopener\">RSASSA-PKCS1-v1.5</a>&nbsp;and SHA256.</li>\n</ul>\n\n\n<h3 class=\"wp-block-heading\" id=\"what-are-passkeys\">What are passkeys?</h3>\n\n\n<p>Before we can talk specifically about passkeys, we need to talk about another protocol called&nbsp;<a href=\"https://webauthn.guide/\" rel=\"noopener\">WebAuthn</a>&nbsp;(also known as FIDO2). Passkeys are a specification that is built on top of WebAuthn. WebAuthn allows for public key cryptography to replace passwords. We use some sort of security device, such as a hardware key or&nbsp;<a href=\"https://learn.microsoft.com/en-us/windows/security/information-protection/tpm/trusted-platform-module-top-node\" rel=\"noopener\">Trusted Platform Module</a>&nbsp;(TPM), to create private and public keys.</p>\n\n\n\n<p>The public key is for anyone to use. The private key, however, cannot be removed from the device that generated it. This was one of the issues with WebAuthn; if you lose the device, you lose access.</p>\n\n\n\n<p>Passkeys solves this by providing a cloud sync of your credentials. In other words, what you generate on your computer can now also be used on your phone (though confusingly, there are single-device credentials too).</p>\n\n\n\n<p>Currently, at the time of writing, only iOS, macOS, and Android provide full support for cloud-synced passkeys, and even then, they are limited by the browser being used. Google and Apple provide an interface for syncing via their&nbsp;<a href=\"https://passwords.google.com/\" rel=\"noopener\">Google Password Manager</a> and&nbsp;<a href=\"https://support.apple.com/en-us/HT204085\" rel=\"noopener\">Apple iCloud Keychain</a>&nbsp;services, respectively.</p>\n\n\n<h3 class=\"wp-block-heading\" id=\"how-do-passkeys-replace-passwords\">How do passkeys replace passwords?</h3>\n\n\n<p>In public key cryptography, you can perform what is known as <em>signing</em>. Signing takes a piece of data and then runs it through a signing algorithm with the private key, where it can then be verified with the public key.</p>\n\n\n\n<p>Anyone can generate a public key pair, and it&#8217;s not attributable to any person since any person could have generated it in the first place. What makes it useful is that only data signed with the private key can be verified with the public key. That&#8217;s the portion that replaces a password — a server stores the public key, and we sign in by verifying that we have the other half (e.g. private key), by signing a random challenge.</p>\n\n\n\n<p>As an added benefit, since we&#8217;re storing the user&#8217;s public keys within a database, there is no longer concern with password breaches affecting millions of users. This reduces phishing, breaches, and a slew of other security issues that our password-dependent world currently faces. If a database is breached, all that&#8217;s stored in the user&#8217;s public keys, making it virtually useless to an attacker.</p>\n\n\n\n<p>No more forgotten emails and their associated passwords, either! The browser will remember which credentials you used for which website — all you need to do is make a couple of clicks, and you&#8217;re logged in. You can provide a secondary means of verification to use the passkey, such as biometrics or a pin, but those are still much faster than the passwords of yesteryear.</p>\n\n\n<h3 class=\"wp-block-heading\" id=\"more-about-cryptography\">More about cryptography</h3>\n\n\n<p>Public key cryptography involves having a private and a public key (known as a key pair). The keys are generated together and have separate uses. For example, the private key is intended to be kept secret, and the public key is intended for whomever you want to exchange messages with.</p>\n\n\n\n<p>When it comes to encrypting and decrypting a message, the recipient’s public key is used to encrypt a message so that only the recipient&#8217;s private key can decrypt the message. In security parlance, this is known as “providing confidentiality”. However, this doesn&#8217;t provide proof that the sender is who they say they are, as anyone can potentially use a public key to send someone an encrypted message.</p>\n\n\n\n<p>There are cases where we need to verify that a message did indeed come from its sender. In these cases, we use signing and signature verification to ensure that the sender is who they say they are (also known as&nbsp;<em>authenticity</em>). In public key (also called&nbsp;<em>asymmetric</em>) cryptography, this is generally done by signing the hash of a message, so that only the public key can correctly verify it. The hash and the sender&#8217;s private key produce a signature after running it through an algorithm, and then anyone can verify the message came from the sender with the sender&#8217;s public key.</p>\n\n\n<h3 class=\"wp-block-heading\" id=\"how-do-we-access-passkeys\">How do we access passkeys?</h3>\n\n\n<p>To access passkeys, we first need to generate and store them somewhere. Some of this functionality can be provided with an authenticator. An&nbsp;<em>authenticator</em>&nbsp;is any hardware or software-backed device that provides the ability for cryptographic key generation. Think of those one-time passwords you get from&nbsp;<a href=\"https://support.google.com/accounts/answer/1066447?hl=en&amp;co=GENIE.Platform%3DAndroid\" rel=\"noopener\">Google Authenticator</a>,&nbsp;<a href=\"https://1password.com/\" rel=\"noopener\">1Password</a>, or&nbsp;<a href=\"https://www.lastpass.com/\" rel=\"noopener\">LastPass</a>, among others.</p>\n\n\n\n<p>For example, a software authenticator can use the Trusted Platform Module (TPM) or secure enclave of a device to create credentials. The credentials can be then stored remotely and synced across devices e.g. passkeys. A hardware authenticator would be something like a&nbsp;<a href=\"https://www.yubico.com/\" rel=\"noopener\">YubiKey</a>, which can generate and store keys on the device itself.</p>\n\n\n\n<p>To access the authenticator, the browser needs to have access to hardware, and for that, we need an interface. The interface we use here is the Client to Authenticator Protocol (CTAP). It allows access to different authenticators over different mechanisms. For example, we can access an authenticator over NFC, USB, and Bluetooth by utilizing CTAP.</p>\n\n\n\n<p>One of the more interesting ways to use passkeys is by connecting your phone over Bluetooth to another device that might not support passkeys. When the devices are paired over Bluetooth, I can log into the browser on my computer using my phone as an intermediary!</p>\n\n\n<h3 class=\"wp-block-heading\" id=\"the-difference-between-passkeys-and-webauthn\">The difference between passkeys and WebAuthn</h3>\n\n\n<p>Passkeys and WebAuthn keys differ in several ways. First, passkeys are considered multi-device credentials and can be synced across devices. By contrast, WebAuthn keys are single-device credentials — a fancy way of saying you’re bound to one device for verification.</p>\n\n\n\n<p>Second, to authenticate to a server, WebAuthn keys need to provide the user handle for login, after which an&nbsp;<code>allowCredentials</code>&nbsp;list is returned to the client from the server, which informs what credentials can be used to log in.&nbsp;<strong>Passkeys skip this step and use the server&#8217;s domain name to show which keys are already bound to that site.</strong>&nbsp;You’re able to select the passkey that is associated with that server, as it&#8217;s already known by your system.</p>\n\n\n\n<p>Otherwise, the keys are cryptographically the same; they only differ in how they&#8217;re stored and what information they use to start the login process.</p>\n\n\n<h3 class=\"wp-block-heading\" id=\"the-process-in-a-nutshell\">The process… in a nutshell</h3>\n\n\n<p>The process for generating a WebAuthn or a passkey is very similar: get a challenge from the server and then use the&nbsp;<code>navigator.credentials.create</code>&nbsp;web API to generate a public key pair. Then, send the challenge and the public key back to the server to be stored.</p>\n\n\n\n<p>Upon receiving the public key and challenge, the server validates the challenge and the session from which it was created. If that checks out, the public key is stored, as well as any other relevant information like the user identifier or attestation data, in the database.</p>\n\n\n\n<p>The user has one more step — retrieve another challenge from the server and use the&nbsp;<code>navigator.credentials.get</code>&nbsp;API to sign the challenge. We send back the signed challenge to the server, and the server verifies the challenge, then logs us in if the signature passes.</p>\n\n\n\n<p>There is, of course, quite a bit more to each step. But that is generally how we&#8217;d log into a website using WebAuthn or passkeys.</p>\n\n\n<h3 class=\"wp-block-heading\" id=\"the-meat-and-potatoes\">The meat and potatoes</h3>\n\n\n<p>Passkeys are used in two distinct phases: the&nbsp;<strong>attestation</strong>&nbsp;and&nbsp;<strong>assertion</strong>&nbsp;phases.</p>\n\n\n\n<p>The attestation phase can also be thought of as the registration phase. You&#8217;d sign up with an email and password for a new website, however, in this case, we&#8217;d be using our passkey.</p>\n\n\n\n<p>The assertion phase is similar to how you&#8217;d log in to a website after signing up.</p>\n\n\n<h4 class=\"wp-block-heading\" id=\"attestation\">Attestation</h4>\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/attestation.png?ssl=1\"><img decoding=\"async\" width=\"736\" height=\"569\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/attestation.png?resize=736%2C569&#038;ssl=1\" alt=\"\" class=\"wp-image-377328\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/attestation.png?w=736&amp;ssl=1 736w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/attestation.png?resize=300%2C232&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a><figcaption class=\"wp-element-caption\"><a href=\"https://css-tricks.com/wp-content/uploads/2023/02/attestation.png\">View full size</a></figcaption></figure>\n\n\n\n<p>The&nbsp;<code>navigator.credentials.create</code>&nbsp;API is the focus of our attestation phase. We&#8217;re registered as a new user in the system and need to generate a new public key pair. However, we need to specify what kind of key pair we want to generate. That means we need to provide options to&nbsp;<code>navigator.credentials.create</code>.</p>\n\n\n\n<pre class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code>// The `challenge` is random and has to come from the server\nconst publicKey: PublicKeyCredentialCreationOptions = {\n  challenge: safeEncode(challenge),\n  rp: {\n    id: window.location.host,\n    name: document.title,\n  },\n  user: {\n    id: new TextEncoder().encode(crypto.randomUUID()), // Why not make it random?\n    name: 'Your username',\n    displayName: 'Display name in browser',\n  },\n  pubKeyCredParams: [\n    {\n      type: 'public-key',\n      alg: -7, // ES256\n    },\n    {\n      type: 'public-key',\n      alg: -256, // RS256\n    },\n  ],\n  authenticatorSelection: {\n    userVerification: 'preferred', // Do you want to use biometrics or a pin?\n    residentKey: 'required', // Create a resident key e.g. passkey\n  },\n  attestation: 'indirect', // indirect, direct, or none\n  timeout: 60_000,\n};</code></pre>\n\n\n\n<pre class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code>const pubKeyCredential: PublicKeyCredential = await navigator.credentials.create({\n  publicKey\n});\nconst {\n  id // the key id a.k.a. kid\n} = pubKeyCredential;\nconst pubKey = pubKeyCredential.response.getPublicKey();\nconst { clientDataJSON, attestationObject } = pubKeyCredential.response;\nconst { type, challenge, origin } = JSON.parse(new TextDecoder().decode(clientDataJSON));\n// Send data off to the server for registration</code></pre>\n\n\n\n<p>We&#8217;ll get&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredential\" rel=\"noopener\"><code>PublicKeyCredential</code></a>&nbsp;which contains an&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/AuthenticatorAttestationResponse\" rel=\"noopener\"><code>AuthenticatorAttestationResponse</code></a>&nbsp;that comes back after creation. The credential has the generated key pair’s ID.</p>\n\n\n\n<p>The response provides a couple of bits of useful information. First, we have our public key in this response, and we need to send that to the server to be stored. Second, we also get back the&nbsp;<code>clientDataJSON</code>&nbsp;property which we can decode, and from there, get back the&nbsp;<code>type</code>,&nbsp;<code>challenge</code>, and&nbsp;<code>origin</code>&nbsp;of the passkey.</p>\n\n\n\n<p>For attestation, we want to validate the&nbsp;<code>type</code>,&nbsp;<code>challenge</code>, and&nbsp;<code>origin</code>&nbsp;on the server, as well as store the public key with its identifier, e.g. kid. We can also optionally store the&nbsp;<code>attestationObject</code>&nbsp;if we wish. Another useful property to store is the&nbsp;<a href=\"https://www.iana.org/assignments/cose/cose.xhtml#algorithms\" rel=\"noopener\">COSE</a>&nbsp;algorithm, which is defined above in our &nbsp;<code>PublicKeyCredentialCreationOptions</code>&nbsp;with&nbsp;<code>alg: -7</code>&nbsp;or&nbsp;<code>alg: -256</code>, in order to easily verify any signed challenges in the assertion phase.</p>\n\n\n<h4 class=\"wp-block-heading\" id=\"assertion\">Assertion</h4>\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/assertion.png?ssl=1\"><img decoding=\"async\" loading=\"lazy\" width=\"717\" height=\"516\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/assertion.png?resize=717%2C516&#038;ssl=1\" alt=\"\" class=\"wp-image-377330\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/assertion.png?w=717&amp;ssl=1 717w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/assertion.png?resize=300%2C216&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></a><figcaption class=\"wp-element-caption\"><a href=\"https://css-tricks.com/wp-content/uploads/2023/02/assertion.png\">View full size</a></figcaption></figure>\n\n\n\n<p>The&nbsp;<code>navigator.credentials.get</code>&nbsp;API will be the focus of the assertion phase. Conceptually, this would be where the user logs in to the web application after signing up.</p>\n\n\n\n<pre class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code>// The `challenge` is random and has to come from the server\nconst publicKey: PublicKeyCredentialRequestOptions = {\n  challenge: new TextEncoder().encode(challenge),\n  rpId: window.location.host,\n  timeout: 60_000,\n};</code></pre>\n\n\n\n<pre class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code>const publicKeyCredential: PublicKeyCredential = await navigator.credentials.get({\n  publicKey,\n  mediation: 'optional',\n});\nconst {\n  id // the key id, aka kid\n} = pubKeyCredential;\nconst { clientDataJSON, attestationObject, signature, userHandle } = pubKeyCredential.response;\nconst { type, challenge, origin } = JSON.parse(new TextDecoder().decode(clientDataJSON));\n// Send data off to the server for verification</code></pre>\n\n\n\n<p>We&#8217;ll again get a&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredential\" rel=\"noopener\"><code>PublicKeyCredential</code></a>&nbsp;with an <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/AuthenticatorAssertionResponse\" rel=\"noopener\"><code>AuthenticatorAssertionResponse</code></a>&nbsp;this time. The credential again includes the key identifier.</p>\n\n\n\n<p>We also get the&nbsp;<code>type</code>,&nbsp;<code>challenge</code>, and&nbsp;<code>origin</code>&nbsp;from the&nbsp;<code>clientDataJSON</code>&nbsp;again. The&nbsp;<code>signature</code>&nbsp;is now included in the response, as well as the <code>authenticatorData</code>. We&#8217;ll need those and the&nbsp;<code>clientDataJSON</code>&nbsp;to verify that this was signed with the private key.</p>\n\n\n\n<p>The&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/AuthenticatorAssertionResponse/authenticatorData\" rel=\"noopener\"><code>authenticatorData</code></a>&nbsp;includes some properties that are worth tracking First is the SHA256 hash of the origin you&#8217;re using, located within the first 32 bytes, which is useful for verifying that request comes from the same origin server. Second is the&nbsp;<code>signCount</code>, which is from byte 33 to 37. This is generated from the authenticator and should be compared to its previous value to ensure that nothing fishy is going on with the key. The value should always 0 when it’s a multi-device passkey and should be randomly larger than the previous signCount when it’s a single-device passkey.</p>\n\n\n\n<p>Once you&#8217;ve asserted your login, you should be logged in —&nbsp;<em>congratulations</em>! Passkeys is a pretty great protocol, but it does come with some caveats.</p>\n\n\n<h3 class=\"wp-block-heading\" id=\"some-downsides\">Some downsides</h3>\n\n\n<p>There&#8217;s a lot of upside to Passkeys, however, there are some issues with it at the time of this writing. For one thing, passkeys is somewhat still early support-wise, with only single-device credentials allowed on Windows and very little support for Linux systems.&nbsp;<a href=\"http://passkeys.dev/\" rel=\"noopener\">Passkeys.dev</a>&nbsp;provides a&nbsp;<a href=\"https://passkeys.dev/device-support/\" rel=\"noopener\">nice table that’s sort of like the Caniuse of this protocol</a>.</p>\n\n\n\n<p>Also, Google&#8217;s and Apple&#8217;s passkeys platforms do not communicate with each other. If you want to get your credentials from your Android phone over to your iPhone&#8230; well, you&#8217;re out of luck for now. That&#8217;s not to say there is no interoperability! You can log in to your computer by using your phone as an authenticator. But it would be much cleaner just to have it built into the operating system and synced without it being locked at the vendor level.</p>\n\n\n<h3 class=\"wp-block-heading\" id=\"where-are-things-going\">Where are things going?</h3>\n\n\n<p>What does the passkeys protocol of the future look like? It looks pretty good! Once it gains support from more operating systems, there should be an uptake in usage, and you&#8217;ll start seeing it used more and more in the wild. Some&nbsp;<a href=\"https://www.future.1password.com/passkeys\" rel=\"noopener\">password managers</a>&nbsp;are even going to support them first-hand.</p>\n\n\n\n<p>Passkeys are by no means only supported on the web.&nbsp;<a href=\"https://developer.android.com/training/sign-in/passkeys\" rel=\"noopener\">Android</a>&nbsp;and&nbsp;<a href=\"https://developer.apple.com/documentation/authenticationservices/public-private_key_authentication/supporting_passkeys\" rel=\"noopener\">iOS</a>&nbsp;will both support native passkeys as first-class citizens. We&#8217;re still in the early days of all this, but expect to see it mentioned more and more.</p>\n\n\n\n<p>After all, we eliminate the need for passwords, and by doing so, make the world safer for it!</p>\n\n\n<h3 class=\"wp-block-heading\" id=\"resources\">Resources</h3>\n\n\n<p>Here are some more resources if you want to learn more about Passkeys. There’s also a repository and demo I put together for this article.</p>\n\n\n\n<ul>\n<li><a href=\"https://passkeys.neal.codes/\" rel=\"noopener\">Live Demo</a> (no actual information is collected by the form)</li>\n\n\n\n<li><a href=\"https://github.com/nealfennimore/passkeys\" rel=\"noopener\">Demo GitHub Repository</a></li>\n\n\n\n<li><a href=\"https://developers.yubico.com/Passkeys/\" rel=\"noopener\">YubiKey Documentation</a></li>\n\n\n\n<li><a href=\"https://passkeys.dev/\" rel=\"noopener\">Passkeys.dev</a></li>\n\n\n\n<li><a href=\"https://www.passkeys.io/\" rel=\"noopener\">Passkeys.io</a></li>\n\n\n\n<li><a href=\"https://webauthn.io/\" rel=\"noopener\">Webauthn.io</a></li>\n</ul>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/passkeys-what-the-heck-and-why/\">Passkeys: What the Heck and Why?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n",
          "content:encodedSnippet": "These things called passkeys sure are making the rounds these days. They were a main attraction at W3C TPAC 2022, gained support in Safari 16, are finding their way into macOS and iOS, and are slated to be the future for password managers like 1Password. They are already supported in Android, and will soon find their way into Chrome OS and Windows in future releases.\nGeeky OS security enhancements don’t exactly make big headlines in the front-end community, but it stands to reason that passkeys are going to be a “thing”. And considering how passwords and password apps affect the user experience of things like authentication and form processing, we might want to at least wrap our minds around them, so we know what’s coming.\nThat’s the point of this article. I’ve been studying and experimenting with passkeys — and the WebAuthn API they are built on top of — for some time now. Let me share what I’ve learned.\n\n\n\nTable of contents\n\nTerminology\n\nWhat are passkeys?\n\nHow do passkeys replace passwords?\n\nMore about cryptography\n\nHow do we access passkeys?\n\nThe difference between passkeys and WebAuthn\n\nThe process… in a nutshell\n\nThe meat and potatoes\n\nSome downsides\n\nWhere are things going?\n\nResources\n\n\nTerminology\nHere’s the obligatory section of the terminology you’re going to want to know as we dig in. Like most tech, passkeys are wrought with esoteric verbiage and acronyms that are often roadblocks to understanding. I’ll try to de-mystify several for you here.\nRelying Party: the server you will be authenticating against. We’ll use “server” to imply the Relying Party in this article.\nClient: in our case, the web browser or operating system.\nAuthenticator: Software and/or hardware devices that allow generation and storage for public key pairs.\nFIDO: An open standards body that also creates specifications around FIDO credentials.\nWebAuthn: The underlying protocol for passkeys, Also known as a FIDO2 credential or single-device FIDO credentials.\nPasskeys: WebAuthn, but with cloud syncing (also called multi-device FIDO credentials, discoverable credentials, or resident credentials).\nPublic Key Cryptography: A generated key pair that includes a private and public key. Depending on the algorithm, it should either be used for signing and verification or encrypting and decrypting. This is also known as asymmetric cryptography.\nRSA: An acronym of the creators’ names, Rivest Shamir and Adel. RSA is an older, but still useful, family of public key cryptography based on factoring primes.\nElliptic Curve Cryptography (ECC): A newer family of cryptography based on elliptic curves.\nES256: An elliptic curve public key that uses an ECDSA signing algorithm (PDF) with SHA256 for hashing.\nRS256: Like ES256, but it uses RSA with RSASSA-PKCS1-v1.5 and SHA256.\nWhat are passkeys?\nBefore we can talk specifically about passkeys, we need to talk about another protocol called WebAuthn (also known as FIDO2). Passkeys are a specification that is built on top of WebAuthn. WebAuthn allows for public key cryptography to replace passwords. We use some sort of security device, such as a hardware key or Trusted Platform Module (TPM), to create private and public keys.\nThe public key is for anyone to use. The private key, however, cannot be removed from the device that generated it. This was one of the issues with WebAuthn; if you lose the device, you lose access.\nPasskeys solves this by providing a cloud sync of your credentials. In other words, what you generate on your computer can now also be used on your phone (though confusingly, there are single-device credentials too).\nCurrently, at the time of writing, only iOS, macOS, and Android provide full support for cloud-synced passkeys, and even then, they are limited by the browser being used. Google and Apple provide an interface for syncing via their Google Password Manager and Apple iCloud Keychain services, respectively.\nHow do passkeys replace passwords?\nIn public key cryptography, you can perform what is known as signing. Signing takes a piece of data and then runs it through a signing algorithm with the private key, where it can then be verified with the public key.\nAnyone can generate a public key pair, and it’s not attributable to any person since any person could have generated it in the first place. What makes it useful is that only data signed with the private key can be verified with the public key. That’s the portion that replaces a password — a server stores the public key, and we sign in by verifying that we have the other half (e.g. private key), by signing a random challenge.\nAs an added benefit, since we’re storing the user’s public keys within a database, there is no longer concern with password breaches affecting millions of users. This reduces phishing, breaches, and a slew of other security issues that our password-dependent world currently faces. If a database is breached, all that’s stored in the user’s public keys, making it virtually useless to an attacker.\nNo more forgotten emails and their associated passwords, either! The browser will remember which credentials you used for which website — all you need to do is make a couple of clicks, and you’re logged in. You can provide a secondary means of verification to use the passkey, such as biometrics or a pin, but those are still much faster than the passwords of yesteryear.\nMore about cryptography\nPublic key cryptography involves having a private and a public key (known as a key pair). The keys are generated together and have separate uses. For example, the private key is intended to be kept secret, and the public key is intended for whomever you want to exchange messages with.\nWhen it comes to encrypting and decrypting a message, the recipient’s public key is used to encrypt a message so that only the recipient’s private key can decrypt the message. In security parlance, this is known as “providing confidentiality”. However, this doesn’t provide proof that the sender is who they say they are, as anyone can potentially use a public key to send someone an encrypted message.\nThere are cases where we need to verify that a message did indeed come from its sender. In these cases, we use signing and signature verification to ensure that the sender is who they say they are (also known as authenticity). In public key (also called asymmetric) cryptography, this is generally done by signing the hash of a message, so that only the public key can correctly verify it. The hash and the sender’s private key produce a signature after running it through an algorithm, and then anyone can verify the message came from the sender with the sender’s public key.\nHow do we access passkeys?\nTo access passkeys, we first need to generate and store them somewhere. Some of this functionality can be provided with an authenticator. An authenticator is any hardware or software-backed device that provides the ability for cryptographic key generation. Think of those one-time passwords you get from Google Authenticator, 1Password, or LastPass, among others.\nFor example, a software authenticator can use the Trusted Platform Module (TPM) or secure enclave of a device to create credentials. The credentials can be then stored remotely and synced across devices e.g. passkeys. A hardware authenticator would be something like a YubiKey, which can generate and store keys on the device itself.\nTo access the authenticator, the browser needs to have access to hardware, and for that, we need an interface. The interface we use here is the Client to Authenticator Protocol (CTAP). It allows access to different authenticators over different mechanisms. For example, we can access an authenticator over NFC, USB, and Bluetooth by utilizing CTAP.\nOne of the more interesting ways to use passkeys is by connecting your phone over Bluetooth to another device that might not support passkeys. When the devices are paired over Bluetooth, I can log into the browser on my computer using my phone as an intermediary!\nThe difference between passkeys and WebAuthn\nPasskeys and WebAuthn keys differ in several ways. First, passkeys are considered multi-device credentials and can be synced across devices. By contrast, WebAuthn keys are single-device credentials — a fancy way of saying you’re bound to one device for verification.\nSecond, to authenticate to a server, WebAuthn keys need to provide the user handle for login, after which an allowCredentials list is returned to the client from the server, which informs what credentials can be used to log in. Passkeys skip this step and use the server’s domain name to show which keys are already bound to that site. You’re able to select the passkey that is associated with that server, as it’s already known by your system.\nOtherwise, the keys are cryptographically the same; they only differ in how they’re stored and what information they use to start the login process.\nThe process… in a nutshell\nThe process for generating a WebAuthn or a passkey is very similar: get a challenge from the server and then use the navigator.credentials.create web API to generate a public key pair. Then, send the challenge and the public key back to the server to be stored.\nUpon receiving the public key and challenge, the server validates the challenge and the session from which it was created. If that checks out, the public key is stored, as well as any other relevant information like the user identifier or attestation data, in the database.\nThe user has one more step — retrieve another challenge from the server and use the navigator.credentials.get API to sign the challenge. We send back the signed challenge to the server, and the server verifies the challenge, then logs us in if the signature passes.\nThere is, of course, quite a bit more to each step. But that is generally how we’d log into a website using WebAuthn or passkeys.\nThe meat and potatoes\nPasskeys are used in two distinct phases: the attestation and assertion phases.\nThe attestation phase can also be thought of as the registration phase. You’d sign up with an email and password for a new website, however, in this case, we’d be using our passkey.\nThe assertion phase is similar to how you’d log in to a website after signing up.\nAttestation\nView full size\n\n\n\nThe navigator.credentials.create API is the focus of our attestation phase. We’re registered as a new user in the system and need to generate a new public key pair. However, we need to specify what kind of key pair we want to generate. That means we need to provide options to navigator.credentials.create.\n// The `challenge` is random and has to come from the server\nconst publicKey: PublicKeyCredentialCreationOptions = {\n  challenge: safeEncode(challenge),\n  rp: {\n    id: window.location.host,\n    name: document.title,\n  },\n  user: {\n    id: new TextEncoder().encode(crypto.randomUUID()), // Why not make it random?\n    name: 'Your username',\n    displayName: 'Display name in browser',\n  },\n  pubKeyCredParams: [\n    {\n      type: 'public-key',\n      alg: -7, // ES256\n    },\n    {\n      type: 'public-key',\n      alg: -256, // RS256\n    },\n  ],\n  authenticatorSelection: {\n    userVerification: 'preferred', // Do you want to use biometrics or a pin?\n    residentKey: 'required', // Create a resident key e.g. passkey\n  },\n  attestation: 'indirect', // indirect, direct, or none\n  timeout: 60_000,\n};\nconst pubKeyCredential: PublicKeyCredential = await navigator.credentials.create({\n  publicKey\n});\nconst {\n  id // the key id a.k.a. kid\n} = pubKeyCredential;\nconst pubKey = pubKeyCredential.response.getPublicKey();\nconst { clientDataJSON, attestationObject } = pubKeyCredential.response;\nconst { type, challenge, origin } = JSON.parse(new TextDecoder().decode(clientDataJSON));\n// Send data off to the server for registration\nWe’ll get PublicKeyCredential which contains an AuthenticatorAttestationResponse that comes back after creation. The credential has the generated key pair’s ID.\nThe response provides a couple of bits of useful information. First, we have our public key in this response, and we need to send that to the server to be stored. Second, we also get back the clientDataJSON property which we can decode, and from there, get back the type, challenge, and origin of the passkey.\nFor attestation, we want to validate the type, challenge, and origin on the server, as well as store the public key with its identifier, e.g. kid. We can also optionally store the attestationObject if we wish. Another useful property to store is the COSE algorithm, which is defined above in our  PublicKeyCredentialCreationOptions with alg: -7 or alg: -256, in order to easily verify any signed challenges in the assertion phase.\nAssertion\nView full size\n\n\n\nThe navigator.credentials.get API will be the focus of the assertion phase. Conceptually, this would be where the user logs in to the web application after signing up.\n// The `challenge` is random and has to come from the server\nconst publicKey: PublicKeyCredentialRequestOptions = {\n  challenge: new TextEncoder().encode(challenge),\n  rpId: window.location.host,\n  timeout: 60_000,\n};\nconst publicKeyCredential: PublicKeyCredential = await navigator.credentials.get({\n  publicKey,\n  mediation: 'optional',\n});\nconst {\n  id // the key id, aka kid\n} = pubKeyCredential;\nconst { clientDataJSON, attestationObject, signature, userHandle } = pubKeyCredential.response;\nconst { type, challenge, origin } = JSON.parse(new TextDecoder().decode(clientDataJSON));\n// Send data off to the server for verification\nWe’ll again get a PublicKeyCredential with an AuthenticatorAssertionResponse this time. The credential again includes the key identifier.\nWe also get the type, challenge, and origin from the clientDataJSON again. The signature is now included in the response, as well as the authenticatorData. We’ll need those and the clientDataJSON to verify that this was signed with the private key.\nThe authenticatorData includes some properties that are worth tracking First is the SHA256 hash of the origin you’re using, located within the first 32 bytes, which is useful for verifying that request comes from the same origin server. Second is the signCount, which is from byte 33 to 37. This is generated from the authenticator and should be compared to its previous value to ensure that nothing fishy is going on with the key. The value should always 0 when it’s a multi-device passkey and should be randomly larger than the previous signCount when it’s a single-device passkey.\nOnce you’ve asserted your login, you should be logged in — congratulations! Passkeys is a pretty great protocol, but it does come with some caveats.\nSome downsides\nThere’s a lot of upside to Passkeys, however, there are some issues with it at the time of this writing. For one thing, passkeys is somewhat still early support-wise, with only single-device credentials allowed on Windows and very little support for Linux systems. Passkeys.dev provides a nice table that’s sort of like the Caniuse of this protocol.\nAlso, Google’s and Apple’s passkeys platforms do not communicate with each other. If you want to get your credentials from your Android phone over to your iPhone… well, you’re out of luck for now. That’s not to say there is no interoperability! You can log in to your computer by using your phone as an authenticator. But it would be much cleaner just to have it built into the operating system and synced without it being locked at the vendor level.\nWhere are things going?\nWhat does the passkeys protocol of the future look like? It looks pretty good! Once it gains support from more operating systems, there should be an uptake in usage, and you’ll start seeing it used more and more in the wild. Some password managers are even going to support them first-hand.\nPasskeys are by no means only supported on the web. Android and iOS will both support native passkeys as first-class citizens. We’re still in the early days of all this, but expect to see it mentioned more and more.\nAfter all, we eliminate the need for passwords, and by doing so, make the world safer for it!\nResources\nHere are some more resources if you want to learn more about Passkeys. There’s also a repository and demo I put together for this article.\nLive Demo (no actual information is collected by the form)\nDemo GitHub Repository\nYubiKey Documentation\nPasskeys.dev\nPasskeys.io\nWebauthn.io\nPasskeys: What the Heck and Why? originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
          "dc:creator": "Neal Fennimore",
          "comments": "https://css-tricks.com/passkeys-what-the-heck-and-why/#respond",
          "content": "<p>These things called&#160;<strong>passkeys</strong>&#160;sure are making the rounds these days. They were a main attraction at&#160;<a href=\"https://www.w3.org/2022/09/TPAC/demos/passkeys.html\" rel=\"noopener\">W3C TPAC 2022</a>, gained support in&#160;<a href=\"https://developer.apple.com/documentation/safari-release-notes/safari-16_1-release-notes/\" rel=\"noopener\">Safari 16</a>, are finding their way into&#160;<a href=\"https://developer.apple.com/passkeys/\" rel=\"noopener\">macOS and iOS</a>, and are slated to &#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/passkeys-what-the-heck-and-why/\">Passkeys: What the Heck and Why?</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n",
          "contentSnippet": "These things called passkeys sure are making the rounds these days. They were a main attraction at W3C TPAC 2022, gained support in Safari 16, are finding their way into macOS and iOS, and are slated to …\nPasskeys: What the Heck and Why? originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
          "guid": "https://css-tricks.com/?p=377305",
          "categories": [
            "Article",
            "passkeys",
            "security",
            "webauthn"
          ],
          "isoDate": "2023-04-12T17:41:53.000Z"
        },
        {
          "creator": "Pankaj Parashar",
          "title": "Some Cross-Browser DevTools Features You Might Not Know",
          "link": "https://css-tricks.com/some-cross-browser-devtools-features-you-might-not-know/",
          "pubDate": "Wed, 22 Mar 2023 20:22:42 +0000",
          "content:encoded": "\n<p>I spend a lot of time in DevTools, and I’m sure you do too. Sometimes I even bounce between them, especially when I’m debugging cross-browser issues. DevTools is a lot like browsers themselves — not all of the features in one browser’s DevTools will be the same or supported in another browser’s DevTools.</p>\n\n\n\n<p>But there are quite a few DevTools features that are interoperable, even some lesser-known ones that I’m about to share with you.</p>\n\n\n\n<p>For the sake of brevity, I use “Chromium” to refer to all Chromium-based browsers, like Chrome, Edge, and Opera, in the article. Many of the DevTools in them offer the exact same features and capabilities as one another, so this is just my shorthand for referring to all of them at once.</p>\n\n\n\n<span id=\"more-377264\"></span>\n\n\n<h3 class=\"wp-block-heading\" id=\"search-nodes-in-the-dom-tree\">Search nodes in the DOM tree</h3>\n\n\n<p>Sometimes the DOM tree is full of nodes nested in nodes that are nested in other nodes, and so on. That makes it pretty tough to find the exact one you’re looking for, but you can quickly search the DOM tree using <code>Cmd</code> + <code>F</code> (macOS) or <code>Ctrl</code> + <code>F</code> (Windows).</p>\n\n\n\n<p>Additionally, you can also search using a valid CSS selector, like <code>.red</code>, or using an XPath, like <code>//div/h1</code>.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"2378\" height=\"1048\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_7E25E76B5C1A2A0120D43B477F8F8B0FA75578B215D36F3A918DC29D997AA0F4_1674209097213_image-1.png?resize=2378%2C1048&#038;ssl=1\" alt=\"DevTools screenshots of all three browsers.\" class=\"wp-image-377265\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_7E25E76B5C1A2A0120D43B477F8F8B0FA75578B215D36F3A918DC29D997AA0F4_1674209097213_image-1.png?w=2378&amp;ssl=1 2378w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_7E25E76B5C1A2A0120D43B477F8F8B0FA75578B215D36F3A918DC29D997AA0F4_1674209097213_image-1.png?resize=300%2C132&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_7E25E76B5C1A2A0120D43B477F8F8B0FA75578B215D36F3A918DC29D997AA0F4_1674209097213_image-1.png?resize=1024%2C451&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_7E25E76B5C1A2A0120D43B477F8F8B0FA75578B215D36F3A918DC29D997AA0F4_1674209097213_image-1.png?resize=768%2C338&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_7E25E76B5C1A2A0120D43B477F8F8B0FA75578B215D36F3A918DC29D997AA0F4_1674209097213_image-1.png?resize=1536%2C677&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_7E25E76B5C1A2A0120D43B477F8F8B0FA75578B215D36F3A918DC29D997AA0F4_1674209097213_image-1.png?resize=2048%2C903&amp;ssl=1 2048w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption class=\"wp-element-caption\">Searching text in Chrome DevTools (left), selectors in Firefox DevTools (center), and XPath in Safari DevTools (right)</figcaption></figure>\n\n\n\n<p>In Chromium browsers, the focus automatically jumps to the node that matches the search criteria as you type, which could be annoying if you are working with longer search queries or a large DOM tree. Fortunately, you can disable this behavior by heading to <strong>Settings</strong> (<code>F1</code>) → <strong>Preferences</strong> → <strong>Global</strong> → <strong>Search as you type</strong> → <strong>Disable</strong>.</p>\n\n\n\n<p>After you have located the node in the DOM tree, you can scroll the page to bring the node within the viewport by right-clicking on the nod, and selecting “Scroll into view”.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"1786\" height=\"1118\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_7E25E76B5C1A2A0120D43B477F8F8B0FA75578B215D36F3A918DC29D997AA0F4_1675742347357_image.png?resize=1786%2C1118&#038;ssl=1\" alt=\"Showing a highlighted node on a webpage with a contextual menu open to scroll into view\" class=\"wp-image-377270\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_7E25E76B5C1A2A0120D43B477F8F8B0FA75578B215D36F3A918DC29D997AA0F4_1675742347357_image.png?w=1786&amp;ssl=1 1786w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_7E25E76B5C1A2A0120D43B477F8F8B0FA75578B215D36F3A918DC29D997AA0F4_1675742347357_image.png?resize=300%2C188&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_7E25E76B5C1A2A0120D43B477F8F8B0FA75578B215D36F3A918DC29D997AA0F4_1675742347357_image.png?resize=1024%2C641&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_7E25E76B5C1A2A0120D43B477F8F8B0FA75578B215D36F3A918DC29D997AA0F4_1675742347357_image.png?resize=768%2C481&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_7E25E76B5C1A2A0120D43B477F8F8B0FA75578B215D36F3A918DC29D997AA0F4_1675742347357_image.png?resize=1536%2C962&amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n<h3 class=\"wp-block-heading\" id=\"access-nodes-from-the-console\">Access nodes from the console</h3>\n\n\n<p>DevTools provides many different ways to access a DOM node directly from the console.</p>\n\n\n\n<p>For example, you can use <code>$0</code> to access the currently selected node in the DOM tree. Chromium browsers take this one step further by allowing you to access nodes selected in the reverse chronological order of historic selection using, <code>$1</code>, <code>$2</code>, <code>$3</code>, etc.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"1682\" height=\"1028\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_7E25E76B5C1A2A0120D43B477F8F8B0FA75578B215D36F3A918DC29D997AA0F4_1674396487537_image-3.png?resize=1682%2C1028&#038;ssl=1\" alt=\"Currently selected node accessed from the Console in Edge DevTools\" class=\"wp-image-377271\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_7E25E76B5C1A2A0120D43B477F8F8B0FA75578B215D36F3A918DC29D997AA0F4_1674396487537_image-3.png?w=1682&amp;ssl=1 1682w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_7E25E76B5C1A2A0120D43B477F8F8B0FA75578B215D36F3A918DC29D997AA0F4_1674396487537_image-3.png?resize=300%2C183&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_7E25E76B5C1A2A0120D43B477F8F8B0FA75578B215D36F3A918DC29D997AA0F4_1674396487537_image-3.png?resize=1024%2C626&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_7E25E76B5C1A2A0120D43B477F8F8B0FA75578B215D36F3A918DC29D997AA0F4_1674396487537_image-3.png?resize=768%2C469&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_7E25E76B5C1A2A0120D43B477F8F8B0FA75578B215D36F3A918DC29D997AA0F4_1674396487537_image-3.png?resize=1536%2C939&amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Another thing that Chromium browsers allow you to do is copy the node path as a JavaScript expression in the form of <code>document.querySelector</code> by right-clicking on the node, and selecting <strong>Copy</strong> → <strong>Copy JS path</strong>, which can then be used to access the node in the console.</p>\n\n\n\n<figure class=\"wp-block-video wp-block-embed is-type-video is-provider-videopress\"><div class=\"wp-block-embed__wrapper\">\n<iframe title=\"VideoPress Video Player\" aria-label='VideoPress Video Player' width='500' height='305' src='https://videopress.com/embed/jwsHG7QN?cover=1&amp;playsinline=1&amp;preloadContent=metadata&amp;useAverageColor=1&amp;hd=1' frameborder='0' allowfullscreen data-resize-to-parent=\"true\" allow='clipboard-write'></iframe><script src='https://v0.wordpress.com/js/next/videopress-iframe.js?m=1674852142'></script>\n</div></figure>\n\n\n\n<p>Here’s another way to access a DOM node directly from the console: as a temporary variable. This option is available by right-clicking on the node and selecting an option. That option is labeled differently in each browser&#8217;s DevTools:</p>\n\n\n\n<ul>\n<li><strong>Chromium</strong>: Right click → “Store as global variable”</li>\n\n\n\n<li><strong>Firefox</strong>: Right click → “Use in Console”</li>\n\n\n\n<li><strong>Safari</strong>: Right click → “Log Element”</li>\n</ul>\n\n\n\n<figure class=\"wp-block-image size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"2560\" height=\"1440\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_7E25E76B5C1A2A0120D43B477F8F8B0FA75578B215D36F3A918DC29D997AA0F4_1674633378298_Myproject-1.png?resize=2560%2C1440&#038;ssl=1\" alt=\"Screenshot of DevTools contextual menus in all three browsers.\" class=\"wp-image-377274\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_7E25E76B5C1A2A0120D43B477F8F8B0FA75578B215D36F3A918DC29D997AA0F4_1674633378298_Myproject-1.png?w=2560&amp;ssl=1 2560w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_7E25E76B5C1A2A0120D43B477F8F8B0FA75578B215D36F3A918DC29D997AA0F4_1674633378298_Myproject-1.png?resize=300%2C169&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_7E25E76B5C1A2A0120D43B477F8F8B0FA75578B215D36F3A918DC29D997AA0F4_1674633378298_Myproject-1.png?resize=1024%2C576&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_7E25E76B5C1A2A0120D43B477F8F8B0FA75578B215D36F3A918DC29D997AA0F4_1674633378298_Myproject-1.png?resize=768%2C432&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_7E25E76B5C1A2A0120D43B477F8F8B0FA75578B215D36F3A918DC29D997AA0F4_1674633378298_Myproject-1.png?resize=1536%2C864&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_7E25E76B5C1A2A0120D43B477F8F8B0FA75578B215D36F3A918DC29D997AA0F4_1674633378298_Myproject-1.png?resize=2048%2C1152&amp;ssl=1 2048w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption class=\"wp-element-caption\">Access a node as a temporary variable in the console, as shown in Chrome (left), Firefox (center), and Safari (right)</figcaption></figure>\n\n\n<h3 class=\"wp-block-heading\" id=\"visualize-elements-with-badges\">Visualize elements with badges</h3>\n\n\n<p>DevTools can help visualize elements that match certain properties by displaying a badge next to the node. Badges are clickable, and different browsers offer a variety of different badges.</p>\n\n\n\n<p>In <strong>Safari</strong>, there is a badge button in the Elements panel toolbar which can be used to toggle the visibility of specific badges. For example, if a node has a <code>display: grid</code> or <code>display: inline-grid</code> CSS declaration applied to it, a <code>grid</code> badge is displayed next to it. Clicking on the badge will highlight grid areas, track sizes, line numbers, and more, on the page.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"1738\" height=\"1082\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_7E25E76B5C1A2A0120D43B477F8F8B0FA75578B215D36F3A918DC29D997AA0F4_1674708049378_Screenshot2023-01-26at10.05.40.png?resize=1738%2C1082&#038;ssl=1\" alt=\"A grid overlay visualized on top of a three-by-three grid.\" class=\"wp-image-377277\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_7E25E76B5C1A2A0120D43B477F8F8B0FA75578B215D36F3A918DC29D997AA0F4_1674708049378_Screenshot2023-01-26at10.05.40.png?w=1738&amp;ssl=1 1738w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_7E25E76B5C1A2A0120D43B477F8F8B0FA75578B215D36F3A918DC29D997AA0F4_1674708049378_Screenshot2023-01-26at10.05.40.png?resize=300%2C187&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_7E25E76B5C1A2A0120D43B477F8F8B0FA75578B215D36F3A918DC29D997AA0F4_1674708049378_Screenshot2023-01-26at10.05.40.png?resize=1024%2C637&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_7E25E76B5C1A2A0120D43B477F8F8B0FA75578B215D36F3A918DC29D997AA0F4_1674708049378_Screenshot2023-01-26at10.05.40.png?resize=768%2C478&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_7E25E76B5C1A2A0120D43B477F8F8B0FA75578B215D36F3A918DC29D997AA0F4_1674708049378_Screenshot2023-01-26at10.05.40.png?resize=1536%2C956&amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption class=\"wp-element-caption\">Grid overlay with badges in Safari DevTools</figcaption></figure>\n\n\n\n<p>The badges that are currently supported in <strong>Firefox</strong>’s DevTools are listed in the Firefox <a href=\"https://firefox-source-docs.mozilla.org/devtools-user/page_inspector/how_to/examine_and_edit_html/index.html#html-tree\" rel=\"noopener\">source docs</a>. For example, a <code>scroll</code> badge indicates a scrollable element. Clicking on the badge highlights the element causing the overflow with an <code>overflow</code> badge next to it.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"852\" height=\"379\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/overflow_badge.png?resize=852%2C379&#038;ssl=1\" alt=\"Overflow badge in Firefox DevTools located in the HTML panel\" class=\"wp-image-377279\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/overflow_badge.png?w=852&amp;ssl=1 852w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/overflow_badge.png?resize=300%2C133&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/overflow_badge.png?resize=768%2C342&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>In <strong>Chromium</strong> browsers, you can right-click on any node and select <strong>“Badge settings…”</strong> to open a container that lists all of the available badges. For example, elements with <code>scroll-snap-type</code> will have a <code>scroll-snap</code> badge next to it, which on click, will toggle the <code>scroll-snap</code> overlay on that element.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"1738\" height=\"1082\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/tbuxzdUk.png?resize=1738%2C1082&#038;ssl=1\" alt=\"\" class=\"wp-image-377296\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/tbuxzdUk.png?w=1738&amp;ssl=1 1738w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/tbuxzdUk.png?resize=300%2C187&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/tbuxzdUk.png?resize=1024%2C637&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/tbuxzdUk.png?resize=768%2C478&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/tbuxzdUk.png?resize=1536%2C956&amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n<h3 class=\"wp-block-heading\" id=\"taking-screenshots\">Taking screenshots</h3>\n\n\n<p>We’ve been able to take screenshots from some DevTools for a while now, but it’s now available in all of them and includes new ways to take full-page shots.</p>\n\n\n\n<p>The process starts by right-clicking on the DOM node you want to capture. Then select the option to capture the node, which is labeled differently depending on which DevTools you’re using.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"2560\" height=\"1700\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_7E25E76B5C1A2A0120D43B477F8F8B0FA75578B215D36F3A918DC29D997AA0F4_1674721274966_Myproject-1.png?resize=2560%2C1700&#038;ssl=1\" alt=\"Screenshot of DevTools in all three browsers.\" class=\"wp-image-377282\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_7E25E76B5C1A2A0120D43B477F8F8B0FA75578B215D36F3A918DC29D997AA0F4_1674721274966_Myproject-1.png?w=2560&amp;ssl=1 2560w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_7E25E76B5C1A2A0120D43B477F8F8B0FA75578B215D36F3A918DC29D997AA0F4_1674721274966_Myproject-1.png?resize=300%2C199&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_7E25E76B5C1A2A0120D43B477F8F8B0FA75578B215D36F3A918DC29D997AA0F4_1674721274966_Myproject-1.png?resize=1024%2C680&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_7E25E76B5C1A2A0120D43B477F8F8B0FA75578B215D36F3A918DC29D997AA0F4_1674721274966_Myproject-1.png?resize=768%2C510&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_7E25E76B5C1A2A0120D43B477F8F8B0FA75578B215D36F3A918DC29D997AA0F4_1674721274966_Myproject-1.png?resize=1536%2C1020&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_7E25E76B5C1A2A0120D43B477F8F8B0FA75578B215D36F3A918DC29D997AA0F4_1674721274966_Myproject-1.png?resize=2048%2C1360&amp;ssl=1 2048w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption class=\"wp-element-caption\">Chrome (left), Safari (middle), and Firefox (right)</figcaption></figure>\n\n\n\n<p>Repeat the same steps on the <code>html</code> node to take a full-page screenshot. When you do, though, it’s worth noting that Safari retains the transparency of the element’s background color — Chromium and Firefox will capture it as a white background.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"1506\" height=\"1082\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_7E25E76B5C1A2A0120D43B477F8F8B0FA75578B215D36F3A918DC29D997AA0F4_1674721838803_Screenshot2023-01-26at14.00.01.png?resize=1506%2C1082&#038;ssl=1\" alt=\"Two screenshots of the same element, one with a background and one without.\" class=\"wp-image-377283\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_7E25E76B5C1A2A0120D43B477F8F8B0FA75578B215D36F3A918DC29D997AA0F4_1674721838803_Screenshot2023-01-26at14.00.01.png?w=1506&amp;ssl=1 1506w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_7E25E76B5C1A2A0120D43B477F8F8B0FA75578B215D36F3A918DC29D997AA0F4_1674721838803_Screenshot2023-01-26at14.00.01.png?resize=300%2C216&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_7E25E76B5C1A2A0120D43B477F8F8B0FA75578B215D36F3A918DC29D997AA0F4_1674721838803_Screenshot2023-01-26at14.00.01.png?resize=1024%2C736&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_7E25E76B5C1A2A0120D43B477F8F8B0FA75578B215D36F3A918DC29D997AA0F4_1674721838803_Screenshot2023-01-26at14.00.01.png?resize=768%2C552&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption class=\"wp-element-caption\">Comparing screenshots in Safari (left) and Chromium (right)</figcaption></figure>\n\n\n\n<p>There’s another option! You can take a “responsive” screenshot of the page, which allows you to capture the page at a specific viewport width. As you might expect, each browser has different ways to get there.</p>\n\n\n\n<ul>\n<li><strong>Chromium</strong>: <code>Cmd</code> + <code>Shift</code> + <code>M</code> (macOS) or <code>Ctrl</code> + <code>Shift</code> + <code>M</code> (Windows). Or click the “Devices” icon next to the “Inspect” icon.</li>\n\n\n\n<li><strong>Firefox</strong>: Tools → Browser Tools → “Responsive Design Mode”</li>\n\n\n\n<li><strong>Safari</strong>: Develop → “Enter Responsive Design Mode”</li>\n</ul>\n\n\n\n<figure class=\"wp-block-image size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"2550\" height=\"1700\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_7E25E76B5C1A2A0120D43B477F8F8B0FA75578B215D36F3A918DC29D997AA0F4_1674755907874_screenshot.png?resize=2550%2C1700&#038;ssl=1\" alt=\"Enter responsive mode options in DevTools for all three browsers.\" class=\"wp-image-377285\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_7E25E76B5C1A2A0120D43B477F8F8B0FA75578B215D36F3A918DC29D997AA0F4_1674755907874_screenshot.png?w=2550&amp;ssl=1 2550w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_7E25E76B5C1A2A0120D43B477F8F8B0FA75578B215D36F3A918DC29D997AA0F4_1674755907874_screenshot.png?resize=300%2C200&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_7E25E76B5C1A2A0120D43B477F8F8B0FA75578B215D36F3A918DC29D997AA0F4_1674755907874_screenshot.png?resize=1024%2C683&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_7E25E76B5C1A2A0120D43B477F8F8B0FA75578B215D36F3A918DC29D997AA0F4_1674755907874_screenshot.png?resize=768%2C512&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_7E25E76B5C1A2A0120D43B477F8F8B0FA75578B215D36F3A918DC29D997AA0F4_1674755907874_screenshot.png?resize=1536%2C1024&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_7E25E76B5C1A2A0120D43B477F8F8B0FA75578B215D36F3A918DC29D997AA0F4_1674755907874_screenshot.png?resize=2048%2C1365&amp;ssl=1 2048w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption class=\"wp-element-caption\">Launching responsive design mode in Safari (left), Firefox (right), and Chromium (bottom)</figcaption></figure>\n\n\n<h3 class=\"wp-block-heading\" id=\"chrome-tip-inspect-the-top-layer\">Chrome tip: Inspect the top layer</h3>\n\n\n<p>Chrome lets you visualize and inspect top-layer elements, like a dialog, alert, or modal. When an element is added to the <code>#top-layer</code>, it gets a <code>top-layer</code> badge next to it, which on click, jumps you to the top-layer container located just after the <code>&lt;/html&gt;</code> tag.</p>\n\n\n\n<p>The order of the elements in the <code>top-layer</code> container follows the stacking order, which means the last one is on the top. Click the <code>reveal</code> badge to jump back to the node.</p>\n\n\n\n<figure class=\"wp-block-video wp-block-embed is-type-video is-provider-videopress\"><div class=\"wp-block-embed__wrapper\">\n<iframe title=\"VideoPress Video Player\" aria-label='VideoPress Video Player' width='500' height='315' src='https://videopress.com/embed/jljQbj3P?cover=1&amp;playsinline=1&amp;preloadContent=metadata&amp;useAverageColor=1&amp;hd=1' frameborder='0' allowfullscreen data-resize-to-parent=\"true\" allow='clipboard-write'></iframe><script src='https://v0.wordpress.com/js/next/videopress-iframe.js?m=1674852142'></script>\n</div></figure>\n\n\n<h3 class=\"wp-block-heading\" id=\"firefox-tip-jump-to-id\">Firefox tip: Jump to ID</h3>\n\n\n<p>Firefox links the element referencing the ID attribute to its target element in the same DOM and highlights it with an underline. Use <code>CMD</code> + <code>Click</code> (macOS) or <code>CTRL</code> + <code>Click</code> (Windows) )to jump to the target element with the identifier.</p>\n\n\n\n<figure class=\"wp-block-video wp-block-embed is-type-video is-provider-videopress\"><div class=\"wp-block-embed__wrapper\">\n<iframe title=\"VideoPress Video Player\" aria-label='VideoPress Video Player' width='500' height='315' src='https://videopress.com/embed/qWuqfQTh?cover=1&amp;playsinline=1&amp;preloadContent=metadata&amp;useAverageColor=1&amp;hd=1' frameborder='0' allowfullscreen data-resize-to-parent=\"true\" allow='clipboard-write'></iframe><script src='https://v0.wordpress.com/js/next/videopress-iframe.js?m=1674852142'></script>\n</div></figure>\n\n\n<h3 class=\"wp-block-heading\" id=\"wrapping-up\">Wrapping up</h3>\n\n\n<p>Quite a few things, right? It’s awesome that there are some incredibly useful DevTools features that are supported in Chromium, Firefox, and Safari alike. Are there any other lesser-known features supported by all three that you like?</p>\n\n\n\n<p>There are a few resources I keep close by to stay on top of what’s new. I thought I’d share them with here:</p>\n\n\n\n<ul>\n<li><a href=\"https://devtoolstips.org/\" rel=\"noopener\">DevTools Tips</a> (Patrick Brosset): A curated collection of helpful cross-browser DevTools tips and tricks.</li>\n\n\n\n<li><a href=\"https://umaar.com/dev-tips/\" rel=\"noopener\">Dev Tips</a> (Umar Hansa): DevTools tips sent to your inbox!</li>\n\n\n\n<li><a href=\"https://www.canidev.tools/\" rel=\"noopener\">Can I DevTools?</a>: The <a href=\"https://caniuse.com\" rel=\"noopener\">Can</a><a href=\"https://caniuse.com\" rel=\"noopener\">iuse</a> for DevTools.</li>\n</ul>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/some-cross-browser-devtools-features-you-might-not-know/\">Some Cross-Browser DevTools Features You Might Not Know</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n",
          "content:encodedSnippet": "I spend a lot of time in DevTools, and I’m sure you do too. Sometimes I even bounce between them, especially when I’m debugging cross-browser issues. DevTools is a lot like browsers themselves — not all of the features in one browser’s DevTools will be the same or supported in another browser’s DevTools.\nBut there are quite a few DevTools features that are interoperable, even some lesser-known ones that I’m about to share with you.\nFor the sake of brevity, I use “Chromium” to refer to all Chromium-based browsers, like Chrome, Edge, and Opera, in the article. Many of the DevTools in them offer the exact same features and capabilities as one another, so this is just my shorthand for referring to all of them at once.\n\n\n\nSearch nodes in the DOM tree\nSometimes the DOM tree is full of nodes nested in nodes that are nested in other nodes, and so on. That makes it pretty tough to find the exact one you’re looking for, but you can quickly search the DOM tree using Cmd + F (macOS) or Ctrl + F (Windows).\nAdditionally, you can also search using a valid CSS selector, like .red, or using an XPath, like //div/h1.\nSearching text in Chrome DevTools (left), selectors in Firefox DevTools (center), and XPath in Safari DevTools (right)\n\n\n\nIn Chromium browsers, the focus automatically jumps to the node that matches the search criteria as you type, which could be annoying if you are working with longer search queries or a large DOM tree. Fortunately, you can disable this behavior by heading to Settings (F1) → Preferences → Global → Search as you type → Disable.\nAfter you have located the node in the DOM tree, you can scroll the page to bring the node within the viewport by right-clicking on the nod, and selecting “Scroll into view”.\n\n\n\nAccess nodes from the console\nDevTools provides many different ways to access a DOM node directly from the console.\nFor example, you can use $0 to access the currently selected node in the DOM tree. Chromium browsers take this one step further by allowing you to access nodes selected in the reverse chronological order of historic selection using, $1, $2, $3, etc.\n\n\n\n\nAnother thing that Chromium browsers allow you to do is copy the node path as a JavaScript expression in the form of document.querySelector by right-clicking on the node, and selecting Copy → Copy JS path, which can then be used to access the node in the console.\n\n\n\n\n\n\nHere’s another way to access a DOM node directly from the console: as a temporary variable. This option is available by right-clicking on the node and selecting an option. That option is labeled differently in each browser’s DevTools:\nChromium: Right click → “Store as global variable”\nFirefox: Right click → “Use in Console”\nSafari: Right click → “Log Element”\nAccess a node as a temporary variable in the console, as shown in Chrome (left), Firefox (center), and Safari (right)\n\n\nVisualize elements with badges\nDevTools can help visualize elements that match certain properties by displaying a badge next to the node. Badges are clickable, and different browsers offer a variety of different badges.\nIn Safari, there is a badge button in the Elements panel toolbar which can be used to toggle the visibility of specific badges. For example, if a node has a display: grid or display: inline-grid CSS declaration applied to it, a grid badge is displayed next to it. Clicking on the badge will highlight grid areas, track sizes, line numbers, and more, on the page.\nGrid overlay with badges in Safari DevTools\n\n\n\nThe badges that are currently supported in Firefox’s DevTools are listed in the Firefox source docs. For example, a scroll badge indicates a scrollable element. Clicking on the badge highlights the element causing the overflow with an overflow badge next to it.\n\n\n\n\nIn Chromium browsers, you can right-click on any node and select “Badge settings…” to open a container that lists all of the available badges. For example, elements with scroll-snap-type will have a scroll-snap badge next to it, which on click, will toggle the scroll-snap overlay on that element.\n\n\n\nTaking screenshots\nWe’ve been able to take screenshots from some DevTools for a while now, but it’s now available in all of them and includes new ways to take full-page shots.\nThe process starts by right-clicking on the DOM node you want to capture. Then select the option to capture the node, which is labeled differently depending on which DevTools you’re using.\nChrome (left), Safari (middle), and Firefox (right)\n\n\n\nRepeat the same steps on the html node to take a full-page screenshot. When you do, though, it’s worth noting that Safari retains the transparency of the element’s background color — Chromium and Firefox will capture it as a white background.\nComparing screenshots in Safari (left) and Chromium (right)\n\n\n\nThere’s another option! You can take a “responsive” screenshot of the page, which allows you to capture the page at a specific viewport width. As you might expect, each browser has different ways to get there.\nChromium: Cmd + Shift + M (macOS) or Ctrl + Shift + M (Windows). Or click the “Devices” icon next to the “Inspect” icon.\nFirefox: Tools → Browser Tools → “Responsive Design Mode”\nSafari: Develop → “Enter Responsive Design Mode”\nLaunching responsive design mode in Safari (left), Firefox (right), and Chromium (bottom)\n\n\nChrome tip: Inspect the top layer\nChrome lets you visualize and inspect top-layer elements, like a dialog, alert, or modal. When an element is added to the #top-layer, it gets a top-layer badge next to it, which on click, jumps you to the top-layer container located just after the </html> tag.\nThe order of the elements in the top-layer container follows the stacking order, which means the last one is on the top. Click the reveal badge to jump back to the node.\n\n\n\n\n\nFirefox tip: Jump to ID\nFirefox links the element referencing the ID attribute to its target element in the same DOM and highlights it with an underline. Use CMD + Click (macOS) or CTRL + Click (Windows) )to jump to the target element with the identifier.\n\n\n\n\n\nWrapping up\nQuite a few things, right? It’s awesome that there are some incredibly useful DevTools features that are supported in Chromium, Firefox, and Safari alike. Are there any other lesser-known features supported by all three that you like?\nThere are a few resources I keep close by to stay on top of what’s new. I thought I’d share them with here:\nDevTools Tips (Patrick Brosset): A curated collection of helpful cross-browser DevTools tips and tricks.\nDev Tips (Umar Hansa): DevTools tips sent to your inbox!\nCan I DevTools?: The Caniuse for DevTools.\nSome Cross-Browser DevTools Features You Might Not Know originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
          "dc:creator": "Pankaj Parashar",
          "comments": "https://css-tricks.com/some-cross-browser-devtools-features-you-might-not-know/#comments",
          "content": "<p>I spend a lot of time in DevTools, and I’m sure you do too. Sometimes I even bounce between them, especially when I’m debugging cross-browser issues. DevTools is a lot like browsers themselves — not all of the features in &#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/some-cross-browser-devtools-features-you-might-not-know/\">Some Cross-Browser DevTools Features You Might Not Know</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n",
          "contentSnippet": "I spend a lot of time in DevTools, and I’m sure you do too. Sometimes I even bounce between them, especially when I’m debugging cross-browser issues. DevTools is a lot like browsers themselves — not all of the features in …\nSome Cross-Browser DevTools Features You Might Not Know originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
          "guid": "https://css-tricks.com/?p=377264",
          "categories": [
            "Article",
            "cross-browser",
            "DevTools"
          ],
          "isoDate": "2023-03-22T20:22:42.000Z"
        },
        {
          "creator": "Mads Stoumann",
          "title": "Making Calendars With Accessibility and Internationalization in Mind",
          "link": "https://css-tricks.com/making-calendars-with-accessibility-and-internationalization-in-mind/",
          "pubDate": "Mon, 13 Mar 2023 13:23:52 +0000",
          "content:encoded": "\n<p>Doing a quick search here on CSS-Tricks shows just how many different ways there are to approach calendars. Some show how <a href=\"https://css-tricks.com/a-calendar-in-three-lines-of-css/\">CSS Grid can create the layout efficiently</a>. Some attempt to <a href=\"https://css-tricks.com/how-to-make-a-monthly-calendar-with-real-data/\">bring actual data into the mix</a>. Some <a href=\"https://css-tricks.com/lets-make-a-vue-powered-monthly-calendar/\">rely on a framework</a> to help with state management.</p>\n\n\n\n<p>There are many considerations when building a calendar component — far more than what is covered in the articles I linked up. If you think about it, calendars are fraught with nuance, from handling timezones and date formats to localization and even making sure dates flow from one month to the next… and that’s before we even get into accessibility and additional layout considerations depending on where the calendar is displayed and whatnot.</p>\n\n\n\n<p>Many developers fear the <a href=\"https://css-tricks.com/everything-you-need-to-know-about-date-in-javascript/\"><code>Date()</code> object</a> and stick with older libraries like <a href=\"https://momentjs.com\" rel=\"noopener\"><code>moment.js</code></a>. But while there are many “gotchas” when it comes to dates and formatting, JavaScript has a lot of cool APIs and stuff to help out!</p>\n\n\n\n<span id=\"more-376950\"></span>\n\n\n\n<figure class=\"wp-block-image size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"464\" height=\"251\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/01/s_5F326355ADAED13048ECB603E300F82A04D113F56D11D632592576A458AB8C94_1672583219797_image.png?resize=464%2C251&#038;ssl=1\" alt=\"January 2023 calendar grid.\" class=\"wp-image-376951\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/01/s_5F326355ADAED13048ECB603E300F82A04D113F56D11D632592576A458AB8C94_1672583219797_image.png?w=464&amp;ssl=1 464w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/01/s_5F326355ADAED13048ECB603E300F82A04D113F56D11D632592576A458AB8C94_1672583219797_image.png?resize=300%2C162&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>I don’t want to re-create the wheel here, but I will show you how we can get a dang good calendar with vanilla JavaScript. We’ll look into <strong>accessibility</strong>, using semantic markup and screenreader-friendly <code>&lt;time&gt;</code> -tags — as well as <strong>internationalization</strong> and <strong>formatting</strong>, using the <code>Intl.Locale</code>, <code>Intl.DateTimeFormat</code> and <code>Intl.NumberFormat</code>-APIs.</p>\n\n\n\n<p>In other words, we’re making a calendar… only without the extra dependencies you might typically see used in a tutorial like this, and with some of the nuances you might not typically see. And, in the process, I hope you’ll gain a new appreciation for newer things that JavaScript can do while getting an idea of the sorts of things that cross my mind when I’m putting something like this together.</p>\n\n\n<h3 class=\"wp-block-heading\" id=\"first-off-naming\">First off, naming</h3>\n\n\n<p>What should we call our calendar component? In my native language, it would be called “kalender element”, so let’s use that and shorten that to “Kal-El” — also known as <a href=\"https://the-superman.fandom.com/wiki/Kal-El\" rel=\"noopener\">Superman’s name on the planet Krypton</a>.</p>\n\n\n\n<p>Let’s create a function to get things going:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">function kalEl(settings = {}) { ... }</code></pre>\n\n\n\n<p>This method will render <strong>a single month</strong>. Later we’ll call this method from <code>[...Array(12).keys()]</code> to render an entire year.</p>\n\n\n<h3 class=\"wp-block-heading\" id=\"initial-data-and-internationalization\">Initial data and internationalization</h3>\n\n\n<p>One of the common things a typical online calendar does is highlight the current date. So let’s create a reference for that:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const today = new Date();</code></pre>\n\n\n\n<p>Next, we’ll create a “configuration object” that we’ll merge with the optional <code>settings</code> object of the primary method:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const config = Object.assign(\n  {\n    locale: (document.documentElement.getAttribute('lang') || 'en-US'), \n    today: { \n      day: today.getDate(),\n      month: today.getMonth(),\n      year: today.getFullYear() \n    } \n  }, settings\n);</code></pre>\n\n\n\n<p>We check, if the root element (<code>&lt;html&gt;</code>) contains a <code>lang</code>-attribute with <strong>locale</strong> info; otherwise, we’ll fallback to using <code>en-US</code>. This is the first step toward <a href=\"https://www.w3.org/International/questions/qa-html-language-declarations\" rel=\"noopener\">internationalizing the calendar</a>.</p>\n\n\n\n<p>We also need to determine which month to initially display when the calendar is rendered. That&#8217;s why we extended the <code>config</code> object with the primary <code>date</code>. This way, if no date is provided in the <code>settings</code> object, we’ll use the <code>today</code> reference instead:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const date = config.date ? new Date(config.date) : today;</code></pre>\n\n\n\n<p>We need a little more info to properly format the calendar based on locale. For example, we might not know whether the first day of the week is Sunday or Monday, depending on the locale. If we have the info, great! But if not, we’ll update it using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale\" rel=\"noopener\"><code>Intl.Locale</code> API</a>. The API has a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/weekInfo\" rel=\"noopener\"><code>weekInfo</code> object</a> that returns a <code>firstDay</code> property that gives us exactly what we’re looking for without any hassle. We can also get which days of the week are assigned to the <code>weekend</code>:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">if (!config.info) config.info = new Intl.Locale(config.locale).weekInfo || { \n  firstDay: 7,\n  weekend: [6, 7] \n};</code></pre>\n\n\n\n<p>Again, we create fallbacks. The “first day” of the week for <code>en-US</code> is Sunday, so it defaults to a value of <code>7</code>. This is a little confusing, as the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getDay\" rel=\"noopener\"><code>getDay</code> method</a> in JavaScript returns the days as <code>[0-6]</code>, where <code>0</code> is Sunday… don’t ask me why. The weekends are Saturday and Sunday, hence <code>[6, 7]</code>.</p>\n\n\n\n<p>Before we had the <code>Intl.Locale</code> API and its <code>weekInfo</code> method, it was pretty hard to create an international calendar without many **objects and arrays with information about each locale or region. Nowadays, it’s easy-peasy. If we pass in <code>en-GB</code>, the method returns:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// en-GB\n{\n  firstDay: 1,\n  weekend: [6, 7],\n  minimalDays: 4\n}</code></pre>\n\n\n\n<p>In a country like Brunei (<code>ms-BN</code>), the weekend is Friday and Sunday:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// ms-BN\n{\n  firstDay: 7,\n  weekend: [5, 7],\n  minimalDays: 1\n}</code></pre>\n\n\n\n<p class=\"is-style-explanation\">You might wonder what that <code>minimalDays</code> property is. That’s the <a href=\"https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Patterns_Week_Elements\" rel=\"noopener\">fewest days required in the first week of a month to be counted as a full week</a>. In some regions, it might be just one day. For others, it might be a full seven days.</p>\n\n\n\n<p>Next, we’ll create a <code>render</code> method within our <code>kalEl</code>-method:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const render = (date, locale) => { ... }</code></pre>\n\n\n\n<p>We still need some more data to work with before we render anything:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const month = date.getMonth();\nconst year = date.getFullYear();\nconst numOfDays = new Date(year, month + 1, 0).getDate();\nconst renderToday = (year === config.today.year) &amp;&amp; (month === config.today.month);</code></pre>\n\n\n\n<p>The last one is a <code>Boolean</code> that checks whether <code>today</code> exists in the month we’re about to render.</p>\n\n\n<h3 class=\"wp-block-heading\" id=\"semantic-markup\">Semantic markup</h3>\n\n\n<p>We’re going to get deeper in rendering in just a moment. But first, I want to make sure that the details we set up have semantic HTML tags associated with them. Setting that up right out of the box gives us accessibility benefits from the start.</p>\n\n\n<h4 class=\"wp-block-heading\" id=\"calendar-wrapper\">Calendar wrapper</h4>\n\n\n<p>First, we have the non-semantic wrapper: <code>&lt;kal-el&gt;</code>. That’s fine because there isn’t a semantic <code>&lt;calendar&gt;</code> tag or anything like that. If we weren’t making a custom element, <code>&lt;article&gt;</code> might be the most appropriate element since the calendar could stand on its own page.</p>\n\n\n<h4 class=\"wp-block-heading\" id=\"month-names\">Month names</h4>\n\n\n<p>The <code>&lt;time&gt;</code> element is going to be a big one for us because it helps translate dates into a format that screenreaders and search engines can parse more accurately and consistently. For example, here’s how we can convey “January 2023” in our markup:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;time datetime=\"2023-01\">January &lt;i>2023&lt;/i>&lt;/time></code></pre>\n\n\n<h4 class=\"wp-block-heading\" id=\"day-names\">Day names</h4>\n\n\n<p>The row above the calendar’s dates containing the names of the days of the week can be tricky. It’s ideal if we can write out the full names for each day — e.g. Sunday, Monday, Tuesday, etc. — but that can take up a lot of space. So, let’s abbreviate the names for now inside of an <code>&lt;ol&gt;</code> where each day is a <code>&lt;li&gt;</code>:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;ol>\n  &lt;li>&lt;abbr title=\"Sunday\">Sun&lt;/abbr>&lt;/li>\n  &lt;li>&lt;abbr title=\"Monday\">Mon&lt;/abbr>&lt;/li>\n  &lt;!-- etc. -->\n&lt;/ol></code></pre>\n\n\n\n<p>We could get tricky with CSS to get the best of both worlds. For example, if we modified the markup a bit like this:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;ol>\n  &lt;li>\n    &lt;abbr title=\"S\">Sunday&lt;/abbr>\n  &lt;/li>\n&lt;/ol></code></pre>\n\n\n\n<p>…we get the full names by default. We can then “hide” the full name when space runs out and display the <code>title</code> attribute instead:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@media all and (max-width: 800px) {\n  li abbr::after {\n    content: attr(title);\n  }\n}</code></pre>\n\n\n\n<p>But, we’re not going that way because the <code>Intl.DateTimeFormat</code> API can help here as well. We’ll get to that in the next section when we cover rendering.</p>\n\n\n<h4 class=\"wp-block-heading\" id=\"day-numbers\">Day numbers</h4>\n\n\n<p>Each date in the calendar grid gets a number. Each number is a list item (<code>&lt;li&gt;</code>) in an ordered list (<code>&lt;ol&gt;</code>), and the inline <code>&lt;time&gt;</code> tag wraps the actual number.</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;li>\n  &lt;time datetime=\"2023-01-01\">1&lt;/time>\n&lt;/li></code></pre>\n\n\n\n<p>And while I’m not planning to do any styling just yet, I know I will want some way to style the date numbers. That’s possible as-is, but I also want to be able to style weekday numbers differently than weekend numbers if I need to. So, I’m going to include <a href=\"https://css-tricks.com/a-complete-guide-to-data-attributes/\"><code>data-*</code> attributes</a> specifically for that: <code>data-weekend</code> and <code>data-today</code>.</p>\n\n\n<h4 class=\"wp-block-heading\" id=\"week-numbers\">Week numbers</h4>\n\n\n<p>There are 52 weeks in a year, sometimes 53. While it’s not super common, it can be nice to display the number for a given week in the calendar for additional context. I like having it now, even if I don&#8217;t wind up not using it. But we’ll totally use it in this tutorial.</p>\n\n\n\n<p>We’ll use a <code>data-weeknumber</code> attribute as a styling hook and include it in the markup for each date that is the week&#8217;s first date.</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;li data-day=\"7\" data-weeknumber=\"1\" data-weekend=\"\">\n  &lt;time datetime=\"2023-01-08\">8&lt;/time>\n&lt;/li></code></pre>\n\n\n<h3 class=\"wp-block-heading\" id=\"rendering\">Rendering</h3>\n\n\n<p>Let’s get the calendar on a page! We already know that <code>&lt;kal-el&gt;</code> is the name of our custom element. First thing we need to configure it is to set the <code>firstDay</code> property on it, so the calendar knows whether Sunday or some other day is the first day of the week.</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;kal-el data-firstday=\"${ config.info.firstDay }\"></code></pre>\n\n\n\n<p>We’ll be using <a href=\"https://css-tricks.com/template-literals/\">template literals</a> to render the markup. To format the dates for an international audience, we’ll use the <code>Intl.DateTimeFormat</code> API, again using the <code>locale</code> we specified earlier.</p>\n\n\n<h4 class=\"wp-block-heading\" id=\"the-month-and-year\">The month and year</h4>\n\n\n<p>When we call the <code>month</code>, we can set whether we want to use the <code>long</code> name (e.g. February) or the <code>short</code> name (e.g. Feb.). Let’s use the <code>long</code> name since it’s the title above the calendar:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;time datetime=\"${year}-${(pad(month))}\">\n  ${new Intl.DateTimeFormat(\n    locale,\n    { month:'long'}).format(date)} &lt;i>${year}&lt;/i>\n&lt;/time></code></pre>\n\n\n<h4 class=\"wp-block-heading\" id=\"weekday-names\">Weekday names</h4>\n\n\n<p>For weekdays displayed above the grid of dates, we need both the <code>long</code> (e.g. “Sunday”) and <code>short</code> (abbreviated, ie. “Sun”) names. This way, we can use the “short” name when the calendar is short on space:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">Intl.DateTimeFormat([locale], { weekday: 'long' })\nIntl.DateTimeFormat([locale], { weekday: 'short' })</code></pre>\n\n\n\n<p>Let’s make a small helper method that makes it a little easier to call each one:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const weekdays = (firstDay, locale) => {\n  const date = new Date(0);\n  const arr = [...Array(7).keys()].map(i => {\n    date.setDate(5 + i)\n    return {\n      long: new Intl.DateTimeFormat([locale], { weekday: 'long'}).format(date),\n      short: new Intl.DateTimeFormat([locale], { weekday: 'short'}).format(date)\n    }\n  })\n  for (let i = 0; i &lt; 8 - firstDay; i++) arr.splice(0, 0, arr.pop());\n  return arr;\n}</code></pre>\n\n\n\n<p>Here’s how we invoke that in the template:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;ol>\n  ${weekdays(config.info.firstDay,locale).map(name => `\n    &lt;li>\n      &lt;abbr title=\"${name.long}\">${name.short}&lt;/abbr>\n    &lt;/li>`).join('')\n  }\n&lt;/ol></code></pre>\n\n\n<h4 class=\"wp-block-heading\" id=\"day-numbers\">Day numbers</h4>\n\n\n<p>And finally, the days, wrapped in an <code>&lt;ol&gt;</code> element:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">${[...Array(numOfDays).keys()].map(i => {\n  const cur = new Date(year, month, i + 1);\n  let day = cur.getDay(); if (day === 0) day = 7;\n  const today = renderToday &amp;&amp; (config.today.day === i + 1) ? ' data-today':'';\n  return `\n    &lt;li data-day=\"${day}\"${today}${i === 0 || day === config.info.firstDay ? ` data-weeknumber=\"${new Intl.NumberFormat(locale).format(getWeek(cur))}\"`:''}${config.info.weekend.includes(day) ? ` data-weekend`:''}>\n      &lt;time datetime=\"${year}-${(pad(month))}-${pad(i)}\" tabindex=\"0\">\n        ${new Intl.NumberFormat(locale).format(i + 1)}\n      &lt;/time>\n    &lt;/li>`\n}).join('')}</code></pre>\n\n\n\n<p>Let’s break that down:</p>\n\n\n\n<ol>\n<li>We create a “dummy” array, based on the “number of days” variable, which we’ll use to iterate.</li>\n\n\n\n<li>We create a <code>day</code> variable for the current day in the iteration.</li>\n\n\n\n<li>We fix the discrepancy between the <code>Intl.Locale</code> API and <code>getDay()</code>.</li>\n\n\n\n<li>If the <code>day</code> is equal to <code>today</code>, we add a <code>data-*</code> attribute.</li>\n\n\n\n<li>Finally, we return the <code>&lt;li&gt;</code> element as a string with merged data.</li>\n\n\n\n<li><code>tabindex=\"0\"</code> makes the element focusable, when using keyboard navigation, after any positive tabindex values (Note: you should <strong>never</strong> add <strong>positive</strong> tabindex-values)</li>\n</ol>\n\n\n\n<p>To <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart\" rel=\"noopener\">“pad” the numbers</a> in the <code>datetime</code> attribute, we use a little helper method:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const pad = (val) => (val + 1).toString().padStart(2, '0');</code></pre>\n\n\n<h4 class=\"wp-block-heading\" id=\"week-number\">Week number</h4>\n\n\n<p>Again, the “week number” is where a week falls in a 52-week calendar. We use a little helper method for that as well:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">function getWeek(cur) {\n  const date = new Date(cur.getTime());\n  date.setHours(0, 0, 0, 0);\n  date.setDate(date.getDate() + 3 - (date.getDay() + 6) % 7);\n  const week = new Date(date.getFullYear(), 0, 4);\n  return 1 + Math.round(((date.getTime() - week.getTime()) / 86400000 - 3 + (week.getDay() + 6) % 7) / 7);\n}</code></pre>\n\n\n\n<p class=\"is-style-explanation\">I didn’t write this <code>getWeek</code>-method. It’s a cleaned up version of <a href=\"https://weeknumber.com/how-to/javascript\" rel=\"noopener\">this script</a>.</p>\n\n\n\n<p>And that’s it! Thanks to the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale\" rel=\"noopener\"><code>Intl.Locale</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\" rel=\"noopener\"><code>Intl.DateTimeFormat</code></a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\" rel=\"noopener\"><code>Intl.NumberFormat</code></a> APIs, we can now simply change the <code>lang</code>-attribute of the <code>&lt;html&gt;</code> element to change the context of the calendar based on the current region:</p>\n\n\n\n<div class=\"wp-block-columns is-layout-flex wp-container-8 wp-block-columns-is-layout-flex\">\n<div class=\"wp-block-column is-layout-flow wp-block-column-is-layout-flow\">\n<figure class=\"wp-block-image size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"456\" height=\"284\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/01/s_5F326355ADAED13048ECB603E300F82A04D113F56D11D632592576A458AB8C94_1672589519354_image.png?resize=456%2C284&#038;ssl=1\" alt=\"January 2023 calendar grid.\" class=\"wp-image-376959\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/01/s_5F326355ADAED13048ECB603E300F82A04D113F56D11D632592576A458AB8C94_1672589519354_image.png?w=456&amp;ssl=1 456w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/01/s_5F326355ADAED13048ECB603E300F82A04D113F56D11D632592576A458AB8C94_1672589519354_image.png?resize=300%2C187&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption class=\"wp-element-caption\"><code>de-DE</code></figcaption></figure>\n</div>\n\n\n\n<div class=\"wp-block-column is-layout-flow wp-block-column-is-layout-flow\">\n<figure class=\"wp-block-image size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"444\" height=\"253\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/01/s_5F326355ADAED13048ECB603E300F82A04D113F56D11D632592576A458AB8C94_1672589309595_image.png?resize=444%2C253&#038;ssl=1\" alt=\"January 2023 calendar grid.\" class=\"wp-image-376960\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/01/s_5F326355ADAED13048ECB603E300F82A04D113F56D11D632592576A458AB8C94_1672589309595_image.png?w=444&amp;ssl=1 444w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/01/s_5F326355ADAED13048ECB603E300F82A04D113F56D11D632592576A458AB8C94_1672589309595_image.png?resize=300%2C171&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption class=\"wp-element-caption\"><code>fa-IR</code></figcaption></figure>\n</div>\n\n\n\n<div class=\"wp-block-column is-layout-flow wp-block-column-is-layout-flow\">\n<figure class=\"wp-block-image size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"451\" height=\"257\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/01/s_5F326355ADAED13048ECB603E300F82A04D113F56D11D632592576A458AB8C94_1672589340340_image.png?resize=451%2C257&#038;ssl=1\" alt=\"January 2023 calendar grid.\" class=\"wp-image-376961\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/01/s_5F326355ADAED13048ECB603E300F82A04D113F56D11D632592576A458AB8C94_1672589340340_image.png?w=451&amp;ssl=1 451w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/01/s_5F326355ADAED13048ECB603E300F82A04D113F56D11D632592576A458AB8C94_1672589340340_image.png?resize=300%2C171&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption class=\"wp-element-caption\"><code>zh-Hans-CN-u-nu-hanidec</code></figcaption></figure>\n</div>\n</div>\n\n\n<h3 class=\"wp-block-heading\" id=\"styling-the-calendar\">Styling the calendar</h3>\n\n\n<p>You might recall how all the days are just one <code>&lt;ol&gt;</code> with list items. To style these into a readable calendar, we dive into the wonderful world of CSS Grid. In fact, we can repurpose the same grid from <a href=\"https://css-tricks.com/snippets/css/css-grid-starter-layouts/\">a starter calendar template right here on CSS-Tricks</a>, but updated a smidge with the <code>:is()</code> relational pseudo to optimize the code.</p>\n\n\n\n<p>Notice that I’m defining configurable CSS variables along the way (and prefixing them with <code>---kalel-</code> to avoid conflicts).</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">kal-el :is(ol, ul) {\n  display: grid;\n  font-size: var(--kalel-fz, small);\n  grid-row-gap: var(--kalel-row-gap, .33em);\n  grid-template-columns: var(--kalel-gtc, repeat(7, 1fr));\n  list-style: none;\n  margin: unset;\n  padding: unset;\n  position: relative;\n}</code></pre>\n\n\n\n<figure class=\"wp-block-image size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"397\" height=\"266\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/01/s_5F326355ADAED13048ECB603E300F82A04D113F56D11D632592576A458AB8C94_1672590153826_image.png?resize=397%2C266&#038;ssl=1\" alt=\"Seven-column calendar grid with grid lines shown.\" class=\"wp-image-376958\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/01/s_5F326355ADAED13048ECB603E300F82A04D113F56D11D632592576A458AB8C94_1672590153826_image.png?w=397&amp;ssl=1 397w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/01/s_5F326355ADAED13048ECB603E300F82A04D113F56D11D632592576A458AB8C94_1672590153826_image.png?resize=300%2C201&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Let’s draw borders around the date numbers to help separate them visually:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">kal-el :is(ol, ul) li {\n  border-color: var(--kalel-li-bdc, hsl(0, 0%, 80%));\n  border-style: var(--kalel-li-bds, solid);\n  border-width: var(--kalel-li-bdw, 0 0 1px 0);\n  grid-column: var(--kalel-li-gc, initial);\n  text-align: var(--kalel-li-tal, end); \n}</code></pre>\n\n\n\n<p>The seven-column grid works fine when the first day of the month is <em>also</em> the first day of the week for the selected locale). But that’s the exception rather than the rule. Most times, we’ll need to shift the first day of the month to a different weekday.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"390\" height=\"266\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/01/s_5F326355ADAED13048ECB603E300F82A04D113F56D11D632592576A458AB8C94_1672590297938_image.png?resize=390%2C266&#038;ssl=1\" alt=\"Showing the first day of the month falling on a Thursday.\" class=\"wp-image-376964\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/01/s_5F326355ADAED13048ECB603E300F82A04D113F56D11D632592576A458AB8C94_1672590297938_image.png?w=390&amp;ssl=1 390w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/01/s_5F326355ADAED13048ECB603E300F82A04D113F56D11D632592576A458AB8C94_1672590297938_image.png?resize=300%2C205&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Remember all the extra <code>data-*</code> attributes we defined when writing our markup? We can hook into those to update which grid column (<code>--kalel-li-gc</code>) the first date number of the month is placed on:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">[data-firstday=\"1\"] [data-day=\"3\"]:first-child {\n  --kalel-li-gc: 1 / 4;\n}</code></pre>\n\n\n\n<p>In this case, we’re spanning from the first grid column to the fourth grid column — which will automatically “push” the next item (Day 2) to the fifth grid column, and so forth.</p>\n\n\n\n<p>Let’s add a little style to the “current” date, so it stands out. These are just my styles. You can totally do what you’d like here.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">[data-today] {\n  --kalel-day-bdrs: 50%;\n  --kalel-day-bg: hsl(0, 86%, 40%);\n  --kalel-day-hover-bgc: hsl(0, 86%, 70%);\n  --kalel-day-c: #fff;\n}</code></pre>\n\n\n\n<p>I like the idea of styling the date numbers for weekends differently than weekdays. I’m going to use a reddish color to style those. Note that we can reach for the <code>:not()</code> pseudo-class to select them while leaving the current date alone:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">[data-weekend]:not([data-today]) { \n  --kalel-day-c: var(--kalel-weekend-c, hsl(0, 86%, 46%));\n}</code></pre>\n\n\n\n<p>Oh, and let’s not forget the week numbers that go before the first date number of each week. We used a <code>data-weeknumber</code> attribute in the markup for that, but the numbers won’t actually display unless we reveal them with CSS, which we can do on the <code>::before</code> pseudo-element:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">[data-weeknumber]::before {\n  display: var(--kalel-weeknumber-d, inline-block);\n  content: attr(data-weeknumber);\n  position: absolute;\n  inset-inline-start: 0;\n  /* additional styles */\n}</code></pre>\n\n\n\n<p>We’re technically done at this point! We can render a calendar grid that shows the dates for the current month, complete with considerations for localizing the data by locale, and ensuring that the calendar uses proper semantics. And all we used was vanilla JavaScript and CSS!</p>\n\n\n\n<p>But let’s take this <em>one more step</em>…</p>\n\n\n<h3 class=\"wp-block-heading\" id=\"rendering-an-entire-year\">Rendering an entire year</h3>\n\n\n<p>Maybe you need to display a full year of dates! So, rather than render the current month, you might want to display all of the month grids for the current year.</p>\n\n\n\n<p>Well, the nice thing about the approach we’re using is that we can call the <code>render</code> method as many times as we want and merely change the integer that identifies the month on each instance. Let’s call it 12 times based on the current year.</p>\n\n\n\n<p>as simple as calling the <code>render</code>-method 12 times, and just change the integer for <code>month</code> — <code>i</code>:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">[...Array(12).keys()].map(i =>\n  render(\n    new Date(date.getFullYear(),\n    i,\n    date.getDate()),\n    config.locale,\n    date.getMonth()\n  )\n).join('')</code></pre>\n\n\n\n<p>It’s probably a good idea to create a new parent wrapper for the rendered year. Each calendar grid is a <code>&lt;kal-el&gt;</code> element. Let’s call the new parent wrapper <code>&lt;jor-el&gt;</code>, where <a href=\"https://superman.fandom.com/wiki/Jor-El\" rel=\"noopener\">Jor-El is the name of Kal-El’s father</a>.</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;jor-el id=\"app\" data-year=\"true\">\n  &lt;kal-el data-firstday=\"7\">\n    &lt;!-- etc. -->\n  &lt;/kal-el>\n\n  &lt;!-- other months -->\n&lt;/jor-el></code></pre>\n\n\n\n<p>We can use <code>&lt;jor-el&gt;</code> to create a grid for our grids. So meta!</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">jor-el {\n  background: var(--jorel-bg, none);\n  display: var(--jorel-d, grid);\n  gap: var(--jorel-gap, 2.5rem);\n  grid-template-columns: var(--jorel-gtc, repeat(auto-fill, minmax(320px, 1fr)));\n  padding: var(--jorel-p, 0);\n}</code></pre>\n\n\n<h3 class=\"wp-block-heading\" id=\"final-demo\">Final demo</h3>\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_vYaKKKJ\" src=\"//codepen.io/anon/embed/vYaKKKJ?height=500&amp;theme-id=1&amp;slug-hash=vYaKKKJ&amp;default-tab=result\" height=\"500\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed vYaKKKJ\" title=\"CodePen Embed vYaKKKJ\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 class=\"wp-block-heading\" id=\"bonus-confetti-calendar\">Bonus: Confetti Calendar</h3>\n\n\n<p>I read an excellent book called <em><a href=\"https://www.goodreads.com/book/show/35863579-making-and-breaking-the-grid\" rel=\"noopener\">Making and Breaking the Grid</a></em> the other day and stumbled on this beautiful “New Year’s poster”:</p>\n\n\n\n<figure class=\"wp-block-image\"><img decoding=\"async\" src=\"https://i0.wp.com/paper-attachments.dropboxusercontent.com/s_5F326355ADAED13048ECB603E300F82A04D113F56D11D632592576A458AB8C94_1673333960043_IMG_1264.jpeg?ssl=1\" alt=\"\" data-recalc-dims=\"1\"/><figcaption class=\"wp-element-caption\">Source: <em><a href=\"https://www.goodreads.com/book/show/35863579-making-and-breaking-the-grid\" rel=\"noopener\">Making and Breaking the Grid (2nd Edition)</a></em> by Timothy Samara</figcaption></figure>\n\n\n\n<p>I figured we could do something similar without changing anything in the HTML or JavaScript. I’ve taken the liberty to include full names for months, and numbers instead of day names, to make it more readable. Enjoy!</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_bGjqqoj\" src=\"//codepen.io/anon/embed/bGjqqoj?height=750&amp;theme-id=1&amp;slug-hash=bGjqqoj&amp;default-tab=result\" height=\"750\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed bGjqqoj\" title=\"CodePen Embed bGjqqoj\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/making-calendars-with-accessibility-and-internationalization-in-mind/\">Making Calendars With Accessibility and Internationalization in Mind</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n",
          "content:encodedSnippet": "Doing a quick search here on CSS-Tricks shows just how many different ways there are to approach calendars. Some show how CSS Grid can create the layout efficiently. Some attempt to bring actual data into the mix. Some rely on a framework to help with state management.\nThere are many considerations when building a calendar component — far more than what is covered in the articles I linked up. If you think about it, calendars are fraught with nuance, from handling timezones and date formats to localization and even making sure dates flow from one month to the next… and that’s before we even get into accessibility and additional layout considerations depending on where the calendar is displayed and whatnot.\nMany developers fear the Date() object and stick with older libraries like moment.js. But while there are many “gotchas” when it comes to dates and formatting, JavaScript has a lot of cool APIs and stuff to help out!\n\n\n\n\n\n\n\n\nI don’t want to re-create the wheel here, but I will show you how we can get a dang good calendar with vanilla JavaScript. We’ll look into accessibility, using semantic markup and screenreader-friendly <time> -tags — as well as internationalization and formatting, using the Intl.Locale, Intl.DateTimeFormat and Intl.NumberFormat-APIs.\nIn other words, we’re making a calendar… only without the extra dependencies you might typically see used in a tutorial like this, and with some of the nuances you might not typically see. And, in the process, I hope you’ll gain a new appreciation for newer things that JavaScript can do while getting an idea of the sorts of things that cross my mind when I’m putting something like this together.\nFirst off, naming\nWhat should we call our calendar component? In my native language, it would be called “kalender element”, so let’s use that and shorten that to “Kal-El” — also known as Superman’s name on the planet Krypton.\nLet’s create a function to get things going:\nfunction kalEl(settings = {}) { ... }\nThis method will render a single month. Later we’ll call this method from [...Array(12).keys()] to render an entire year.\nInitial data and internationalization\nOne of the common things a typical online calendar does is highlight the current date. So let’s create a reference for that:\nconst today = new Date();\nNext, we’ll create a “configuration object” that we’ll merge with the optional settings object of the primary method:\nconst config = Object.assign(\n  {\n    locale: (document.documentElement.getAttribute('lang') || 'en-US'), \n    today: { \n      day: today.getDate(),\n      month: today.getMonth(),\n      year: today.getFullYear() \n    } \n  }, settings\n);\nWe check, if the root element (<html>) contains a lang-attribute with locale info; otherwise, we’ll fallback to using en-US. This is the first step toward internationalizing the calendar.\nWe also need to determine which month to initially display when the calendar is rendered. That’s why we extended the config object with the primary date. This way, if no date is provided in the settings object, we’ll use the today reference instead:\nconst date = config.date ? new Date(config.date) : today;\nWe need a little more info to properly format the calendar based on locale. For example, we might not know whether the first day of the week is Sunday or Monday, depending on the locale. If we have the info, great! But if not, we’ll update it using the Intl.Locale API. The API has a weekInfo object that returns a firstDay property that gives us exactly what we’re looking for without any hassle. We can also get which days of the week are assigned to the weekend:\nif (!config.info) config.info = new Intl.Locale(config.locale).weekInfo || { \n  firstDay: 7,\n  weekend: [6, 7] \n};\nAgain, we create fallbacks. The “first day” of the week for en-US is Sunday, so it defaults to a value of 7. This is a little confusing, as the getDay method in JavaScript returns the days as [0-6], where 0 is Sunday… don’t ask me why. The weekends are Saturday and Sunday, hence [6, 7].\nBefore we had the Intl.Locale API and its weekInfo method, it was pretty hard to create an international calendar without many **objects and arrays with information about each locale or region. Nowadays, it’s easy-peasy. If we pass in en-GB, the method returns:\n// en-GB\n{\n  firstDay: 1,\n  weekend: [6, 7],\n  minimalDays: 4\n}\nIn a country like Brunei (ms-BN), the weekend is Friday and Sunday:\n// ms-BN\n{\n  firstDay: 7,\n  weekend: [5, 7],\n  minimalDays: 1\n}\nYou might wonder what that minimalDays property is. That’s the fewest days required in the first week of a month to be counted as a full week. In some regions, it might be just one day. For others, it might be a full seven days.\nNext, we’ll create a render method within our kalEl-method:\nconst render = (date, locale) => { ... }\nWe still need some more data to work with before we render anything:\nconst month = date.getMonth();\nconst year = date.getFullYear();\nconst numOfDays = new Date(year, month + 1, 0).getDate();\nconst renderToday = (year === config.today.year) && (month === config.today.month);\nThe last one is a Boolean that checks whether today exists in the month we’re about to render.\nSemantic markup\nWe’re going to get deeper in rendering in just a moment. But first, I want to make sure that the details we set up have semantic HTML tags associated with them. Setting that up right out of the box gives us accessibility benefits from the start.\nCalendar wrapper\nFirst, we have the non-semantic wrapper: <kal-el>. That’s fine because there isn’t a semantic <calendar> tag or anything like that. If we weren’t making a custom element, <article> might be the most appropriate element since the calendar could stand on its own page.\nMonth names\nThe <time> element is going to be a big one for us because it helps translate dates into a format that screenreaders and search engines can parse more accurately and consistently. For example, here’s how we can convey “January 2023” in our markup:\n<time datetime=\"2023-01\">January <i>2023</i></time>\nDay names\nThe row above the calendar’s dates containing the names of the days of the week can be tricky. It’s ideal if we can write out the full names for each day — e.g. Sunday, Monday, Tuesday, etc. — but that can take up a lot of space. So, let’s abbreviate the names for now inside of an <ol> where each day is a <li>:\n<ol>\n  <li><abbr title=\"Sunday\">Sun</abbr></li>\n  <li><abbr title=\"Monday\">Mon</abbr></li>\n  <!-- etc. -->\n</ol>\nWe could get tricky with CSS to get the best of both worlds. For example, if we modified the markup a bit like this:\n<ol>\n  <li>\n    <abbr title=\"S\">Sunday</abbr>\n  </li>\n</ol>\n…we get the full names by default. We can then “hide” the full name when space runs out and display the title attribute instead:\n@media all and (max-width: 800px) {\n  li abbr::after {\n    content: attr(title);\n  }\n}\nBut, we’re not going that way because the Intl.DateTimeFormat API can help here as well. We’ll get to that in the next section when we cover rendering.\nDay numbers\nEach date in the calendar grid gets a number. Each number is a list item (<li>) in an ordered list (<ol>), and the inline <time> tag wraps the actual number.\n<li>\n  <time datetime=\"2023-01-01\">1</time>\n</li>\nAnd while I’m not planning to do any styling just yet, I know I will want some way to style the date numbers. That’s possible as-is, but I also want to be able to style weekday numbers differently than weekend numbers if I need to. So, I’m going to include data-* attributes specifically for that: data-weekend and data-today.\nWeek numbers\nThere are 52 weeks in a year, sometimes 53. While it’s not super common, it can be nice to display the number for a given week in the calendar for additional context. I like having it now, even if I don’t wind up not using it. But we’ll totally use it in this tutorial.\nWe’ll use a data-weeknumber attribute as a styling hook and include it in the markup for each date that is the week’s first date.\n<li data-day=\"7\" data-weeknumber=\"1\" data-weekend=\"\">\n  <time datetime=\"2023-01-08\">8</time>\n</li>\nRendering\nLet’s get the calendar on a page! We already know that <kal-el> is the name of our custom element. First thing we need to configure it is to set the firstDay property on it, so the calendar knows whether Sunday or some other day is the first day of the week.\n<kal-el data-firstday=\"${ config.info.firstDay }\">\nWe’ll be using template literals to render the markup. To format the dates for an international audience, we’ll use the Intl.DateTimeFormat API, again using the locale we specified earlier.\nThe month and year\nWhen we call the month, we can set whether we want to use the long name (e.g. February) or the short name (e.g. Feb.). Let’s use the long name since it’s the title above the calendar:\n<time datetime=\"${year}-${(pad(month))}\">\n  ${new Intl.DateTimeFormat(\n    locale,\n    { month:'long'}).format(date)} <i>${year}</i>\n</time>\nWeekday names\nFor weekdays displayed above the grid of dates, we need both the long (e.g. “Sunday”) and short (abbreviated, ie. “Sun”) names. This way, we can use the “short” name when the calendar is short on space:\nIntl.DateTimeFormat([locale], { weekday: 'long' })\nIntl.DateTimeFormat([locale], { weekday: 'short' })\nLet’s make a small helper method that makes it a little easier to call each one:\nconst weekdays = (firstDay, locale) => {\n  const date = new Date(0);\n  const arr = [...Array(7).keys()].map(i => {\n    date.setDate(5 + i)\n    return {\n      long: new Intl.DateTimeFormat([locale], { weekday: 'long'}).format(date),\n      short: new Intl.DateTimeFormat([locale], { weekday: 'short'}).format(date)\n    }\n  })\n  for (let i = 0; i < 8 - firstDay; i++) arr.splice(0, 0, arr.pop());\n  return arr;\n}\nHere’s how we invoke that in the template:\n<ol>\n  ${weekdays(config.info.firstDay,locale).map(name => `\n    <li>\n      <abbr title=\"${name.long}\">${name.short}</abbr>\n    </li>`).join('')\n  }\n</ol>\nDay numbers\nAnd finally, the days, wrapped in an <ol> element:\n${[...Array(numOfDays).keys()].map(i => {\n  const cur = new Date(year, month, i + 1);\n  let day = cur.getDay(); if (day === 0) day = 7;\n  const today = renderToday && (config.today.day === i + 1) ? ' data-today':'';\n  return `\n    <li data-day=\"${day}\"${today}${i === 0 || day === config.info.firstDay ? ` data-weeknumber=\"${new Intl.NumberFormat(locale).format(getWeek(cur))}\"`:''}${config.info.weekend.includes(day) ? ` data-weekend`:''}>\n      <time datetime=\"${year}-${(pad(month))}-${pad(i)}\" tabindex=\"0\">\n        ${new Intl.NumberFormat(locale).format(i + 1)}\n      </time>\n    </li>`\n}).join('')}\nLet’s break that down:\nWe create a “dummy” array, based on the “number of days” variable, which we’ll use to iterate.\nWe create a day variable for the current day in the iteration.\nWe fix the discrepancy between the Intl.Locale API and getDay().\nIf the day is equal to today, we add a data-* attribute.\nFinally, we return the <li> element as a string with merged data.\ntabindex=\"0\" makes the element focusable, when using keyboard navigation, after any positive tabindex values (Note: you should never add positive tabindex-values)\nTo “pad” the numbers in the datetime attribute, we use a little helper method:\nconst pad = (val) => (val + 1).toString().padStart(2, '0');\nWeek number\nAgain, the “week number” is where a week falls in a 52-week calendar. We use a little helper method for that as well:\nfunction getWeek(cur) {\n  const date = new Date(cur.getTime());\n  date.setHours(0, 0, 0, 0);\n  date.setDate(date.getDate() + 3 - (date.getDay() + 6) % 7);\n  const week = new Date(date.getFullYear(), 0, 4);\n  return 1 + Math.round(((date.getTime() - week.getTime()) / 86400000 - 3 + (week.getDay() + 6) % 7) / 7);\n}\nI didn’t write this getWeek-method. It’s a cleaned up version of this script.\nAnd that’s it! Thanks to the Intl.Locale, Intl.DateTimeFormat and Intl.NumberFormat APIs, we can now simply change the lang-attribute of the <html> element to change the context of the calendar based on the current region:\nde-DE\n\n\n\n\n\nfa-IR\n\n\n\n\n\nzh-Hans-CN-u-nu-hanidec\n\n\n\n\nStyling the calendar\nYou might recall how all the days are just one <ol> with list items. To style these into a readable calendar, we dive into the wonderful world of CSS Grid. In fact, we can repurpose the same grid from a starter calendar template right here on CSS-Tricks, but updated a smidge with the :is() relational pseudo to optimize the code.\nNotice that I’m defining configurable CSS variables along the way (and prefixing them with ---kalel- to avoid conflicts).\nkal-el :is(ol, ul) {\n  display: grid;\n  font-size: var(--kalel-fz, small);\n  grid-row-gap: var(--kalel-row-gap, .33em);\n  grid-template-columns: var(--kalel-gtc, repeat(7, 1fr));\n  list-style: none;\n  margin: unset;\n  padding: unset;\n  position: relative;\n}\n\n\n\n\nLet’s draw borders around the date numbers to help separate them visually:\nkal-el :is(ol, ul) li {\n  border-color: var(--kalel-li-bdc, hsl(0, 0%, 80%));\n  border-style: var(--kalel-li-bds, solid);\n  border-width: var(--kalel-li-bdw, 0 0 1px 0);\n  grid-column: var(--kalel-li-gc, initial);\n  text-align: var(--kalel-li-tal, end); \n}\nThe seven-column grid works fine when the first day of the month is also the first day of the week for the selected locale). But that’s the exception rather than the rule. Most times, we’ll need to shift the first day of the month to a different weekday.\n\n\n\n\nRemember all the extra data-* attributes we defined when writing our markup? We can hook into those to update which grid column (--kalel-li-gc) the first date number of the month is placed on:\n[data-firstday=\"1\"] [data-day=\"3\"]:first-child {\n  --kalel-li-gc: 1 / 4;\n}\nIn this case, we’re spanning from the first grid column to the fourth grid column — which will automatically “push” the next item (Day 2) to the fifth grid column, and so forth.\nLet’s add a little style to the “current” date, so it stands out. These are just my styles. You can totally do what you’d like here.\n[data-today] {\n  --kalel-day-bdrs: 50%;\n  --kalel-day-bg: hsl(0, 86%, 40%);\n  --kalel-day-hover-bgc: hsl(0, 86%, 70%);\n  --kalel-day-c: #fff;\n}\nI like the idea of styling the date numbers for weekends differently than weekdays. I’m going to use a reddish color to style those. Note that we can reach for the :not() pseudo-class to select them while leaving the current date alone:\n[data-weekend]:not([data-today]) { \n  --kalel-day-c: var(--kalel-weekend-c, hsl(0, 86%, 46%));\n}\nOh, and let’s not forget the week numbers that go before the first date number of each week. We used a data-weeknumber attribute in the markup for that, but the numbers won’t actually display unless we reveal them with CSS, which we can do on the ::before pseudo-element:\n[data-weeknumber]::before {\n  display: var(--kalel-weeknumber-d, inline-block);\n  content: attr(data-weeknumber);\n  position: absolute;\n  inset-inline-start: 0;\n  /* additional styles */\n}\nWe’re technically done at this point! We can render a calendar grid that shows the dates for the current month, complete with considerations for localizing the data by locale, and ensuring that the calendar uses proper semantics. And all we used was vanilla JavaScript and CSS!\nBut let’s take this one more step…\nRendering an entire year\nMaybe you need to display a full year of dates! So, rather than render the current month, you might want to display all of the month grids for the current year.\nWell, the nice thing about the approach we’re using is that we can call the render method as many times as we want and merely change the integer that identifies the month on each instance. Let’s call it 12 times based on the current year.\nas simple as calling the render-method 12 times, and just change the integer for month — i:\n[...Array(12).keys()].map(i =>\n  render(\n    new Date(date.getFullYear(),\n    i,\n    date.getDate()),\n    config.locale,\n    date.getMonth()\n  )\n).join('')\nIt’s probably a good idea to create a new parent wrapper for the rendered year. Each calendar grid is a <kal-el> element. Let’s call the new parent wrapper <jor-el>, where Jor-El is the name of Kal-El’s father.\n<jor-el id=\"app\" data-year=\"true\">\n  <kal-el data-firstday=\"7\">\n    <!-- etc. -->\n  </kal-el>\n\n  <!-- other months -->\n</jor-el>\nWe can use <jor-el> to create a grid for our grids. So meta!\njor-el {\n  background: var(--jorel-bg, none);\n  display: var(--jorel-d, grid);\n  gap: var(--jorel-gap, 2.5rem);\n  grid-template-columns: var(--jorel-gtc, repeat(auto-fill, minmax(320px, 1fr)));\n  padding: var(--jorel-p, 0);\n}\nFinal demo\nCodePen Embed Fallback\nBonus: Confetti Calendar\nI read an excellent book called Making and Breaking the Grid the other day and stumbled on this beautiful “New Year’s poster”:\nSource: Making and Breaking the Grid (2nd Edition) by Timothy Samara\n\n\n\nI figured we could do something similar without changing anything in the HTML or JavaScript. I’ve taken the liberty to include full names for months, and numbers instead of day names, to make it more readable. Enjoy!\nCodePen Embed Fallback\nMaking Calendars With Accessibility and Internationalization in Mind originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
          "dc:creator": "Mads Stoumann",
          "comments": "https://css-tricks.com/making-calendars-with-accessibility-and-internationalization-in-mind/#comments",
          "content": "<p>Doing a quick search here on CSS-Tricks shows just how many different ways there are to approach calendars. Some show how <a href=\"https://css-tricks.com/a-calendar-in-three-lines-of-css/\">CSS Grid can create the layout efficiently</a>. Some attempt to <a href=\"https://css-tricks.com/how-to-make-a-monthly-calendar-with-real-data/\">bring actual data into the mix</a>. Some &#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/making-calendars-with-accessibility-and-internationalization-in-mind/\">Making Calendars With Accessibility and Internationalization in Mind</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n",
          "contentSnippet": "Doing a quick search here on CSS-Tricks shows just how many different ways there are to approach calendars. Some show how CSS Grid can create the layout efficiently. Some attempt to bring actual data into the mix. Some …\nMaking Calendars With Accessibility and Internationalization in Mind originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
          "guid": "https://css-tricks.com/?p=376950",
          "categories": [
            "Article",
            "custom elements",
            "i18n",
            "locales"
          ],
          "isoDate": "2023-03-13T13:23:52.000Z"
        },
        {
          "creator": "Richard Oliver Bray",
          "title": "5 Mistakes I Made When Starting My First React Project",
          "link": "https://css-tricks.com/5-mistakes-starting-react/",
          "pubDate": "Fri, 10 Mar 2023 16:41:52 +0000",
          "content:encoded": "\n<p>You know what it&#8217;s like to pick up a new language or framework. Sometimes there’s great documentation to help you find your way through it. But even the best documentation doesn’t cover absolutely everything. And when you work with something that&#8217;s new, you&#8217;re bound to find a problem that doesn&#8217;t have a written solution.</p>\n\n\n\n<p>That’s how it was for me the first time I created a React project — and React is one of those frameworks with remarkable documentation, especially now with the beta docs. But I still struggled my way through. It’s been quite a while since that project, but the lessons I gained from it are still fresh in my mind. And even though there are a lot of React “how-to” tutorials in out there, I thought I’d share what I wish I knew when I first used it.</p>\n\n\n\n<p>So, that’s what this article is — a list of the early mistakes I made. I hope they help make learning React a lot smoother for you.</p>\n\n\n\n<span id=\"more-377098\"></span>\n\n\n<h3 class=\"wp-block-heading\" id=\"using-createreactapp-to-start-a-project\">Using create-react-app to start a project</h3>\n\n\n<p class=\"is-style-explanation\">TL;DR Use Vite or Parcel.</p>\n\n\n\n<p><a href=\"https://create-react-app.dev/\" rel=\"noopener\">Create React App</a> (CRA) is a tool that helps you set up a new React project. It creates a development environment with the best configuration options for most React projects. This means you don&#8217;t have to spend time configuring anything yourself.</p>\n\n\n\n<p>As a beginner, this seemed like a great way to start my work! No configuration! Just start coding!</p>\n\n\n\n<p>CRA uses two popular packages to achieve this, webpack and Babel. webpack is a web bundler that optimizes all of the assets in your project, such as JavaScript, CSS, and images. Babel is a tool that allows you to use newer JavaScript features, even if some browsers don&#8217;t support them.</p>\n\n\n\n<p>Both are good, but there are newer tools that can do the job better, specifically <a href=\"https://vitejs.dev\" rel=\"noopener\">Vite</a> and <a href=\"https://swc.rs\" rel=\"noopener\">Speedy Web Compiler</a> (SWC).</p>\n\n\n\n<p>These new and improved alternatives are faster and easier to configure than webpack and Babel. This makes it easier to adjust the configuration which is difficult to do in create-react-app without ejecting.</p>\n\n\n\n<p>To use them both when setting up a new React project you have to make sure you have <a href=\"https://nodejs.org/en/\" rel=\"noopener\">Node</a> version 12 or higher installed, then run the following command.</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">npm create vite</code></pre>\n\n\n\n<p>You’ll be asked to pick a name for your project. Once you do that, select React from the list of frameworks. After that, you can select either <code>Javascript + SWC</code> or <code>Typescript + SWC</code></p>\n\n\n\n<p>Then you’ll have to change directory <code>cd</code> into your project and run the following command;</p>\n\n\n\n<pre rel=\"Terminal\" class=\"wp-block-csstricks-code-block language-none\" data-line=\"\"><code markup=\"tt\">npm i &amp;&amp; npm run dev</code></pre>\n\n\n\n<p>This should run a development server for your site with the URL <code>localhost:5173</code></p>\n\n\n\n<p>And it’s as simple as that.</p>\n\n\n\n    \t\t\n    <div class=\"in-article-cards\">\n      <article class=\"in-article-card article\" id=\"mini-post-377098\">\n\n  <time datetime=\"2022-01-11\" title=\"Originally published Mar 10, 2023\">\n    <strong>\n                \n        Article\n      </strong>\n\n    on\n\n    Jan 11, 2022  </time>\n\n  <h3>\n    <a href=\"https://css-tricks.com/adding-vite-to-your-existing-web-app/\">\n      Adding Vite to Your Existing Web App    </a>\n  </h3>\n\n  \n      <div class=\"tags\">\n      <a href=\"https://css-tricks.com/tag/learning/\" rel=\"tag\">learning</a> <a href=\"https://css-tricks.com/tag/react/\" rel=\"tag\">react</a>    </div>\n  \n  <div class=\"author-row\">\n    <a href=\"https://css-tricks.com/author/adam-rackis/\" aria-label=\"Author page of Adam Rackis\">\n      <img alt='' src='https://secure.gravatar.com/avatar/d4b0907c0d98a2394568d9bf9e8814c3?s=80&#038;d=retro&#038;r=pg' srcset='https://secure.gravatar.com/avatar/d4b0907c0d98a2394568d9bf9e8814c3?s=160&#038;d=retro&#038;r=pg 2x' class='avatar avatar-80 photo' height='80' width='80' loading='lazy' decoding='async'/>    </a>\n  \n    <a class=\"author-name\" href=\"https://css-tricks.com/author/adam-rackis/\">\n      Adam Rackis    </a>\n  </div>\n\n</article>\n<article class=\"in-article-card article\" id=\"mini-post-377098\">\n\n  <time datetime=\"2022-01-18\" title=\"Originally published Mar 10, 2023\">\n    <strong>\n                \n        Article\n      </strong>\n\n    on\n\n    Jan 18, 2022  </time>\n\n  <h3>\n    <a href=\"https://css-tricks.com/vitepwa-plugin-offline-service-worker/\">\n      Making a Site Work Offline Using the VitePWA Plugin    </a>\n  </h3>\n\n  \n      <div class=\"tags\">\n      <a href=\"https://css-tricks.com/tag/learning/\" rel=\"tag\">learning</a> <a href=\"https://css-tricks.com/tag/react/\" rel=\"tag\">react</a>    </div>\n  \n  <div class=\"author-row\">\n    <a href=\"https://css-tricks.com/author/adam-rackis/\" aria-label=\"Author page of Adam Rackis\">\n      <img alt='' src='https://secure.gravatar.com/avatar/d4b0907c0d98a2394568d9bf9e8814c3?s=80&#038;d=retro&#038;r=pg' srcset='https://secure.gravatar.com/avatar/d4b0907c0d98a2394568d9bf9e8814c3?s=160&#038;d=retro&#038;r=pg 2x' class='avatar avatar-80 photo' height='80' width='80' loading='lazy' decoding='async'/>    </a>\n  \n    <a class=\"author-name\" href=\"https://css-tricks.com/author/adam-rackis/\">\n      Adam Rackis    </a>\n  </div>\n\n</article>\n<article class=\"in-article-card article\" id=\"mini-post-377098\">\n\n  <time datetime=\"2022-01-12\" title=\"Originally published Mar 10, 2023\">\n    <strong>\n                \n        Article\n      </strong>\n\n    on\n\n    Jan 12, 2022  </time>\n\n  <h3>\n    <a href=\"https://css-tricks.com/parcel-css/\">\n      Parcel CSS: A New CSS Parser, Transformer, and Minifier    </a>\n  </h3>\n\n  \n      <div class=\"tags\">\n      <a href=\"https://css-tricks.com/tag/learning/\" rel=\"tag\">learning</a> <a href=\"https://css-tricks.com/tag/react/\" rel=\"tag\">react</a>    </div>\n  \n  <div class=\"author-row\">\n    <a href=\"https://css-tricks.com/author/chriscoyier/\" aria-label=\"Author page of Chris Coyier\">\n      <img alt='' src='https://secure.gravatar.com/avatar/8081b26e05bb4354f7d65ffc34cbbd67?s=80&#038;d=retro&#038;r=pg' srcset='https://secure.gravatar.com/avatar/8081b26e05bb4354f7d65ffc34cbbd67?s=160&#038;d=retro&#038;r=pg 2x' class='avatar avatar-80 photo' height='80' width='80' loading='lazy' decoding='async'/>    </a>\n  \n    <a class=\"author-name\" href=\"https://css-tricks.com/author/chriscoyier/\">\n      Chris Coyier    </a>\n  </div>\n\n</article>\n<article class=\"in-article-card article\" id=\"mini-post-377098\">\n\n  <time datetime=\"2019-04-25\" title=\"Originally published Mar 10, 2023\">\n    <strong>\n                \n        Article\n      </strong>\n\n    on\n\n    Apr 25, 2019  </time>\n\n  <h3>\n    <a href=\"https://css-tricks.com/using-parcel-as-a-bundler-for-react-applications/\">\n      Using Parcel as a Bundler for React Applications    </a>\n  </h3>\n\n  \n      <div class=\"tags\">\n      <a href=\"https://css-tricks.com/tag/learning/\" rel=\"tag\">learning</a> <a href=\"https://css-tricks.com/tag/react/\" rel=\"tag\">react</a>    </div>\n  \n  <div class=\"author-row\">\n    <a href=\"https://css-tricks.com/author/kinglseysilas/\" aria-label=\"Author page of Kingsley Silas\">\n      <img alt='' src='https://secure.gravatar.com/avatar/b0d0ce2a0e59387acbf0848f62aa52bf?s=80&#038;d=retro&#038;r=pg' srcset='https://secure.gravatar.com/avatar/b0d0ce2a0e59387acbf0848f62aa52bf?s=160&#038;d=retro&#038;r=pg 2x' class='avatar avatar-80 photo' height='80' width='80' loading='lazy' decoding='async'/>    </a>\n  \n    <a class=\"author-name\" href=\"https://css-tricks.com/author/kinglseysilas/\">\n      Kingsley Silas    </a>\n  </div>\n\n</article>\n    </div>\n  \n\n\n<h3 class=\"wp-block-heading\" id=\"using-defaultprops-for-default-values\">Using <code>defaultProps</code> for default values</h3>\n\n\n<p class=\"is-style-explanation\">TL;DR Use default function parameters instead.</p>\n\n\n\n<p>Data can be passed to React components through something called <code>props</code>. These are added to a component just like attributes in an HTML element and can be used in a component&#8217;s definition by taking the relevant values from the prop object passed in as an argument.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// App.jsx\nexport default function App() {\n  return &lt;Card title=\"Hello\" description=\"world\" />\n}\n\n// Card.jsx\nfunction Card(props) {\n  return (\n    &lt;div>\n      &lt;h1>{props.title}&lt;/h1>\n      &lt;p>{props.description}&lt;/p>\n    &lt;/div>\n  );\n}\n\nexport default Card;</code></pre>\n\n\n\n<p>If a default value is ever required for a <code>prop</code>, the <code>defaultProp</code> property can be used:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// Card.jsx\nfunction Card(props) {\n  // ...\n}\n\nCard.defaultProps = {\n  title: 'Default title',\n  description: 'Desc',\n};\n\nexport default Card;</code></pre>\n\n\n\n<p>With modern JavaScript, it is possible to destructure the <code>props</code> object and assign a default value to it all in the function argument.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// Card.jsx\nfunction Card({title = \"Default title\", description= \"Desc\"}) {\n  return (\n    &lt;div>\n      &lt;h1>{title}&lt;/h1>\n      &lt;p>{description}&lt;/p>\n    &lt;/div>\n  )\n}\n\nexport default Card;</code></pre>\n\n\n\n<p>This is more favorable as the code that can be read by modern browsers without the need for extra transformation.</p>\n\n\n\n<p>Unfortunately, <code>defaultProps</code> do require some transformation to be read by the browser since JSX (JavaScript XML) isn&#8217;t supported out of the box. This could potentially affect the performance of an application that is using a lot of <code>defaultProps</code>.</p>\n\n\n\n    \t\t\n    <div class=\"in-article-cards\">\n      <article class=\"in-article-card article\" id=\"mini-post-377098\">\n\n  <time datetime=\"2019-10-02\" title=\"Originally published Mar 10, 2023\">\n    <strong>\n                \n        Article\n      </strong>\n\n    on\n\n    Oct 23, 2019  </time>\n\n  <h3>\n    <a href=\"https://css-tricks.com/demonstrating-reusable-react-components-in-a-form/\">\n      Demonstrating Reusable React Components in a Form    </a>\n  </h3>\n\n  \n      <div class=\"tags\">\n      <a href=\"https://css-tricks.com/tag/learning/\" rel=\"tag\">learning</a> <a href=\"https://css-tricks.com/tag/react/\" rel=\"tag\">react</a>    </div>\n  \n  <div class=\"author-row\">\n    <a href=\"https://css-tricks.com/author/kinglseysilas/\" aria-label=\"Author page of Kingsley Silas\">\n      <img alt='' src='https://secure.gravatar.com/avatar/b0d0ce2a0e59387acbf0848f62aa52bf?s=80&#038;d=retro&#038;r=pg' srcset='https://secure.gravatar.com/avatar/b0d0ce2a0e59387acbf0848f62aa52bf?s=160&#038;d=retro&#038;r=pg 2x' class='avatar avatar-80 photo' height='80' width='80' loading='lazy' decoding='async'/>    </a>\n  \n    <a class=\"author-name\" href=\"https://css-tricks.com/author/kinglseysilas/\">\n      Kingsley Silas    </a>\n  </div>\n\n</article>\n<article class=\"in-article-card intermediate\" id=\"mini-post-377098\">\n\n  <time datetime=\"2016-02-08\" title=\"Originally published Mar 10, 2023\">\n    <strong>\n                \n        Article\n      </strong>\n\n    on\n\n    Jun 7, 2017  </time>\n\n  <h3>\n    <a href=\"https://css-tricks.com/productive-in-react/\">\n      I Learned How to be Productive in React in a Week and You Can, Too    </a>\n  </h3>\n\n  \n      <div class=\"tags\">\n      <a href=\"https://css-tricks.com/tag/learning/\" rel=\"tag\">learning</a> <a href=\"https://css-tricks.com/tag/react/\" rel=\"tag\">react</a>    </div>\n  \n  <div class=\"author-row\">\n    <a href=\"https://css-tricks.com/author/sdrasner/\" aria-label=\"Author page of Sarah Drasner\">\n      <img alt='' src='https://secure.gravatar.com/avatar/48cfd8342f9b9e5b7970f63afb0a8ee3?s=80&#038;d=retro&#038;r=pg' srcset='https://secure.gravatar.com/avatar/48cfd8342f9b9e5b7970f63afb0a8ee3?s=160&#038;d=retro&#038;r=pg 2x' class='avatar avatar-80 photo' height='80' width='80' loading='lazy' decoding='async'/>    </a>\n  \n    <a class=\"author-name\" href=\"https://css-tricks.com/author/sdrasner/\">\n      Sarah Drasner    </a>\n  </div>\n\n</article>\n<article class=\"in-article-card article\" id=\"mini-post-377098\">\n\n  <time datetime=\"2018-08-31\" title=\"Originally published Mar 10, 2023\">\n    <strong>\n                \n        Article\n      </strong>\n\n    on\n\n    Aug 31, 2018  </time>\n\n  <h3>\n    <a href=\"https://css-tricks.com/props-and-proptypes-in-react/\">\n      Props and PropTypes in React    </a>\n  </h3>\n\n  \n      <div class=\"tags\">\n      <a href=\"https://css-tricks.com/tag/learning/\" rel=\"tag\">learning</a> <a href=\"https://css-tricks.com/tag/react/\" rel=\"tag\">react</a>    </div>\n  \n  <div class=\"author-row\">\n    <a href=\"https://css-tricks.com/author/kinglseysilas/\" aria-label=\"Author page of Kingsley Silas\">\n      <img alt='' src='https://secure.gravatar.com/avatar/b0d0ce2a0e59387acbf0848f62aa52bf?s=80&#038;d=retro&#038;r=pg' srcset='https://secure.gravatar.com/avatar/b0d0ce2a0e59387acbf0848f62aa52bf?s=160&#038;d=retro&#038;r=pg 2x' class='avatar avatar-80 photo' height='80' width='80' loading='lazy' decoding='async'/>    </a>\n  \n    <a class=\"author-name\" href=\"https://css-tricks.com/author/kinglseysilas/\">\n      Kingsley Silas    </a>\n  </div>\n\n</article>\n    </div>\n  \n\n\n<h3 class=\"wp-block-heading\" id=\"dont-use-proptypes\">Don&#8217;t use <code>propTypes</code></h3>\n\n\n<p class=\"is-style-explanation\">TL;DR Use TypeScript.</p>\n\n\n\n<p>In React, the <code>propTypes</code> property can be used to check if a component is being passed the correct data type for its props. They allow you to specify the type of data that should be used for each prop such as a string, number, object, etc. They also allow you to specify if a prop is required or not.</p>\n\n\n\n<p>This way, if a component is passed the wrong data type or if a required prop is not being provided, then React will throw an error.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// Card.jsx\nimport { PropTypes } from \"prop-types\";\n\nfunction Card(props) {\n  // ...\n}\n\nCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n};\n\nexport default Card;</code></pre>\n\n\n\n<p><a href=\"https://github.com/microsoft/TypeScript\" rel=\"noopener\">TypeScript</a> provides a level of type safety in data that’s being passed to components. So, sure, <code>propTypes</code> were a good idea back when I was starting. However, now that TypeScript has become the go-to solution for type safety, I would highly recommend using it over anything else.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// Card.tsx\ninterface CardProps {\n  title: string,\n  description?: string,\n}\n\nexport default function Card(props: CardProps) {\n  // ...\n}</code></pre>\n\n\n\n<p>TypeScript is a programming language that builds on top of JavaScript by adding static type-checking. TypeScript provides a more powerful type system, that can catch more potential bugs and improves the development experience.</p>\n\n\n\n    \t\t\n    <div class=\"in-article-cards\">\n      <article class=\"in-article-card article\" id=\"mini-post-377098\">\n\n  <time datetime=\"2018-08-31\" title=\"Originally published Mar 10, 2023\">\n    <strong>\n                \n        Article\n      </strong>\n\n    on\n\n    Aug 31, 2018  </time>\n\n  <h3>\n    <a href=\"https://css-tricks.com/props-and-proptypes-in-react/\">\n      Props and PropTypes in React    </a>\n  </h3>\n\n  \n      <div class=\"tags\">\n      <a href=\"https://css-tricks.com/tag/learning/\" rel=\"tag\">learning</a> <a href=\"https://css-tricks.com/tag/react/\" rel=\"tag\">react</a>    </div>\n  \n  <div class=\"author-row\">\n    <a href=\"https://css-tricks.com/author/kinglseysilas/\" aria-label=\"Author page of Kingsley Silas\">\n      <img alt='' src='https://secure.gravatar.com/avatar/b0d0ce2a0e59387acbf0848f62aa52bf?s=80&#038;d=retro&#038;r=pg' srcset='https://secure.gravatar.com/avatar/b0d0ce2a0e59387acbf0848f62aa52bf?s=160&#038;d=retro&#038;r=pg 2x' class='avatar avatar-80 photo' height='80' width='80' loading='lazy' decoding='async'/>    </a>\n  \n    <a class=\"author-name\" href=\"https://css-tricks.com/author/kinglseysilas/\">\n      Kingsley Silas    </a>\n  </div>\n\n</article>\n<article class=\"in-article-card article\" id=\"mini-post-377098\">\n\n  <time datetime=\"2018-03-21\" title=\"Originally published Mar 10, 2023\">\n    <strong>\n                \n        Article\n      </strong>\n\n    on\n\n    Mar 27, 2018  </time>\n\n  <h3>\n    <a href=\"https://css-tricks.com/putting-things-in-context-with-react/\">\n      Putting Things in Context With React    </a>\n  </h3>\n\n  \n      <div class=\"tags\">\n      <a href=\"https://css-tricks.com/tag/learning/\" rel=\"tag\">learning</a> <a href=\"https://css-tricks.com/tag/react/\" rel=\"tag\">react</a>    </div>\n  \n  <div class=\"author-row\">\n    <a href=\"https://css-tricks.com/author/nealfennimore/\" aria-label=\"Author page of Neal Fennimore\">\n      <img alt='' src='https://secure.gravatar.com/avatar/fc8aa639f5c8b5362773475c3734a4db?s=80&#038;d=retro&#038;r=pg' srcset='https://secure.gravatar.com/avatar/fc8aa639f5c8b5362773475c3734a4db?s=160&#038;d=retro&#038;r=pg 2x' class='avatar avatar-80 photo' height='80' width='80' loading='lazy' decoding='async'/>    </a>\n  \n    <a class=\"author-name\" href=\"https://css-tricks.com/author/nealfennimore/\">\n      Neal Fennimore    </a>\n  </div>\n\n</article>\n<article class=\"in-article-card article\" id=\"mini-post-377098\">\n\n  <time datetime=\"2018-11-16\" title=\"Originally published Mar 10, 2023\">\n    <strong>\n                \n        Article\n      </strong>\n\n    on\n\n    Nov 16, 2018  </time>\n\n  <h3>\n    <a href=\"https://css-tricks.com/an-overview-of-render-props-in-react/\">\n      An Overview of Render Props in React    </a>\n  </h3>\n\n  \n      <div class=\"tags\">\n      <a href=\"https://css-tricks.com/tag/learning/\" rel=\"tag\">learning</a> <a href=\"https://css-tricks.com/tag/react/\" rel=\"tag\">react</a>    </div>\n  \n  <div class=\"author-row\">\n    <a href=\"https://css-tricks.com/author/kinglseysilas/\" aria-label=\"Author page of Kingsley Silas\">\n      <img alt='' src='https://secure.gravatar.com/avatar/b0d0ce2a0e59387acbf0848f62aa52bf?s=80&#038;d=retro&#038;r=pg' srcset='https://secure.gravatar.com/avatar/b0d0ce2a0e59387acbf0848f62aa52bf?s=160&#038;d=retro&#038;r=pg 2x' class='avatar avatar-80 photo' height='80' width='80' loading='lazy' decoding='async'/>    </a>\n  \n    <a class=\"author-name\" href=\"https://css-tricks.com/author/kinglseysilas/\">\n      Kingsley Silas    </a>\n  </div>\n\n</article>\n    </div>\n  \n\n\n<h3 class=\"wp-block-heading\" id=\"using-class-components\">Using class components</h3>\n\n\n<p class=\"is-style-explanation\">TL;DR: Write components as functions</p>\n\n\n\n<p>Class components in React are created using JavaScript classes. They have a more object-oriented structure and as well as a few additional features, like the ability to use the <code>this</code> keyword and lifecycle methods.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// Card.jsx\nclass Card extends React.Component {\n  render() {\n    return (\n      &lt;div>\n        &lt;h1>{this.props.title}&lt;/h1>\n        &lt;p>{this.props.description}&lt;/p>\n      &lt;/div>\n    )\n  }\n}\n\nexport default Card;</code></pre>\n\n\n\n<p>I prefer writing components with classes over functions, but JavaScript classes are more difficult for beginners to understand and <code>this</code> can get very confusing. Instead, I’d recommend writing components as functions:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">// Card.jsx\nfunction Card(props) {\n  return (\n    &lt;div>\n      &lt;h1>{props.title}&lt;/h1>\n      &lt;p>{props.description}&lt;/p>\n    &lt;/div>\n  )\n}\n\nexport default Card;</code></pre>\n\n\n\n<p>Function components are simply JavaScript functions that return JSX. They are much easier to read, and do not have additional features like the <code>this</code> keyword and <a href=\"https://css-tricks.com/the-circle-of-a-react-lifecycle/\">lifecycle methods</a> which make them more performant than class components.</p>\n\n\n\n<p>Function components also have the advantage of using hooks. <a href=\"https://css-tricks.com/intro-to-react-hooks/\">React Hooks</a> allow you to use state and other React features without writing a class component, making your code more readable, maintainable and reusable.</p>\n\n\n\n    \t\t\n    <div class=\"in-article-cards\">\n      <article class=\"in-article-card article\" id=\"mini-post-377098\">\n\n  <time datetime=\"2019-06-26\" title=\"Originally published Mar 10, 2023\">\n    <strong>\n                \n        Article\n      </strong>\n\n    on\n\n    Jul 6, 2019  </time>\n\n  <h3>\n    <a href=\"https://css-tricks.com/getting-to-know-the-usereducer-react-hook/\">\n      Getting to Know the useReducer React Hook    </a>\n  </h3>\n\n  \n      <div class=\"tags\">\n      <a href=\"https://css-tricks.com/tag/learning/\" rel=\"tag\">learning</a> <a href=\"https://css-tricks.com/tag/react/\" rel=\"tag\">react</a>    </div>\n  \n  <div class=\"author-row\">\n    <a href=\"https://css-tricks.com/author/kinglseysilas/\" aria-label=\"Author page of Kingsley Silas\">\n      <img alt='' src='https://secure.gravatar.com/avatar/b0d0ce2a0e59387acbf0848f62aa52bf?s=80&#038;d=retro&#038;r=pg' srcset='https://secure.gravatar.com/avatar/b0d0ce2a0e59387acbf0848f62aa52bf?s=160&#038;d=retro&#038;r=pg 2x' class='avatar avatar-80 photo' height='80' width='80' loading='lazy' decoding='async'/>    </a>\n  \n    <a class=\"author-name\" href=\"https://css-tricks.com/author/kinglseysilas/\">\n      Kingsley Silas    </a>\n  </div>\n\n</article>\n<article class=\"in-article-card article\" id=\"mini-post-377098\">\n\n  <time datetime=\"2019-01-18\" title=\"Originally published Mar 10, 2023\">\n    <strong>\n                \n        Article\n      </strong>\n\n    on\n\n    May 1, 2020  </time>\n\n  <h3>\n    <a href=\"https://css-tricks.com/intro-to-react-hooks/\">\n      Intro to React Hooks    </a>\n  </h3>\n\n  \n      <div class=\"tags\">\n      <a href=\"https://css-tricks.com/tag/learning/\" rel=\"tag\">learning</a> <a href=\"https://css-tricks.com/tag/react/\" rel=\"tag\">react</a>    </div>\n  \n  <div class=\"author-row\">\n    <a href=\"https://css-tricks.com/author/kinglseysilas/\" aria-label=\"Author page of Kingsley Silas\">\n      <img alt='' src='https://secure.gravatar.com/avatar/b0d0ce2a0e59387acbf0848f62aa52bf?s=80&#038;d=retro&#038;r=pg' srcset='https://secure.gravatar.com/avatar/b0d0ce2a0e59387acbf0848f62aa52bf?s=160&#038;d=retro&#038;r=pg 2x' class='avatar avatar-80 photo' height='80' width='80' loading='lazy' decoding='async'/>    </a>\n  \n    <a class=\"author-name\" href=\"https://css-tricks.com/author/kinglseysilas/\">\n      Kingsley Silas    </a>\n  </div>\n\n</article>\n<article class=\"in-article-card article\" id=\"mini-post-377098\">\n\n  <time datetime=\"2022-07-13\" title=\"Originally published Mar 10, 2023\">\n    <strong>\n                \n        Article\n      </strong>\n\n    on\n\n    Jul 15, 2022  </time>\n\n  <h3>\n    <a href=\"https://css-tricks.com/react-hooks-the-deep-cuts/\">\n      React Hooks: The Deep Cuts    </a>\n  </h3>\n\n  \n      <div class=\"tags\">\n      <a href=\"https://css-tricks.com/tag/learning/\" rel=\"tag\">learning</a> <a href=\"https://css-tricks.com/tag/react/\" rel=\"tag\">react</a>    </div>\n  \n  <div class=\"author-row\">\n    <a href=\"https://css-tricks.com/author/blessingeneanyebe/\" aria-label=\"Author page of Blessing Ene Anyebe\">\n      <img decoding=\"async\" loading=\"lazy\" alt=\"\" class=\"avatar avatar-80 photo avatar-default\" height=\"80\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/07/blessing.webp?resize=80%2C80&#038;ssl=1\" width=\"80\"  data-recalc-dims=\"1\">    </a>\n  \n    <a class=\"author-name\" href=\"https://css-tricks.com/author/blessingeneanyebe/\">\n      Blessing Ene Anyebe    </a>\n  </div>\n\n</article>\n    </div>\n  \n\n\n<h3 class=\"wp-block-heading\" id=\"importing-react-unnecessarily\">Importing React unnecessarily</h3>\n\n\n<p class=\"is-style-explanation\">TL;DR: There’s no need to do it, unless you need hooks.</p>\n\n\n\n<p>Since React 17 was released in 2020, it’s now unnecessary to import React at the top of your file whenever you create a component.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import React from 'react'; // Not needed!\nexport default function Card() {}</code></pre>\n\n\n\n<p>But we had to do that before React 17 because the JSX transformer (the thing that converts JSX into regular JavaScript) used a method called <a href=\"https://reactjs.org/docs/react-api.html#createelement\" rel=\"noopener\"><code>React.createElement</code></a> that would only work when importing React. Since then, a new transformer has been release which can transform JSX without the <code>createElement</code> method.</p>\n\n\n\n<p>You will still need to import React to use hooks, <a href=\"https://css-tricks.com/render-children-in-react-using-fragment-or-array-components/\">fragments</a>, and any other functions or components you might need from the library:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">import { useState } from 'react';\n\nexport default function Card() {\n  const [count, setCount] = useState(0);\n  // ...\n}</code></pre>\n\n\n<h3 class=\"wp-block-heading\" id=\"those-were-my-early-mistakes\">Those were my early mistakes!</h3>\n\n\n<p>Maybe “mistake” is too harsh a word since some of the better practices came about later. Still, I see plenty of instances where the “old” way of doing something is still being actively used in projects and other tutorials.</p>\n\n\n\n<p>To be honest, I probably made way more than five mistakes when getting started. Anytime you reach for a new tool it is going to be more like a learning journey to use it effectively, rather than flipping a switch. But these are the things I still carry with me years later!</p>\n\n\n\n<p>If you’ve been using React for a while, what are some of the things you wish you knew before you started? It would be great to get a collection going to help others avoid the same struggles.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/5-mistakes-starting-react/\">5 Mistakes I Made When Starting My First React Project</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n",
          "content:encodedSnippet": "You know what it’s like to pick up a new language or framework. Sometimes there’s great documentation to help you find your way through it. But even the best documentation doesn’t cover absolutely everything. And when you work with something that’s new, you’re bound to find a problem that doesn’t have a written solution.\nThat’s how it was for me the first time I created a React project — and React is one of those frameworks with remarkable documentation, especially now with the beta docs. But I still struggled my way through. It’s been quite a while since that project, but the lessons I gained from it are still fresh in my mind. And even though there are a lot of React “how-to” tutorials in out there, I thought I’d share what I wish I knew when I first used it.\nSo, that’s what this article is — a list of the early mistakes I made. I hope they help make learning React a lot smoother for you.\n\n\n\nUsing create-react-app to start a project\nTL;DR Use Vite or Parcel.\nCreate React App (CRA) is a tool that helps you set up a new React project. It creates a development environment with the best configuration options for most React projects. This means you don’t have to spend time configuring anything yourself.\nAs a beginner, this seemed like a great way to start my work! No configuration! Just start coding!\nCRA uses two popular packages to achieve this, webpack and Babel. webpack is a web bundler that optimizes all of the assets in your project, such as JavaScript, CSS, and images. Babel is a tool that allows you to use newer JavaScript features, even if some browsers don’t support them.\nBoth are good, but there are newer tools that can do the job better, specifically Vite and Speedy Web Compiler (SWC).\nThese new and improved alternatives are faster and easier to configure than webpack and Babel. This makes it easier to adjust the configuration which is difficult to do in create-react-app without ejecting.\nTo use them both when setting up a new React project you have to make sure you have Node version 12 or higher installed, then run the following command.\nnpm create vite\nYou’ll be asked to pick a name for your project. Once you do that, select React from the list of frameworks. After that, you can select either Javascript + SWC or Typescript + SWC\nThen you’ll have to change directory cd into your project and run the following command;\nnpm i && npm run dev\nThis should run a development server for your site with the URL localhost:5173\nAnd it’s as simple as that.\nlearning react    \n    \n  \n    \n      Adam Rackis    \n  \nlearning react    \n    \n  \n    \n      Adam Rackis    \n  \nlearning react    \n    \n  \n    \n      Chris Coyier    \n  \nlearning react    \n    \n  \n    \n      Kingsley Silas    \n  \nUsing defaultProps for default values\nTL;DR Use default function parameters instead.\nData can be passed to React components through something called props. These are added to a component just like attributes in an HTML element and can be used in a component’s definition by taking the relevant values from the prop object passed in as an argument.\n// App.jsx\nexport default function App() {\n  return <Card title=\"Hello\" description=\"world\" />\n}\n\n// Card.jsx\nfunction Card(props) {\n  return (\n    <div>\n      <h1>{props.title}</h1>\n      <p>{props.description}</p>\n    </div>\n  );\n}\n\nexport default Card;\nIf a default value is ever required for a prop, the defaultProp property can be used:\n// Card.jsx\nfunction Card(props) {\n  // ...\n}\n\nCard.defaultProps = {\n  title: 'Default title',\n  description: 'Desc',\n};\n\nexport default Card;\nWith modern JavaScript, it is possible to destructure the props object and assign a default value to it all in the function argument.\n// Card.jsx\nfunction Card({title = \"Default title\", description= \"Desc\"}) {\n  return (\n    <div>\n      <h1>{title}</h1>\n      <p>{description}</p>\n    </div>\n  )\n}\n\nexport default Card;\nThis is more favorable as the code that can be read by modern browsers without the need for extra transformation.\nUnfortunately, defaultProps do require some transformation to be read by the browser since JSX (JavaScript XML) isn’t supported out of the box. This could potentially affect the performance of an application that is using a lot of defaultProps.\nlearning react    \n    \n  \n    \n      Kingsley Silas    \n  \nlearning react    \n    \n  \n    \n      Sarah Drasner    \n  \nlearning react    \n    \n  \n    \n      Kingsley Silas    \n  \nDon’t use propTypes\nTL;DR Use TypeScript.\nIn React, the propTypes property can be used to check if a component is being passed the correct data type for its props. They allow you to specify the type of data that should be used for each prop such as a string, number, object, etc. They also allow you to specify if a prop is required or not.\nThis way, if a component is passed the wrong data type or if a required prop is not being provided, then React will throw an error.\n// Card.jsx\nimport { PropTypes } from \"prop-types\";\n\nfunction Card(props) {\n  // ...\n}\n\nCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n};\n\nexport default Card;\nTypeScript provides a level of type safety in data that’s being passed to components. So, sure, propTypes were a good idea back when I was starting. However, now that TypeScript has become the go-to solution for type safety, I would highly recommend using it over anything else.\n// Card.tsx\ninterface CardProps {\n  title: string,\n  description?: string,\n}\n\nexport default function Card(props: CardProps) {\n  // ...\n}\nTypeScript is a programming language that builds on top of JavaScript by adding static type-checking. TypeScript provides a more powerful type system, that can catch more potential bugs and improves the development experience.\nlearning react    \n    \n  \n    \n      Kingsley Silas    \n  \nlearning react    \n    \n  \n    \n      Neal Fennimore    \n  \nlearning react    \n    \n  \n    \n      Kingsley Silas    \n  \nUsing class components\nTL;DR: Write components as functions\nClass components in React are created using JavaScript classes. They have a more object-oriented structure and as well as a few additional features, like the ability to use the this keyword and lifecycle methods.\n// Card.jsx\nclass Card extends React.Component {\n  render() {\n    return (\n      <div>\n        <h1>{this.props.title}</h1>\n        <p>{this.props.description}</p>\n      </div>\n    )\n  }\n}\n\nexport default Card;\nI prefer writing components with classes over functions, but JavaScript classes are more difficult for beginners to understand and this can get very confusing. Instead, I’d recommend writing components as functions:\n// Card.jsx\nfunction Card(props) {\n  return (\n    <div>\n      <h1>{props.title}</h1>\n      <p>{props.description}</p>\n    </div>\n  )\n}\n\nexport default Card;\nFunction components are simply JavaScript functions that return JSX. They are much easier to read, and do not have additional features like the this keyword and lifecycle methods which make them more performant than class components.\nFunction components also have the advantage of using hooks. React Hooks allow you to use state and other React features without writing a class component, making your code more readable, maintainable and reusable.\nlearning react    \n    \n  \n    \n      Kingsley Silas    \n  \nlearning react    \n    \n  \n    \n      Kingsley Silas    \n  \nlearning react    \n    \n  \n    \n      Blessing Ene Anyebe    \n  \nImporting React unnecessarily\nTL;DR: There’s no need to do it, unless you need hooks.\nSince React 17 was released in 2020, it’s now unnecessary to import React at the top of your file whenever you create a component.\nimport React from 'react'; // Not needed!\nexport default function Card() {}\nBut we had to do that before React 17 because the JSX transformer (the thing that converts JSX into regular JavaScript) used a method called React.createElement that would only work when importing React. Since then, a new transformer has been release which can transform JSX without the createElement method.\nYou will still need to import React to use hooks, fragments, and any other functions or components you might need from the library:\nimport { useState } from 'react';\n\nexport default function Card() {\n  const [count, setCount] = useState(0);\n  // ...\n}\nThose were my early mistakes!\nMaybe “mistake” is too harsh a word since some of the better practices came about later. Still, I see plenty of instances where the “old” way of doing something is still being actively used in projects and other tutorials.\nTo be honest, I probably made way more than five mistakes when getting started. Anytime you reach for a new tool it is going to be more like a learning journey to use it effectively, rather than flipping a switch. But these are the things I still carry with me years later!\nIf you’ve been using React for a while, what are some of the things you wish you knew before you started? It would be great to get a collection going to help others avoid the same struggles.\n5 Mistakes I Made When Starting My First React Project originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
          "dc:creator": "Richard Oliver Bray",
          "comments": "https://css-tricks.com/5-mistakes-starting-react/#respond",
          "content": "<p>You know what it&#8217;s like to pick up a new language or framework. Sometimes there’s great documentation to help you find your way through it. But even the best documentation doesn’t cover absolutely everything. And when you work with something &#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/5-mistakes-starting-react/\">5 Mistakes I Made When Starting My First React Project</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n",
          "contentSnippet": "You know what it’s like to pick up a new language or framework. Sometimes there’s great documentation to help you find your way through it. But even the best documentation doesn’t cover absolutely everything. And when you work with something …\n5 Mistakes I Made When Starting My First React Project originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
          "guid": "https://css-tricks.com/?p=377098",
          "categories": [
            "Article",
            "learning",
            "react"
          ],
          "isoDate": "2023-03-10T16:41:52.000Z"
        },
        {
          "creator": "Mads Stoumann",
          "title": "Creating a Clock with the New CSS sin() and cos() Trigonometry Functions",
          "link": "https://css-tricks.com/creating-a-clock-with-the-new-css-sin-and-cos-trigonometry-functions/",
          "pubDate": "Wed, 08 Mar 2023 14:05:52 +0000",
          "content:encoded": "\n<p>CSS trigonometry functions are here! Well, they are if you’re using the latest versions of Firefox and Safari, that is. Having this sort of mathematical power in CSS opens up a whole bunch of possibilities. In this tutorial, I thought we’d dip our toes in the water to get a feel for a couple of the newer functions: <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/sin\" rel=\"noopener\"><code>sin()</code></a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cos\" rel=\"noopener\"><code>cos()</code></a>.</p>\n\n\n\n<p>There are other trigonometry functions in the pipeline — including <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/tan\" rel=\"noopener\"><code>tan()</code></a> — so why focus just on <code>sin()</code> and <code>cos()</code>? They happen to be perfect for the idea I have in mind, which is to place text along the edge of a circle. That’s been covered here on CSS-Tricks when <a href=\"https://css-tricks.com/set-text-on-a-circle/\">Chris shared an approach that uses a Sass mixin</a>. That was six years ago, so let’s give it the bleeding edge treatment.</p>\n\n\n\n<span id=\"more-377074\"></span>\n\n\n\n<p>Here’s what I have in mind. Again, it’s only supported in Firefox and Safari at the moment:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_wvxOQKo\" src=\"//codepen.io/anon/embed/wvxOQKo?height=650&amp;theme-id=1&amp;slug-hash=wvxOQKo&amp;default-tab=result\" height=\"650\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed wvxOQKo\" title=\"CodePen Embed wvxOQKo\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>So, it’s not exactly like words forming a circular shape, but we are placing text characters along the circle to form a clock face. Here’s some markup we can use to kick things off:</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;div class=\"clock\">\n  &lt;div class=\"clock-face\">\n    &lt;time datetime=\"12:00\">12&lt;/time>\n    &lt;time datetime=\"1:00\">1&lt;/time>\n    &lt;time datetime=\"2:00\">2&lt;/time>\n    &lt;time datetime=\"3:00\">3&lt;/time>\n    &lt;time datetime=\"4:00\">4&lt;/time>\n    &lt;time datetime=\"5:00\">5&lt;/time>\n    &lt;time datetime=\"6:00\">6&lt;/time>\n    &lt;time datetime=\"7:00\">7&lt;/time>\n    &lt;time datetime=\"8:00\">8&lt;/time>\n    &lt;time datetime=\"9:00\">9&lt;/time>\n    &lt;time datetime=\"10:00\">10&lt;/time>\n    &lt;time datetime=\"11:00\">11&lt;/time>\n  &lt;/div>\n&lt;/div></code></pre>\n\n\n\n<p>Next,&nbsp;here are&nbsp;some&nbsp;super&nbsp;basic styles for the&nbsp;<code>.clock-face</code>&nbsp;container. I decided to use&nbsp;the&nbsp;<code>&lt;time&gt;</code> tag with a&nbsp;<code>datetime</code> attribute.&nbsp;</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.clock {\n  --_ow: clamp(5rem, 60vw, 40rem);\n  --_w: 88cqi;\n  aspect-ratio: 1;\n  background-color: tomato;\n  border-radius: 50%;\n  container-type: inline;\n  display: grid;\n  height: var(--_ow);\n  place-content: center;\n  position: relative;\n  width var(--_ow);\n}</code></pre>\n\n\n\n<p>I decorated things a bit in there, but only to get the basic shape and background color to help us see what we’re doing. Notice how we save the <code>width</code> value in a <a href=\"https://css-tricks.com/a-complete-guide-to-custom-properties/\">CSS variable</a>. We’ll use that later. Not much to look at so far:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"315\" height=\"373\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/1_art_experiment.png?resize=315%2C373&#038;ssl=1\" alt=\"Large tomato colored circle with a vertical list of numbers 1-12 on the left.\" class=\"wp-image-377159\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/1_art_experiment.png?w=315&amp;ssl=1 315w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/1_art_experiment.png?resize=253%2C300&amp;ssl=1 253w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>It looks like some sort of modern art experiment, right? Let’s introduce a new variable, <code>--_r</code>, to store the circle’s <strong>radius</strong>, which is equal to half of the circle’s width. This way, if the width (<code>--_w</code>) changes, the radius value (<code>--_r</code>) will also update — thanks to another CSS math function, <code>calc()</code>:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.clock {\n  --_w: 300px;\n  --_r: calc(var(--_w) / 2);\n  /* rest of styles */\n}</code></pre>\n\n\n\n<p>Now, a bit of math. A circle is 360 degrees. We have 12 labels on our clock, so want to place the numbers every 30 degrees (<code>360 / 12</code>). In math-land, a circle begins at 3 o’clock, so noon is actually <strong>minus 90 degrees</strong> from that, which is 270 degrees (<code>360 - 90</code>).</p>\n\n\n\n<p>Let’s add another variable, <code>--_d</code>, that we can use to set a <strong>degree</strong> value for each number on the clock face. We’re going to increment the values by 30 degrees to complete our circle:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.clock time:nth-child(1) { --_d: 270deg; }\n.clock time:nth-child(2) { --_d: 300deg; }\n.clock time:nth-child(3) { --_d: 330deg; }\n.clock time:nth-child(4) { --_d: 0deg; }\n.clock time:nth-child(5) { --_d: 30deg; }\n.clock time:nth-child(6) { --_d: 60deg; }\n.clock time:nth-child(7) { --_d: 90deg; }\n.clock time:nth-child(8) { --_d: 120deg; }\n.clock time:nth-child(9) { --_d: 150deg; }\n.clock time:nth-child(10) { --_d: 180deg; }\n.clock time:nth-child(11) { --_d: 210deg; }\n.clock time:nth-child(12) { --_d: 240deg; }</code></pre>\n\n\n\n<p>OK, now’s the time to get our hands dirty with the <code>sin()</code> and <code>cos()</code> functions! What we want to do is use them to get the X and Y coordinates for each number so we can place them properly around the clock face.</p>\n\n\n\n<p>The formula for the X coordinate is <code>radius + (radius * cos(degree))</code>. Let’s plug that into our new <code>--_x</code> variable:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">--_x: calc(var(--_r) + (var(--_r) * cos(var(--_d))));</code></pre>\n\n\n\n<p>The formula for the Y coordinate is <code>radius + (radius * sin(degree))</code>. We have what we need to calculate that:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">--_y: calc(var(--_r) + (var(--_r) * sin(var(--_d))));</code></pre>\n\n\n\n<p>There are a few housekeeping things we need to do to set up the numbers, so let’s put some basic styling on them to make sure they are absolutely positioned and placed with our coordinates:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.clock-face time {\n  --_x: calc(var(--_r) + (var(--_r) * cos(var(--_d))));\n  --_y: calc(var(--_r) + (var(--_r) * sin(var(--_d))));\n  --_sz: 12cqi;\n  display: grid;\n  height: var(--_sz);\n  left: var(--_x);\n  place-content: center;\n  position: absolute;\n  top: var(--_y);\n  width: var(--_sz);\n}</code></pre>\n\n\n\n<p>Notice <code>--_sz</code>, which we’ll use for the <code>width</code> and <code>height</code> of the numbers in a moment. Let’s see what we have so far.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"348\" height=\"364\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/2_off_pos.png?resize=348%2C364&#038;ssl=1\" alt=\"Large tomato colored circle with off-centered hour number labels along its edge.\" class=\"wp-image-377161\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/2_off_pos.png?w=348&amp;ssl=1 348w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/2_off_pos.png?resize=287%2C300&amp;ssl=1 287w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>This definitely looks more like a clock! See how the top-left corner of each number is positioned at the correct place around the circle? We need to “shrink” the radius when calculating the positions for each number. We can <em>deduct</em> the size of a number (<code>--_sz</code>) from the size of the circle (<code>--_w</code>), before we calculate the radius:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">--_r: calc((var(--_w) - var(--_sz)) / 2);</code></pre>\n\n\n\n<figure class=\"wp-block-image size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"314\" height=\"314\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/3_correct_pos.png?resize=314%2C314&#038;ssl=1\" alt=\"Large tomato colored circle with hour number labels along its rounded edge.\" class=\"wp-image-377164\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/3_correct_pos.png?w=314&amp;ssl=1 314w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/3_correct_pos.png?resize=300%2C300&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/3_correct_pos.png?resize=150%2C150&amp;ssl=1 150w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Much better! Let’s change the colors, so it looks more elegant:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"717\" height=\"689\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/nY6Vbx2b.png?resize=717%2C689&#038;ssl=1\" alt=\"A white clock face with numbers against a dark gray background. The clock has no arms.\" class=\"wp-image-377119\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/nY6Vbx2b.png?w=717&amp;ssl=1 717w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/nY6Vbx2b.png?resize=300%2C288&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>We could stop right here! We accomplished the goal of placing text around a circle, right? But what’s a clock without arms to show hours, minutes, and seconds?</p>\n\n\n\n<p>Let’s use a single CSS animation for that. First, let’s add three more elements to our markup,</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;div class=\"clock\">\n  &lt;!-- after &lt;time>-tags -->\n  &lt;span class=\"arm seconds\">&lt;/span>\n  &lt;span class=\"arm minutes\">&lt;/span>\n  &lt;span class=\"arm hours\">&lt;/span>\n  &lt;span class=\"arm center\">&lt;/span>\n&lt;/div></code></pre>\n\n\n\n<p>Then some common markup for all three arms. Again, most of this is just make sure the arms are absolutely positioned and placed accordingly:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.arm {\n  background-color: var(--_abg);\n  border-radius: calc(var(--_aw) * 2);\n  display: block;\n  height: var(--_ah);\n  left: calc((var(--_w) - var(--_aw)) / 2);\n  position: absolute;\n  top: calc((var(--_w) / 2) - var(--_ah));\n  transform: rotate(0deg);\n  transform-origin: bottom;\n  width: var(--_aw);\n}</code></pre>\n\n\n\n<p>We’ll use the <strong>same animation</strong> for all three arms:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@keyframes turn {\n  to {\n    transform: rotate(1turn);\n  }\n}</code></pre>\n\n\n\n<p>The only difference is the time the individual arms take to make a full turn. For the <strong>hours arm</strong>, it takes <strong>12 hours</strong> to make a full turn. The <a href=\"https://css-tricks.com/almanac/properties/a/animation/\"><code>animation-duration</code></a> property only accepts values in milliseconds and seconds. Let’s stick with seconds, which is 43,200 seconds (<code>60 seconds * 60 minutes * 12 hours</code>).</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">animation: turn 43200s infinite;</code></pre>\n\n\n\n<p>It takes <strong>1 hour</strong> for the <strong>minutes arm</strong> to make a full turn. But we want this to be a <a href=\"https://css-tricks.com/using-multi-step-animations-transitions/\">multi-step animation</a> so the movement between the arms is staggered rather than linear. We’ll need 60 steps, one for each minute:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">animation: turn 3600s steps(60, end) infinite;</code></pre>\n\n\n\n<p>The <strong>seconds arm</strong> is <em>almost the same</em> as the minutes arm, but the duration is 60 seconds instead of 60 minutes:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">animation: turn 60s steps(60, end) infinite;</code></pre>\n\n\n\n<p>Let’s update the properties we created in the common styles:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.seconds {\n  --_abg: hsl(0, 5%, 40%);\n  --_ah: 145px;\n  --_aw: 2px;\n  animation: turn 60s steps(60, end) infinite;\n}\n.minutes {\n  --_abg: #333;\n  --_ah: 145px;\n  --_aw: 6px;\n  animation: turn 3600s steps(60, end) infinite;\n}\n.hours {\n  --_abg: #333;\n  --_ah: 110px;\n  --_aw: 6px;\n  animation: turn 43200s linear infinite;\n}</code></pre>\n\n\n\n<p>What if we want to start at the current time? We need a little bit of JavaScript:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const time = new Date();\nconst hour = -3600 * (time.getHours() % 12);\nconst mins = -60 * time.getMinutes();\napp.style.setProperty('--_dm', `${mins}s`);\napp.style.setProperty('--_dh', `${(hour+mins)}s`);</code></pre>\n\n\n\n<p>I’ve added&nbsp;<code>id=\"app\"</code>&nbsp;to the clockface and set two new custom properties on it that set a negative&nbsp;<code>animation-delay</code>, as Mate Marschalko did <a href=\"https://css-tricks.com/of-course-we-can-make-a-css-only-clock-that-tells-the-current-time/\">when he shared a CSS-only clock</a>. The&nbsp;<code>getHours()</code> method of JavaScipt&#8217;s&nbsp;<code>Date</code> object is using the 24-hour format, so we use the&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Remainder\" target=\"_blank\" rel=\"noreferrer noopener\"><code>remainder</code> operator</a>&nbsp;to convert it into 12-hour format.</p>\n\n\n\n<p>In the CSS, we need to add the&nbsp;<code>animation-delay</code>&nbsp;as well:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.minutes {\n  animation-delay: var(--_dm, 0s);\n  /* other styles */\n}\n\n.hours {\n  animation-delay: var(--_dh, 0s);\n  /* other styles */\n}</code></pre>\n\n\n\n<p><strong>Just one more thing.</strong> Using CSS&nbsp;<code>@supports</code>&nbsp;and the properties we’ve already created, we can provide a fallback to browsers that do not supprt&nbsp;<code>sin()</code>&nbsp;and&nbsp;<code>cos()</code>. (Thank you, Temani Afif!):</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@supports not (left: calc(1px * cos(45deg))) {\n  time {\n    left: 50% !important;\n    top: 50% !important;\n    transform: translate(-50%,-50%) rotate(var(--_d)) translate(var(--_r)) rotate(calc(-1*var(--_d)))\n  }\n}</code></pre>\n\n\n\n<p>And, voilà! Our clock is done! Here’s the final demo one more time. Again, it’s only supported in Firefox and Safari at the moment.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_wvxOQKo\" src=\"//codepen.io/anon/embed/preview/wvxOQKo?height=650&amp;theme-id=1&amp;slug-hash=wvxOQKo&amp;default-tab=result\" height=\"650\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed wvxOQKo\" title=\"CodePen Embed wvxOQKo\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 class=\"wp-block-heading\" id=\"what-else-can-we-do\">What else can we do?</h3>\n\n\n<p>Just messing around here, but we can quickly turn our clock into a circular image gallery by replacing the&nbsp;<code>&lt;time&gt;</code>&nbsp;tags with&nbsp;<code>&lt;img&gt;</code> then updating the width (<code>--_w</code>) and radius (<code>--_r</code>) values:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_abjQeZy\" src=\"//codepen.io/anon/embed/abjQeZy?height=700&amp;theme-id=1&amp;slug-hash=abjQeZy&amp;default-tab=result\" height=\"700\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed abjQeZy\" title=\"CodePen Embed abjQeZy\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Let’s try one more. I mentioned earlier how the clock looked kind of like a modern art experiment. We can lean into that and re-create a pattern I saw on a poster (that I unfortunately didn’t buy) in an art gallery the other day. As I recall, it was called “Moon” and consisted of a bunch of dots forming a circle.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"897\" height=\"874\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_2756772B6AAC4896CD9BFF036E07360F7C8D595A4B775A1B72DBF756AC4018A4_1675325303440_image.png?resize=897%2C874&#038;ssl=1\" alt=\"A large circle formed out of a bunch of smaller filled circles of various earthtone colors.\" class=\"wp-image-377080\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_2756772B6AAC4896CD9BFF036E07360F7C8D595A4B775A1B72DBF756AC4018A4_1675325303440_image.png?w=897&amp;ssl=1 897w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_2756772B6AAC4896CD9BFF036E07360F7C8D595A4B775A1B72DBF756AC4018A4_1675325303440_image.png?resize=300%2C292&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2023/02/s_2756772B6AAC4896CD9BFF036E07360F7C8D595A4B775A1B72DBF756AC4018A4_1675325303440_image.png?resize=768%2C748&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>We’ll use an unordered list this time since the circles don’t follow a particular order. We’re not even going to put all the list items in the markup. Instead, let’s inject them with JavaScript and add a few controls we can use to manipulate the final result.</p>\n\n\n\n<p>The controls are range inputs (<code>&lt;input type=\"range\"&gt;)</code> which we’ll wrap in a <code>&lt;form&gt;</code> and listen for the <code>input</code> event.</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;form id=\"controls\">\n  &lt;fieldset>\n    &lt;label>Number of rings\n      &lt;input type=\"range\" min=\"2\" max=\"12\" value=\"10\" id=\"rings\" />\n    &lt;/label>\n    &lt;label>Dots per ring\n      &lt;input type=\"range\" min=\"5\" max=\"12\" value=\"7\" id=\"dots\" />\n    &lt;/label>\n    &lt;label>Spread\n      &lt;input type=\"range\" min=\"10\" max=\"40\" value=\"40\" id=\"spread\" />\n    &lt;/label>\n  &lt;/fieldset>\n&lt;/form></code></pre>\n\n\n\n<p>We’ll run this method on “input”, which will create a bunch of <code>&lt;li&gt;</code> elements with the degree (<code>--_d</code>) variable we used earlier applied to each one. We can also repurpose our radius variable (<code>--_r</code>) .</p>\n\n\n\n<p>I also want the dots to be different colors. So, let’s randomize (well, not <em>completely</em> randomized) the HSL color value for each list item and store it as a new CSS variable, <code>--_bgc</code>:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const update = () => {\n  let s = \"\";\n  for (let i = 1; i &lt;= rings.valueAsNumber; i++) {\n    const r = spread.valueAsNumber * i;\n    const theta = coords(dots.valueAsNumber * i);\n    for (let j = 0; j &lt; theta.length; j++) {\n      s += `&lt;li style=\"--_d:${theta[j]};--_r:${r}px;--_bgc:hsl(${random(\n        50,\n        25\n      )},${random(90, 50)}%,${random(90, 60)}%)\">&lt;/li>`;\n    }\n  }\n  app.innerHTML = s;\n}</code></pre>\n\n\n\n<p>The <code>random()</code> method picks a value within a defined range of numbers:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const random = (max, min = 0, f = true) => f ? Math.floor(Math.random() * (max - min) + min) : Math.random() * max;</code></pre>\n\n\n\n<p>And that’s it. We use JavaScript to render the markup, but as soon as it’s rendered, we don’t really need it. The <code>sin()</code> and <code>cos()</code> functions help us position all the dots in the right spots.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_oNMJvjO\" src=\"//codepen.io/anon/embed/oNMJvjO?height=850&amp;theme-id=1&amp;slug-hash=oNMJvjO&amp;default-tab=result\" height=\"850\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed oNMJvjO\" title=\"CodePen Embed oNMJvjO\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n<h3 class=\"wp-block-heading\" id=\"final-thoughts\">Final thoughts</h3>\n\n\n<p>Placing things around a circle is a pretty basic example to demonstrate the powers of trigonometry functions like <code>sin()</code> and <code>cos()</code>. But it’s <em>really</em> cool that we are getting modern CSS features that provide new solutions for old workarounds I’m sure we’ll see way more interesting, complex, and creative use cases, especially as browser support comes to Chrome and Edge.</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/creating-a-clock-with-the-new-css-sin-and-cos-trigonometry-functions/\">Creating a Clock with the New CSS sin() and cos() Trigonometry Functions</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n",
          "content:encodedSnippet": "CSS trigonometry functions are here! Well, they are if you’re using the latest versions of Firefox and Safari, that is. Having this sort of mathematical power in CSS opens up a whole bunch of possibilities. In this tutorial, I thought we’d dip our toes in the water to get a feel for a couple of the newer functions: sin() and cos().\nThere are other trigonometry functions in the pipeline — including tan() — so why focus just on sin() and cos()? They happen to be perfect for the idea I have in mind, which is to place text along the edge of a circle. That’s been covered here on CSS-Tricks when Chris shared an approach that uses a Sass mixin. That was six years ago, so let’s give it the bleeding edge treatment.\n\n\n\n\nHere’s what I have in mind. Again, it’s only supported in Firefox and Safari at the moment:\nCodePen Embed Fallback\nSo, it’s not exactly like words forming a circular shape, but we are placing text characters along the circle to form a clock face. Here’s some markup we can use to kick things off:\n<div class=\"clock\">\n  <div class=\"clock-face\">\n    <time datetime=\"12:00\">12</time>\n    <time datetime=\"1:00\">1</time>\n    <time datetime=\"2:00\">2</time>\n    <time datetime=\"3:00\">3</time>\n    <time datetime=\"4:00\">4</time>\n    <time datetime=\"5:00\">5</time>\n    <time datetime=\"6:00\">6</time>\n    <time datetime=\"7:00\">7</time>\n    <time datetime=\"8:00\">8</time>\n    <time datetime=\"9:00\">9</time>\n    <time datetime=\"10:00\">10</time>\n    <time datetime=\"11:00\">11</time>\n  </div>\n</div>\nNext, here are some super basic styles for the .clock-face container. I decided to use the <time> tag with a datetime attribute. \n.clock {\n  --_ow: clamp(5rem, 60vw, 40rem);\n  --_w: 88cqi;\n  aspect-ratio: 1;\n  background-color: tomato;\n  border-radius: 50%;\n  container-type: inline;\n  display: grid;\n  height: var(--_ow);\n  place-content: center;\n  position: relative;\n  width var(--_ow);\n}\nI decorated things a bit in there, but only to get the basic shape and background color to help us see what we’re doing. Notice how we save the width value in a CSS variable. We’ll use that later. Not much to look at so far:\n\n\n\n\nIt looks like some sort of modern art experiment, right? Let’s introduce a new variable, --_r, to store the circle’s radius, which is equal to half of the circle’s width. This way, if the width (--_w) changes, the radius value (--_r) will also update — thanks to another CSS math function, calc():\n.clock {\n  --_w: 300px;\n  --_r: calc(var(--_w) / 2);\n  /* rest of styles */\n}\nNow, a bit of math. A circle is 360 degrees. We have 12 labels on our clock, so want to place the numbers every 30 degrees (360 / 12). In math-land, a circle begins at 3 o’clock, so noon is actually minus 90 degrees from that, which is 270 degrees (360 - 90).\nLet’s add another variable, --_d, that we can use to set a degree value for each number on the clock face. We’re going to increment the values by 30 degrees to complete our circle:\n.clock time:nth-child(1) { --_d: 270deg; }\n.clock time:nth-child(2) { --_d: 300deg; }\n.clock time:nth-child(3) { --_d: 330deg; }\n.clock time:nth-child(4) { --_d: 0deg; }\n.clock time:nth-child(5) { --_d: 30deg; }\n.clock time:nth-child(6) { --_d: 60deg; }\n.clock time:nth-child(7) { --_d: 90deg; }\n.clock time:nth-child(8) { --_d: 120deg; }\n.clock time:nth-child(9) { --_d: 150deg; }\n.clock time:nth-child(10) { --_d: 180deg; }\n.clock time:nth-child(11) { --_d: 210deg; }\n.clock time:nth-child(12) { --_d: 240deg; }\nOK, now’s the time to get our hands dirty with the sin() and cos() functions! What we want to do is use them to get the X and Y coordinates for each number so we can place them properly around the clock face.\nThe formula for the X coordinate is radius + (radius * cos(degree)). Let’s plug that into our new --_x variable:\n--_x: calc(var(--_r) + (var(--_r) * cos(var(--_d))));\nThe formula for the Y coordinate is radius + (radius * sin(degree)). We have what we need to calculate that:\n--_y: calc(var(--_r) + (var(--_r) * sin(var(--_d))));\nThere are a few housekeeping things we need to do to set up the numbers, so let’s put some basic styling on them to make sure they are absolutely positioned and placed with our coordinates:\n.clock-face time {\n  --_x: calc(var(--_r) + (var(--_r) * cos(var(--_d))));\n  --_y: calc(var(--_r) + (var(--_r) * sin(var(--_d))));\n  --_sz: 12cqi;\n  display: grid;\n  height: var(--_sz);\n  left: var(--_x);\n  place-content: center;\n  position: absolute;\n  top: var(--_y);\n  width: var(--_sz);\n}\nNotice --_sz, which we’ll use for the width and height of the numbers in a moment. Let’s see what we have so far.\n\n\n\n\nThis definitely looks more like a clock! See how the top-left corner of each number is positioned at the correct place around the circle? We need to “shrink” the radius when calculating the positions for each number. We can deduct the size of a number (--_sz) from the size of the circle (--_w), before we calculate the radius:\n--_r: calc((var(--_w) - var(--_sz)) / 2);\n\n\n\n\nMuch better! Let’s change the colors, so it looks more elegant:\n\n\n\n\nWe could stop right here! We accomplished the goal of placing text around a circle, right? But what’s a clock without arms to show hours, minutes, and seconds?\nLet’s use a single CSS animation for that. First, let’s add three more elements to our markup,\n<div class=\"clock\">\n  <!-- after <time>-tags -->\n  <span class=\"arm seconds\"></span>\n  <span class=\"arm minutes\"></span>\n  <span class=\"arm hours\"></span>\n  <span class=\"arm center\"></span>\n</div>\nThen some common markup for all three arms. Again, most of this is just make sure the arms are absolutely positioned and placed accordingly:\n.arm {\n  background-color: var(--_abg);\n  border-radius: calc(var(--_aw) * 2);\n  display: block;\n  height: var(--_ah);\n  left: calc((var(--_w) - var(--_aw)) / 2);\n  position: absolute;\n  top: calc((var(--_w) / 2) - var(--_ah));\n  transform: rotate(0deg);\n  transform-origin: bottom;\n  width: var(--_aw);\n}\nWe’ll use the same animation for all three arms:\n@keyframes turn {\n  to {\n    transform: rotate(1turn);\n  }\n}\nThe only difference is the time the individual arms take to make a full turn. For the hours arm, it takes 12 hours to make a full turn. The animation-duration property only accepts values in milliseconds and seconds. Let’s stick with seconds, which is 43,200 seconds (60 seconds * 60 minutes * 12 hours).\nanimation: turn 43200s infinite;\nIt takes 1 hour for the minutes arm to make a full turn. But we want this to be a multi-step animation so the movement between the arms is staggered rather than linear. We’ll need 60 steps, one for each minute:\nanimation: turn 3600s steps(60, end) infinite;\nThe seconds arm is almost the same as the minutes arm, but the duration is 60 seconds instead of 60 minutes:\nanimation: turn 60s steps(60, end) infinite;\nLet’s update the properties we created in the common styles:\n.seconds {\n  --_abg: hsl(0, 5%, 40%);\n  --_ah: 145px;\n  --_aw: 2px;\n  animation: turn 60s steps(60, end) infinite;\n}\n.minutes {\n  --_abg: #333;\n  --_ah: 145px;\n  --_aw: 6px;\n  animation: turn 3600s steps(60, end) infinite;\n}\n.hours {\n  --_abg: #333;\n  --_ah: 110px;\n  --_aw: 6px;\n  animation: turn 43200s linear infinite;\n}\nWhat if we want to start at the current time? We need a little bit of JavaScript:\nconst time = new Date();\nconst hour = -3600 * (time.getHours() % 12);\nconst mins = -60 * time.getMinutes();\napp.style.setProperty('--_dm', `${mins}s`);\napp.style.setProperty('--_dh', `${(hour+mins)}s`);\nI’ve added id=\"app\" to the clockface and set two new custom properties on it that set a negative animation-delay, as Mate Marschalko did when he shared a CSS-only clock. The getHours() method of JavaScipt’s Date object is using the 24-hour format, so we use the remainder operator to convert it into 12-hour format.\nIn the CSS, we need to add the animation-delay as well:\n.minutes {\n  animation-delay: var(--_dm, 0s);\n  /* other styles */\n}\n\n.hours {\n  animation-delay: var(--_dh, 0s);\n  /* other styles */\n}\nJust one more thing. Using CSS @supports and the properties we’ve already created, we can provide a fallback to browsers that do not supprt sin() and cos(). (Thank you, Temani Afif!):\n@supports not (left: calc(1px * cos(45deg))) {\n  time {\n    left: 50% !important;\n    top: 50% !important;\n    transform: translate(-50%,-50%) rotate(var(--_d)) translate(var(--_r)) rotate(calc(-1*var(--_d)))\n  }\n}\nAnd, voilà! Our clock is done! Here’s the final demo one more time. Again, it’s only supported in Firefox and Safari at the moment.\nCodePen Embed Fallback\nWhat else can we do?\nJust messing around here, but we can quickly turn our clock into a circular image gallery by replacing the <time> tags with <img> then updating the width (--_w) and radius (--_r) values:\nCodePen Embed Fallback\nLet’s try one more. I mentioned earlier how the clock looked kind of like a modern art experiment. We can lean into that and re-create a pattern I saw on a poster (that I unfortunately didn’t buy) in an art gallery the other day. As I recall, it was called “Moon” and consisted of a bunch of dots forming a circle.\n\n\n\n\nWe’ll use an unordered list this time since the circles don’t follow a particular order. We’re not even going to put all the list items in the markup. Instead, let’s inject them with JavaScript and add a few controls we can use to manipulate the final result.\nThe controls are range inputs (<input type=\"range\">) which we’ll wrap in a <form> and listen for the input event.\n<form id=\"controls\">\n  <fieldset>\n    <label>Number of rings\n      <input type=\"range\" min=\"2\" max=\"12\" value=\"10\" id=\"rings\" />\n    </label>\n    <label>Dots per ring\n      <input type=\"range\" min=\"5\" max=\"12\" value=\"7\" id=\"dots\" />\n    </label>\n    <label>Spread\n      <input type=\"range\" min=\"10\" max=\"40\" value=\"40\" id=\"spread\" />\n    </label>\n  </fieldset>\n</form>\nWe’ll run this method on “input”, which will create a bunch of <li> elements with the degree (--_d) variable we used earlier applied to each one. We can also repurpose our radius variable (--_r) .\nI also want the dots to be different colors. So, let’s randomize (well, not completely randomized) the HSL color value for each list item and store it as a new CSS variable, --_bgc:\nconst update = () => {\n  let s = \"\";\n  for (let i = 1; i <= rings.valueAsNumber; i++) {\n    const r = spread.valueAsNumber * i;\n    const theta = coords(dots.valueAsNumber * i);\n    for (let j = 0; j < theta.length; j++) {\n      s += `<li style=\"--_d:${theta[j]};--_r:${r}px;--_bgc:hsl(${random(\n        50,\n        25\n      )},${random(90, 50)}%,${random(90, 60)}%)\"></li>`;\n    }\n  }\n  app.innerHTML = s;\n}\nThe random() method picks a value within a defined range of numbers:\nconst random = (max, min = 0, f = true) => f ? Math.floor(Math.random() * (max - min) + min) : Math.random() * max;\nAnd that’s it. We use JavaScript to render the markup, but as soon as it’s rendered, we don’t really need it. The sin() and cos() functions help us position all the dots in the right spots.\nCodePen Embed Fallback\nFinal thoughts\nPlacing things around a circle is a pretty basic example to demonstrate the powers of trigonometry functions like sin() and cos(). But it’s really cool that we are getting modern CSS features that provide new solutions for old workarounds I’m sure we’ll see way more interesting, complex, and creative use cases, especially as browser support comes to Chrome and Edge.\nCreating a Clock with the New CSS sin() and cos() Trigonometry Functions originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
          "dc:creator": "Mads Stoumann",
          "comments": "https://css-tricks.com/creating-a-clock-with-the-new-css-sin-and-cos-trigonometry-functions/#comments",
          "content": "<p>CSS trigonometry functions are here! Well, they are if you’re using the latest versions of Firefox and Safari, that is. Having this sort of mathematical power in CSS opens up a whole bunch of possibilities. In this tutorial, I thought &#8230;</p>\n<hr />\n<p><small><a rel=\"nofollow\" href=\"https://css-tricks.com/creating-a-clock-with-the-new-css-sin-and-cos-trigonometry-functions/\">Creating a Clock with the New CSS sin() and cos() Trigonometry Functions</a> originally published on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>, which is part of the <a href=\"https://try.digitalocean.com/css-tricks/?utm_medium=rss&amp;utm_source=css-tricks.com&amp;utm_campaign=family_&amp;utm_content=\">DigitalOcean</a> family. You should <a href=\"https://css-tricks.com/newsletters/\">get the newsletter</a>.</p>\n",
          "contentSnippet": "CSS trigonometry functions are here! Well, they are if you’re using the latest versions of Firefox and Safari, that is. Having this sort of mathematical power in CSS opens up a whole bunch of possibilities. In this tutorial, I thought …\nCreating a Clock with the New CSS sin() and cos() Trigonometry Functions originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
          "guid": "https://css-tricks.com/?p=377074",
          "categories": [
            "Article",
            "cos()",
            "math",
            "sin()"
          ],
          "isoDate": "2023-03-08T14:05:52.000Z"
        }
      ]
    },
    "date": "2023-12-08T11:41:27.720Z"
  },
  {
    "id": 2,
    "name": "Smashing Magazine",
    "title": "Smashing Magazine",
    "description": "Smashing Magazine",
    "homepage": "https://www.smashingmagazine.com",
    "feed_url": "https://www.smashingmagazine.com/feed/",
    "category": "Technology",
    "subcategory": "Web Development",
    "topic": "Programming",
    "group": "",
    "subject": "Software Engineering",
    "tags": [
      "HTML",
      "CSS",
      "JavaScript"
    ],
    "feed": {
      "items": [
        {
          "creator": "hello@smashingmagazine.com (Geoff Graham)",
          "title": "Preparing For Interaction To Next Paint, A New Web Core Vital",
          "link": "https://smashingmagazine.com/2023/12/preparing-interaction-next-paint-web-core-vital/",
          "pubDate": "Thu, 07 Dec 2023 21:00:00 GMT",
          "author": "hello@smashingmagazine.com (Geoff Graham)",
          "content:encoded": "<p>This article is a sponsored by <a href=\"https://www.debugbear.com/?utm_campaign=sm-3\">DebugBear</a></p>\n<p>There’s a change coming to the Core Web Vitals lineup. If you’re reading this before March 2024 and fire up your favorite performance monitoring tool, you’re going to to get a Core Web Vitals report like this one pulled from PageSpeed Insights:</p>\n<p><img src=\"https://files.smashing.media/articles/preparing-interaction-next-paint-web-core-vital/1-core-web-vitals-assessment.png\" /></p>\n<p>You’re likely used to seeing most of these metrics. But there’s a good reason for the little blue icon sitting next to the second metric in the second row, <strong>Interaction to Next Paint (INP)</strong>. It’s the newest metric of the bunch and is set to formally be a ranking factor in Google search results <a href=\"https://web.dev/blog/inp-cwv\">beginning in March 2024</a>.</p>\n<p>And there’s a good reason that INP sits immediately below the First Input Delay (FID) in that chart. INP will officially replace FID when it becomes an official Core Web Vital metric.</p>\n<p>The fact that INP is already available in performance reports means we have an opportunity to familiarize ourselves with it today, in advance of its release. That’s what this article is all about. Rather than pushing off INP until after it starts influencing the way we measure site performance, let’s take a few minutes to level up our understanding of what it is and why it’s designed to replace FID. This way, you’ll not only have the information you need to read your performance reports come March 2024 but can proactively prepare your website for the change.</p>\n“I’m Not Seeing Those Metrics In My Reports”\n<p>Chances are that you’re looking at Lighthouse or some other report <a href=\"https://www.smashingmagazine.com/2023/10/answering-questions-interpreting-page-speed-reports/#does-lighthouse-use-rum-data-too\">based on lab data.</a> And by that, I mean data that isn’t coming from the field in the form of “real” users. You configure the test by applying some form of simulated throttling and start watching the results pour in. In other words, the data is not looking at your <em>actual</em> web traffic but a <em>simulated</em> environment that gives you an approximate view of traffic when certain conditions are in place.</p>\n<p>I say all that because it’s important to remember that <strong>not all performance data is equal</strong>, and some metrics are simply impossible to measure with certain types of data. INP and FID happen to be a couple of metrics where lab data is unsuitable for meaningful results, and that’s because both <strong>INP and FID are measurements of user interactions</strong>. That may not have been immediately obvious by the name “First Input Delay,” but it’s clear as day when we start talking about “<em>Interaction</em> to Next Paint” — it’s right there in the name!</p>\n<p>Simulated lab data, like what is used in Lighthouse reports, does not interact with the page. That means there is no way for it to evaluate the first input a user makes or any other interactions on the page.</p>\n<p>So, that’s why you’re not seeing INP or FID in your reports. If you want these metrics, then you will want to use a performance tool that is capable of using real user data, such as DebugBear, which can <a href=\"https://www.debugbear.com/real-user-monitoring?utm_campaign=sm-3\">monitor your actual traffic on an ongoing basis in real time</a>, or PageSpeed Insights which bases its finding on Google’s “<a href=\"https://developer.chrome.com/docs/crux/\">Chrome User Experience Report</a>” (commonly referred to as CrUX), though DebugBear is capable of providing CrUX reporting as well. The difference between real-time user monitoring and measuring performance against CrUX data is big enough that it’s worth reading up on it, and <a href=\"https://www.smashingmagazine.com/2023/10/answering-questions-interpreting-page-speed-reports/\">we have a full article on Smashing Magazine</a> that goes deeply into the differences for you.</p>\nINP Improves How Page Interactions Are Measured\n<p>OK, so we now know that both INP and FID are about page interactions. <strong>Specifically, they are about measuring the time between a user interacting with the page and the page responding to that interaction.</strong></p>\n<p>What’s the difference between the two metrics, then? The answer is two-fold. First, FID is a measure of the time it takes the page to start processing an interaction or the <strong>input delay</strong>. That sounds fine on the surface — we want to know how much time it takes for a user to start an interaction and optimize it if we can. The problem with it, though, is that it takes just one part of the time for the page to <em>fully</em> respond to an interaction.</p>\n<p>A more complete picture considers the input delay in addition to two other components: <strong>processing time</strong> and <strong>presentation delay</strong>. In other words, we should also look at the time it takes to process the interaction and the time it takes for the page to render the UI in response. As you may have already guessed, INP considers all three delays, whereas FID considers only the input delay.</p>\n<p><img src=\"https://files.smashing.media/articles/preparing-interaction-next-paint-web-core-vital/2-timeline-inp-components.jpg\" /></p>\n<p>The second difference between INP and FID is <em>which</em> interactions are evaluated. FID is not shy about which interaction it measures: the very first one, as in the input delay of the <em>first</em> interaction on the page. <strong>We can think of INP as a more complete and accurate representation of how fast your page responds to user interactions because it looks at</strong> <strong><em>every single one</em></strong> <strong>on the page.</strong> It’s probably rare for a page to have only one interaction, and whatever interactions there are after the first interaction are likely located well down the page and happen after the page has fully loaded.</p>\n<p>So, where FID looks at the first interaction — and only the input delay of that interaction — INP considers the entire lifecycle of all interactions.</p>\nMeasuring Interaction To Next Paint\n<p>Both FID and INP are measured in milliseconds. Don’t get too worried if you notice your INP time is greater than your FID. That’s bound to happen when <em>all</em> of the interactions on the page are evaluated instead of the first interaction alone.</p>\n<p>Google’s guidance is to <a href=\"https://web.dev/articles/fid#what_is_a_good_fid_score\">maintain an FID under 100ms</a>. And remember, FID does not take into account the time it takes for the event to process, nor does it consider the time it takes the page to update following the event. It only looks at the delay of the event process.</p>\n<p>And since INP does indeed take all three of those factors into account — the input delay, processing time, and presentation delay — Google’s guidance for measuring INP is inherently larger than FID: <strong>under 200ms for a “good” result, and between 200-500ms for a passing result.</strong> Any interaction that adds up to a delay greater than 500ms is a clear bottleneck.</p>\n<p><img src=\"https://files.smashing.media/articles/preparing-interaction-next-paint-web-core-vital/3-200ms-500ms-range-passing-inp-scores.jpg\" /></p>\n<p>The goal is to spot slow interactions and optimize them for a smoother user experience. How exactly do you identify those problems? That’s what we’re looking at next.</p>\nIdentifying Slow Interactions\n<p>There’s already plenty you can do right now to optimize your site for INP before it becomes an official Core Web Vital in March 2024. Let’s walk through the process.</p>\n<p>Of course, we’re talking about the user doing <em>something</em> on the page, i.e., an action such as a click or keyboard focus. That might be expanding a panel in an accordion component or perhaps triggering a modal or a prompt any change in a state where the UI updates in response.</p>\n<p>Your page may consist of little more than content and images, making for very few, if any, interactions. It could just as well be some sort of game-based UI with thousands of interactions. INP can be a heckuva lot of work, but it really comes down to how many interactions we’re talking about.</p>\n<p>We’ve already talked about the difference between <strong>field data</strong> and <strong>lab data</strong> and how lab data is simply unable to measure page interactions accurately. That means you will want to rely on field data when pulling INP reports to identify bottlenecks. And when we’re talking about field data, we’re talking about two different flavors:</p>\n<ol>\n<li><strong>Data from the CrUX report</strong> that is based on the results of real Chrome users. This is readily available in PageSpeed Insights and Google Search Console, not to mention DebugBear. If you use either of Google’s tools, just note that their throttling methods collect metrics on a fast connection and then estimate how fast the page would be on a slower connection. DebugBear actually tests with a slower network, resulting in more accurate data.</li>\n<li><strong>Monitoring your website’s real-time traffic</strong>, which will require adding a snippet to your source code that sends traffic data to a service. And, yes, DebugBear is one such service, though there are others. You can even take advantage of <a href=\"https://developer.chrome.com/docs/crux/bigquery/\">historical CrUX data integrated with BigQuery</a> to get a historical view of your results dating back as far as 2017 with new data coming in monthly, which isn’t exactly “real-time” monitoring of your actual traffic, but certainly useful.</li>\n</ol>\n<p>You will get the most bang for your buck with real-time monitoring that keeps a historical record of data you can use to evaluate INP results over time.</p>\n<p>That said, you can still start identifying bottlenecks today if you prefer not to dive into real-time monitoring right this second. <a href=\"https://www.debugbear.com/inp-debugger?utm_campaign=sm-3\">DebugBear has a tool that</a> analyzes any URL your throw at it. What’s great about this is that it <em>shows</em> you the elements that receive user interaction and provides the results right next to them. <strong>The result of the element that takes the longest is your INP result.</strong> That’s true whether you have one component above the 500ms threshold or 100 of them on the page.</p>\n<p>The fact that DebugBear’s tool highlights all of the interactions and organizes them by INP makes identifying bottlenecks a straightforward process.</p>\n<p><img src=\"https://files.smashing.media/articles/preparing-interaction-next-paint-web-core-vital/4-debugbear-inp-report.png\" /></p>\n<p>See that? There’s a clear INP offender on Smashing Magazine’s homepage, and it comes in slightly outside the healthy INP range for a score of 510ms even though the next “slowest” result is 184ms. There’s a little work we need to do between now and March to remedy that.</p>\n<p>Notice, too, that there are actually two scores in the report: the INP Debugger Result and the Real User Google Data. The results aren’t even close! If we were to go by the Google CrUX data, we’re looking at a result that is 201ms <em>faster</em> than the INP Debugger’s result — a big enough difference that would result in the Smashing Magazine homepage fully passing INP.</p>\n<p>Ultimately, what matters is how real users experience your website, and you need to look at the CrUX data to see that. The elements identified by the INP Debugger may cause slow interactions, but if users only interact with them very rarely, that might not be a priority to fix. But for a perfect user experience, you would want both results to be in the green.</p>\nOptimizing Slow Interactions\n<p>This is the ultimate objective, right? Once we have identified slow interactions — whether through a quick test with CrUX data or a real-time monitoring solution — we need to optimize them so their delays are at least under 500ms, but ideally under 200ms.</p>\n<p>Optimizing INP comes down to CPU activity at the end of the day. But as we now know, INP measures two additional components of interactions that FID does not for a total of three components: <strong>input delay</strong>, <strong>processing time</strong>, and <strong>presentation delay</strong>. Each one is an opportunity to optimize the interaction, so let’s break them down.</p>\n<h3>Reduce The Input Delay</h3>\n<p>This is what FID is solely concerned with, and it’s the time it takes between the user’s input, such as a click, and for the interaction to start.</p>\n<p><img src=\"https://files.smashing.media/articles/preparing-interaction-next-paint-web-core-vital/5-diagram-fid-relation-total-blocking-time-ui-update.jpg\" /></p>\n<p>This is where the <strong>Total Blocking Time (TBT)</strong> metric is a good one because it looks at CPU activity happening on the main thread, which adds time for the page to be able to respond to a user’s interaction. TBT does not count toward Google’s search rankings, but FID and INP do, and both are directly influenced by TBT. So, it’s a pretty big deal.</p>\n<p>You will want to heavily audit what tasks are running on the main thread to improve your TBT and, as a result, your INP. Specifically, you want to watch for <strong>long tasks</strong> on the main thread, which are those that take more than 50ms to execute. You can get a decent visualization of tasks on the main thread in DevTools:</p>\n<p><img src=\"https://files.smashing.media/articles/preparing-interaction-next-paint-web-core-vital/6-safari-devtools-timelines-report.png\" /></p>\n<p>The bottom line: <strong>Optimize those long tasks!</strong> There are plenty of approaches you could take depending on your app. Not all scripts are equal in the sense that one may be executing a core feature while another is simply a nice-to-have. You’ll have to ask yourself:</p>\n<ul>\n<li><strong>Who</strong> is the script serving?</li>\n<li><strong>When</strong> is it served?</li>\n<li><strong>Where</strong> is it served from?</li>\n<li><strong>What</strong> is it serving?</li>\n</ul>\n<p>Then, depending on your answers, you have plenty of options for how to optimize your long tasks:</p>\n<ul>\n<li><a href=\"https://www.smashingmagazine.com/2023/04/potential-web-workers-multithreading-web/\">Use Web Workers</a> to establish separate threads for tasks to get scripts off the main thread.</li>\n<li><a href=\"https://www.smashingmagazine.com/2022/02/javascript-bundle-performance-code-splitting/\">Split JavaScript bundles</a> into individual pieces for smaller payloads.</li>\n<li><a href=\"https://www.debugbear.com/blog/async-vs-defer?utm_campaign=sm-3\">Async or defer scripts</a> that can run later without affecting the initial page load.</li>\n<li><a href=\"https://web.dev/articles/preconnect-and-dns-prefetch\">Preconnect network connections</a>, so browsers have a hint for other domains they might need to connect to. (It’s worth noting that this could reveal the user’s IP address and <a href=\"https://css-tricks.com/bunny-fonts/\">conflict with GDPR compliance</a>.)</li>\n</ul>\n<p>Or, nuke any scripts that might no longer be needed!</p>\n<h3>Reduce Processing Time</h3>\n<p>Let’s say the user’s input triggers a heavy task, and you need to serve a bunch of JavaScript in response — heavy enough that you know a second or two is needed for the app to fully process the update.</p>\n<ul>\n<li>Try creating a loading state that triggers immediately and <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/setTimeout\">perform the work in a <code>setTimeout()</code> callback</a> because that’s a much quicker way to respond to the user interaction than waiting for the complete update.</li>\n<li>If you’re working in React, make sure you are <a href=\"https://www.debugbear.com/blog/react-rerenders?utm_campaign=sm-3\">preventing your components from re-rendering unnecessarily</a>.</li>\n<li>Remember that <code>alert()</code>, <code>confirm()</code>, and <code>prompt()</code> are capable of adding to the total processing time as they run synchronously and block the main thread. That said, it appears <a href=\"https://twitter.com/mmocny/status/1679110039880040449\">there could be plans to change that behavior</a> ahead of INP becoming a formal Core Web Vital.</li>\n</ul>\n<h3>Reduce Presentation Delay</h3>\n<p>Reducing the time it takes for the presentation is really about reducing the time it takes the browser to display updates to the UI, paint styles, and do all of the calculations needed to produce the layout.</p>\n<p>Of course, this is entirely dependent on the complexity of the page. That said, there are a few things to consider to help decrease the gap between when an interaction’s callbacks have finished running and when the browser is able to paint the resulting visual changes.</p>\n<p>One thing is being mindful of <strong>the overall size of the DOM</strong>. The bigger the DOM, the more HTML that needs to be processed. That’s generally true, at least, even though <a href=\"https://web.dev/articles/dom-size-and-interactivity#how_can_i_reduce_dom_size\">the relationship between DOM size and rendering isn’t exactly 1:1</a>; the browser still needs to work harder to render a larger DOM on the initial page load and when there’s a change on the page. That link will take you to a deep explanation of what contributes to the DOM size, how to measure it, and approaches for reducing it. The gist, though, is trying to <strong>maintain a flat structure</strong> (i.e., limit the levels of nested elements). Additionally, reviewing your CSS for overly complex selectors is another piece of low-hanging fruit to help move things along.</p>\n<p>While we’re talking about CSS, you might consider looking into the <code>content-visibility</code> property and how it could possibly help reduce presentation delay. It comes with a lot of considerations, but if used effectively, it can provide the browser with a hint as far as which elements to defer fully rendering. The idea is that we can render an element’s layout containment but skip the paint until other resources have loaded. <a href=\"https://css-tricks.com/more-on-content-visibility/\">Chris Coyier explains how and why that happens</a>, and there are <a href=\"https://html5accessibility.com/stuff/2020/08/25/short-note-on-content-visibility-hidden/\">aspects of accessibility to bear in mind</a>.</p>\n<p>And remember, if you’re outputting HTML from JavaScript, that JavaScript will have to load in order for the HTML to render. That’s a potential cost that comes with many single-page application frameworks.</p>\nGain Insight On Your Real User INP Breakdown\n<p>The tools we’ve looked at so far can help you look at specific interactions, especially when testing them on your own computer. But how close is that to what your actual visitors experience?</p>\n<p><strong>Real user-monitoring (RUM)</strong> lets you track how responsive your website is in the real world:</p>\n<ul>\n<li>What pages have the slowest INP?</li>\n<li>What INP components have the biggest impact in real life?</li>\n<li>What page elements do users interact with most often?</li>\n<li>How fast is the average interaction for a given element?</li>\n<li>Is our website less responsive for users in different countries?</li>\n<li>Are our INP scores getting better or worse over time?</li>\n</ul>\n<p>There are many RUM solutions out there, and <a href=\"https://www.debugbear.com/real-user-monitoring?utm_campaign=sm-3\">DebugBear RUM</a> is one of them.</p>\n<p><img src=\"https://files.smashing.media/articles/preparing-interaction-next-paint-web-core-vital/7-debugbear-rum.png\" /></p>\n<p>DebugBear also supports the proposed <a href=\"https://www.debugbear.com/blog/long-animation-frames\">Long Animation Frames API</a> that can help you identify the source code that’s responsible for CPU tasks in the browser.</p>\n<p><img src=\"https://files.smashing.media/articles/preparing-interaction-next-paint-web-core-vital/8-long-animation-frames-api.png\" /></p>\nConclusion\n<p>When Interaction to Next Paint makes its official debut as a Core Web Vital in March 2024, we’re gaining a better way to measure a page’s responsiveness to user interactions that is set to replace the First Input Delay metric.</p>\n<p>Rather than looking at the input delay of the first interaction on the page, we get a high-definition evaluation of the least responsive component on the page — including the <strong>input delay</strong>, <strong>processing time</strong>, and <strong>presentation delay</strong> — whether it’s the first interaction or another one located way down the page. In other words, INP is a clearer and more accurate way to measure the speed of user interactions.</p>\n<p>Will your app be ready for the change in March 2024? You now have a roadmap to help optimize your user interactions and prepare ahead of time as well as all of the tools you need, <a href=\"https://www.debugbear.com/inp-debugger?utm_campaign=sm-3\">including a quick, free option from the team over at DebugBear</a>. This is the time to get a jump on the work; otherwise, you could find yourself with unidentified interactions that exceed the 500ms threshold for a “passing” INP score that negatively impacts your search engine rankings… and user experiences.</p>\n",
          "content:encodedSnippet": "This article is a sponsored by DebugBear\nThere’s a change coming to the Core Web Vitals lineup. If you’re reading this before March 2024 and fire up your favorite performance monitoring tool, you’re going to to get a Core Web Vitals report like this one pulled from PageSpeed Insights:\n\nYou’re likely used to seeing most of these metrics. But there’s a good reason for the little blue icon sitting next to the second metric in the second row, Interaction to Next Paint (INP). It’s the newest metric of the bunch and is set to formally be a ranking factor in Google search results beginning in March 2024.\nAnd there’s a good reason that INP sits immediately below the First Input Delay (FID) in that chart. INP will officially replace FID when it becomes an official Core Web Vital metric.\nThe fact that INP is already available in performance reports means we have an opportunity to familiarize ourselves with it today, in advance of its release. That’s what this article is all about. Rather than pushing off INP until after it starts influencing the way we measure site performance, let’s take a few minutes to level up our understanding of what it is and why it’s designed to replace FID. This way, you’ll not only have the information you need to read your performance reports come March 2024 but can proactively prepare your website for the change.\nChances are that you’re looking at Lighthouse or some other report based on lab data. And by that, I mean data that isn’t coming from the field in the form of “real” users. You configure the test by applying some form of simulated throttling and start watching the results pour in. In other words, the data is not looking at your actual web traffic but a simulated environment that gives you an approximate view of traffic when certain conditions are in place.\nI say all that because it’s important to remember that not all performance data is equal, and some metrics are simply impossible to measure with certain types of data. INP and FID happen to be a couple of metrics where lab data is unsuitable for meaningful results, and that’s because both INP and FID are measurements of user interactions. That may not have been immediately obvious by the name “First Input Delay,” but it’s clear as day when we start talking about “Interaction to Next Paint” — it’s right there in the name!\nSimulated lab data, like what is used in Lighthouse reports, does not interact with the page. That means there is no way for it to evaluate the first input a user makes or any other interactions on the page.\nSo, that’s why you’re not seeing INP or FID in your reports. If you want these metrics, then you will want to use a performance tool that is capable of using real user data, such as DebugBear, which can monitor your actual traffic on an ongoing basis in real time, or PageSpeed Insights which bases its finding on Google’s “Chrome User Experience Report” (commonly referred to as CrUX), though DebugBear is capable of providing CrUX reporting as well. The difference between real-time user monitoring and measuring performance against CrUX data is big enough that it’s worth reading up on it, and we have a full article on Smashing Magazine that goes deeply into the differences for you.\nOK, so we now know that both INP and FID are about page interactions. Specifically, they are about measuring the time between a user interacting with the page and the page responding to that interaction.\nWhat’s the difference between the two metrics, then? The answer is two-fold. First, FID is a measure of the time it takes the page to start processing an interaction or the input delay. That sounds fine on the surface — we want to know how much time it takes for a user to start an interaction and optimize it if we can. The problem with it, though, is that it takes just one part of the time for the page to fully respond to an interaction.\nA more complete picture considers the input delay in addition to two other components: processing time and presentation delay. In other words, we should also look at the time it takes to process the interaction and the time it takes for the page to render the UI in response. As you may have already guessed, INP considers all three delays, whereas FID considers only the input delay.\n\nThe second difference between INP and FID is which interactions are evaluated. FID is not shy about which interaction it measures: the very first one, as in the input delay of the first interaction on the page. We can think of INP as a more complete and accurate representation of how fast your page responds to user interactions because it looks at every single one on the page. It’s probably rare for a page to have only one interaction, and whatever interactions there are after the first interaction are likely located well down the page and happen after the page has fully loaded.\nSo, where FID looks at the first interaction — and only the input delay of that interaction — INP considers the entire lifecycle of all interactions.\nBoth FID and INP are measured in milliseconds. Don’t get too worried if you notice your INP time is greater than your FID. That’s bound to happen when all of the interactions on the page are evaluated instead of the first interaction alone.\nGoogle’s guidance is to maintain an FID under 100ms. And remember, FID does not take into account the time it takes for the event to process, nor does it consider the time it takes the page to update following the event. It only looks at the delay of the event process.\nAnd since INP does indeed take all three of those factors into account — the input delay, processing time, and presentation delay — Google’s guidance for measuring INP is inherently larger than FID: under 200ms for a “good” result, and between 200-500ms for a passing result. Any interaction that adds up to a delay greater than 500ms is a clear bottleneck.\n\nThe goal is to spot slow interactions and optimize them for a smoother user experience. How exactly do you identify those problems? That’s what we’re looking at next.\nThere’s already plenty you can do right now to optimize your site for INP before it becomes an official Core Web Vital in March 2024. Let’s walk through the process.\nOf course, we’re talking about the user doing something on the page, i.e., an action such as a click or keyboard focus. That might be expanding a panel in an accordion component or perhaps triggering a modal or a prompt any change in a state where the UI updates in response.\nYour page may consist of little more than content and images, making for very few, if any, interactions. It could just as well be some sort of game-based UI with thousands of interactions. INP can be a heckuva lot of work, but it really comes down to how many interactions we’re talking about.\nWe’ve already talked about the difference between field data and lab data and how lab data is simply unable to measure page interactions accurately. That means you will want to rely on field data when pulling INP reports to identify bottlenecks. And when we’re talking about field data, we’re talking about two different flavors:\nData from the CrUX report that is based on the results of real Chrome users. This is readily available in PageSpeed Insights and Google Search Console, not to mention DebugBear. If you use either of Google’s tools, just note that their throttling methods collect metrics on a fast connection and then estimate how fast the page would be on a slower connection. DebugBear actually tests with a slower network, resulting in more accurate data.\nMonitoring your website’s real-time traffic, which will require adding a snippet to your source code that sends traffic data to a service. And, yes, DebugBear is one such service, though there are others. You can even take advantage of historical CrUX data integrated with BigQuery to get a historical view of your results dating back as far as 2017 with new data coming in monthly, which isn’t exactly “real-time” monitoring of your actual traffic, but certainly useful.\nYou will get the most bang for your buck with real-time monitoring that keeps a historical record of data you can use to evaluate INP results over time.\nThat said, you can still start identifying bottlenecks today if you prefer not to dive into real-time monitoring right this second. DebugBear has a tool that analyzes any URL your throw at it. What’s great about this is that it shows you the elements that receive user interaction and provides the results right next to them. The result of the element that takes the longest is your INP result. That’s true whether you have one component above the 500ms threshold or 100 of them on the page.\nThe fact that DebugBear’s tool highlights all of the interactions and organizes them by INP makes identifying bottlenecks a straightforward process.\n\nSee that? There’s a clear INP offender on Smashing Magazine’s homepage, and it comes in slightly outside the healthy INP range for a score of 510ms even though the next “slowest” result is 184ms. There’s a little work we need to do between now and March to remedy that.\nNotice, too, that there are actually two scores in the report: the INP Debugger Result and the Real User Google Data. The results aren’t even close! If we were to go by the Google CrUX data, we’re looking at a result that is 201ms faster than the INP Debugger’s result — a big enough difference that would result in the Smashing Magazine homepage fully passing INP.\nUltimately, what matters is how real users experience your website, and you need to look at the CrUX data to see that. The elements identified by the INP Debugger may cause slow interactions, but if users only interact with them very rarely, that might not be a priority to fix. But for a perfect user experience, you would want both results to be in the green.\nThis is the ultimate objective, right? Once we have identified slow interactions — whether through a quick test with CrUX data or a real-time monitoring solution — we need to optimize them so their delays are at least under 500ms, but ideally under 200ms.\nOptimizing INP comes down to CPU activity at the end of the day. But as we now know, INP measures two additional components of interactions that FID does not for a total of three components: input delay, processing time, and presentation delay. Each one is an opportunity to optimize the interaction, so let’s break them down.\nReduce The Input Delay\nThis is what FID is solely concerned with, and it’s the time it takes between the user’s input, such as a click, and for the interaction to start.\n\nThis is where the Total Blocking Time (TBT) metric is a good one because it looks at CPU activity happening on the main thread, which adds time for the page to be able to respond to a user’s interaction. TBT does not count toward Google’s search rankings, but FID and INP do, and both are directly influenced by TBT. So, it’s a pretty big deal.\nYou will want to heavily audit what tasks are running on the main thread to improve your TBT and, as a result, your INP. Specifically, you want to watch for long tasks on the main thread, which are those that take more than 50ms to execute. You can get a decent visualization of tasks on the main thread in DevTools:\n\nThe bottom line: Optimize those long tasks! There are plenty of approaches you could take depending on your app. Not all scripts are equal in the sense that one may be executing a core feature while another is simply a nice-to-have. You’ll have to ask yourself:\nWho is the script serving?\nWhen is it served?\nWhere is it served from?\nWhat is it serving?\nThen, depending on your answers, you have plenty of options for how to optimize your long tasks:\nUse Web Workers to establish separate threads for tasks to get scripts off the main thread.\nSplit JavaScript bundles into individual pieces for smaller payloads.\nAsync or defer scripts that can run later without affecting the initial page load.\nPreconnect network connections, so browsers have a hint for other domains they might need to connect to. (It’s worth noting that this could reveal the user’s IP address and conflict with GDPR compliance.)\nOr, nuke any scripts that might no longer be needed!\nReduce Processing Time\nLet’s say the user’s input triggers a heavy task, and you need to serve a bunch of JavaScript in response — heavy enough that you know a second or two is needed for the app to fully process the update.\nTry creating a loading state that triggers immediately and perform the work in a setTimeout() callback because that’s a much quicker way to respond to the user interaction than waiting for the complete update.\nIf you’re working in React, make sure you are preventing your components from re-rendering unnecessarily.\nRemember that alert(), confirm(), and prompt() are capable of adding to the total processing time as they run synchronously and block the main thread. That said, it appears there could be plans to change that behavior ahead of INP becoming a formal Core Web Vital.\nReduce Presentation Delay\nReducing the time it takes for the presentation is really about reducing the time it takes the browser to display updates to the UI, paint styles, and do all of the calculations needed to produce the layout.\nOf course, this is entirely dependent on the complexity of the page. That said, there are a few things to consider to help decrease the gap between when an interaction’s callbacks have finished running and when the browser is able to paint the resulting visual changes.\nOne thing is being mindful of the overall size of the DOM. The bigger the DOM, the more HTML that needs to be processed. That’s generally true, at least, even though the relationship between DOM size and rendering isn’t exactly 1:1; the browser still needs to work harder to render a larger DOM on the initial page load and when there’s a change on the page. That link will take you to a deep explanation of what contributes to the DOM size, how to measure it, and approaches for reducing it. The gist, though, is trying to maintain a flat structure (i.e., limit the levels of nested elements). Additionally, reviewing your CSS for overly complex selectors is another piece of low-hanging fruit to help move things along.\nWhile we’re talking about CSS, you might consider looking into the content-visibility property and how it could possibly help reduce presentation delay. It comes with a lot of considerations, but if used effectively, it can provide the browser with a hint as far as which elements to defer fully rendering. The idea is that we can render an element’s layout containment but skip the paint until other resources have loaded. Chris Coyier explains how and why that happens, and there are aspects of accessibility to bear in mind.\nAnd remember, if you’re outputting HTML from JavaScript, that JavaScript will have to load in order for the HTML to render. That’s a potential cost that comes with many single-page application frameworks.\nThe tools we’ve looked at so far can help you look at specific interactions, especially when testing them on your own computer. But how close is that to what your actual visitors experience?\nReal user-monitoring (RUM) lets you track how responsive your website is in the real world:\nWhat pages have the slowest INP?\nWhat INP components have the biggest impact in real life?\nWhat page elements do users interact with most often?\nHow fast is the average interaction for a given element?\nIs our website less responsive for users in different countries?\nAre our INP scores getting better or worse over time?\nThere are many RUM solutions out there, and DebugBear RUM is one of them.\n\nDebugBear also supports the proposed Long Animation Frames API that can help you identify the source code that’s responsible for CPU tasks in the browser.\n\nWhen Interaction to Next Paint makes its official debut as a Core Web Vital in March 2024, we’re gaining a better way to measure a page’s responsiveness to user interactions that is set to replace the First Input Delay metric.\nRather than looking at the input delay of the first interaction on the page, we get a high-definition evaluation of the least responsive component on the page — including the input delay, processing time, and presentation delay — whether it’s the first interaction or another one located way down the page. In other words, INP is a clearer and more accurate way to measure the speed of user interactions.\nWill your app be ready for the change in March 2024? You now have a roadmap to help optimize your user interactions and prepare ahead of time as well as all of the tools you need, including a quick, free option from the team over at DebugBear. This is the time to get a jump on the work; otherwise, you could find yourself with unidentified interactions that exceed the 500ms threshold for a “passing” INP score that negatively impacts your search engine rankings… and user experiences.",
          "enclosure": {
            "url": "http://files.smashing.media/articles/preparing-interaction-next-paint-web-core-vital/preparing-interaction-next-paint-web-core-vital.jpg",
            "length": "0",
            "type": "image/jpg"
          },
          "content": "Starting in March 2024, Interaction to Next Paint will formally replace First Input Delay as a Core Web Vital metric. Learn how the two metrics differ, why we needed a new way to measure interaction responsiveness, and how you can start optimizing the performance of your site now for a seamless transition to the latest Core Web Vital metric.",
          "contentSnippet": "Starting in March 2024, Interaction to Next Paint will formally replace First Input Delay as a Core Web Vital metric. Learn how the two metrics differ, why we needed a new way to measure interaction responsiveness, and how you can start optimizing the performance of your site now for a seamless transition to the latest Core Web Vital metric.",
          "guid": "https://smashingmagazine.com/2023/12/preparing-interaction-next-paint-web-core-vital/",
          "isoDate": "2023-12-07T21:00:00.000Z"
        },
        {
          "creator": "hello@smashingmagazine.com (Eduard Kuric)",
          "title": "Five-Second Testing: Taking A Closer Look At First Impressions (Case Study)",
          "link": "https://smashingmagazine.com/2023/12/five-second-testing-case-study/",
          "pubDate": "Wed, 06 Dec 2023 10:00:00 GMT",
          "author": "hello@smashingmagazine.com (Eduard Kuric)",
          "content:encoded": "<p>In today’s world of shortening attention spans and omnipresent hustle, wasting even a second could mean losing the chance to earn more time from a person you want to impress. If your interests lie in creating good user experiences, there is a <a href=\"https://www.smashingmagazine.com/2020/06/test-design-concept-effectiveness/\">fair chance</a> you have heard of <strong>five-second testing</strong>.</p>\n<blockquote>Five-second testing is an established technique of usability research used by UX researchers, designers, product managers, and in a variety of other professions, such as marketing or business analysis.</blockquote>\n\n<p>In short, you show a picture of whatever you are designing (site, app, pair of socks) to a member of your intended audience for exactly five seconds. Then, you hide the picture and ask the participant a couple of questions. The goal is to learn whether the reaction — the participants’s first impression — is what you wanted to see. <em>Did you get the main message across? Do people remember the company’s name?</em> Sounds like an efficient way to test your product without needing to turn to full-on usability testing, right?</p>\n<p><strong>Note</strong>: <em>The word “participant” in this article is used to refer to users involved in five-second testing or related usability research methods. The word “user” is used in more general contexts since users form first impressions all the time, not just when you are testing it.</em></p>\n<p><img src=\"https://files.smashing.media/articles/five-second-testing-case-study/1-illustration-product-testing.png\" /></p>\n<p>Why is it <strong>five</strong> seconds exactly, though? Are five seconds some magical moment when everything we see should become clear? And if it does not, does it automatically mean that a user experience is bad? Or are five seconds just the right amount of time for first impressions to brew in the user’s mind so that they’re neither undercooked nor overcooked?</p>\n<p>These are some of the questions that we asked ourselves. Not satisfied with the answers written by others who covered the topic before us, we kept drilling and conducted an <a href=\"https://www.tandfonline.com/doi/full/10.1080/0144929X.2023.2272747?src=\">actual peer-reviewed scientific case study</a>, exploring the hidden truths behind the testing of first impressions. The research paper examines the five-second test and discusses the results.</p>\n<p>So strap in and read <strong>what science has to say about five-second testing</strong>. And then, <strong>what the implications are for you</strong> so that you can take practical advantage of this new knowledge to develop better first impressions of your services or products. But first, let us delve into what we know about five-second testing and its caveats so that you see the greater picture of the focal points of our investigation.</p>\nThe Mythos Of Five Seconds And Its Gaps\n<p>You may be familiar with the well-known statistic that <a href=\"https://www.nngroup.com/articles/how-long-do-users-stay-on-web-pages/\">a website has about ten seconds to communicate its key message to the user</a>. Knowing that waiting only five seconds to ask testing participants about their first impressions may suddenly seem like an odd choice. If indeed visitors of a website have about ten seconds to grasp a message, are five seconds really enough time for users? There is an alleged justification, as we explain below.</p>\n<p>Cutting a bit forward, though, the factual basis for it is admittedly a bit of a Wild West if you look for hard data to support it. There is an almost uncanny resemblance to another not wholly scientific five-second rule that says it’s okay to eat food off the ground if it’s within five seconds from when it dropped there.</p>\n<p>The five-second testing method has its <a href=\"https://books.google.sk/books?hl=en&amp;lr=&amp;id=b7XrAgAAQBAJ&amp;oi=fnd&amp;pg=PP1&amp;ots=5WmLD6RjuI&amp;sig=SSPVM6ZNKTiib3nVEWWF4W9X8dM&amp;redir_esc=y#v=onepage&amp;q&amp;f=false\">origins as a simplification of usability testing</a>. The first references to five-second testing point to <a href=\"https://articles.centercentre.com/five_second_test/\">Christine Perfetti, who coined the term for the method in the mid-2000s</a>. The answer to “Why five seconds exactly?” comes largely from anecdotal evidence in the form of the experience of usability researchers.</p>\n<p>The common story is that if something is shown to participants for more than five seconds, their first impressions will start to deviate from the actual user’s genuine initial impressions. The participant’s perspective becomes more analytical and less task-driven. The five-second test lets you avoid overtly speculative feedback that nobody would give you under normal circumstances.</p>\n<p>Fair enough, that could potentially be true. But five seconds is still quite a short period of time. Consider how different people can be when it comes to their <strong>cognitive abilities</strong> (and there is nothing wrong with that). For example, one user’s sharp perception may let them realistically form first impressions in five seconds or faster, but another user may barely have the time to blink, much less absorb any meaningful information–they need a moment to take it in at their own tempo.</p>\n<p>The reasoning starts to fall apart a bit more at its seams once you also consider the <strong>visual complexity of the stimulus</strong> (a.k.a., the picture you show to the participants). The nature of the things you may want to test can range from very simple to very complex. If the stimulus is simple, it is possible to take even less than five seconds for participants to form their initial impressions. Would this mean that there would be the risk of them using the remaining time to get over-exceedingly analytical? </p>\n<p>Conversely, there is the question of whether five seconds is enough time to let participants realistically visually scan a more complex stimulus. I can already hear staunch proponents of five-second testing saying that this last discrepancy is actually rightfully intentional. It’s a feature, not a bug, if you will.</p>\n<p>After all, if a stimulus is too complex, that is exactly why you conduct five-second testing. It allows us to find out about things like complexity. It can help you find out if participants cannot extract the key information you want to communicate so that you can fix it. </p>\n<p>However, we need to consider that not all user interfaces are the landing pages of websites. They serve to support different user tasks, some of which cannot avoid having a certain degree of complexity.</p>\n<p>Five-second testing guides <a href=\"https://articles.centercentre.com/five_second_test/\">typically avoid directly addressing testing of these types of user interfaces by saying</a> that the method has the following limitation: it should not be used to test user interfaces with multiple purposes. If the same stimulus serves for more than one task, it is alleged that you should probably conduct full-fledged usability testing, which is technically correct (the best kind of correct).</p>\n<p>Giving up on the five-second testing in the inherently more complex user interfaces, however, also gives up on its advantages for measuring and optimizing first impressions. For instance, the idea that a screenshot or a mockup is all you need to quickly find usability problems and iterate your designs. This is where five-second testing really shines.</p>\n<p>Usability testing does not tell you accurately what the actual first impressions are without considerably interrupting the participant. And even then, you would encounter the same problem: <em>At what moment from when the participant is exposed to a design should their first impressions be gauged so that they are genuine?</em></p>\n<p>As we have discussed so far, there are certainly a fair number of question marks surrounding five-second testing. The method still undeniably has a number of merits, as proven by our experience at UXtweak, where we also provide our own <a href=\"https://www.uxtweak.com/five-second-test-tool\">Five Second Test tool</a>. A lack of proper research on the topic is what drove us at UXtweak Research to conduct our very own case study.</p>\nThe Science, Abridged\n<p>Essentially, what we sought to investigate in our case study are the relations of a number of key factors that are absolutely crucial for five-second testing:</p>\n<ul>\n<li>What are the <strong>cognitive abilities</strong> of the participant engaging in the five-second test?</li>\n<li>How <strong>visually complex</strong> is the stimulus shown to the participant?</li>\n<li>For <strong>how long</strong> is the stimulus shown to the participant?</li>\n<li>What kinds of <strong>questions</strong> do we ask the participants afterward?</li>\n<li>What is the <strong>feedback</strong> that participants give you?</li>\n</ul>\n<p>As you may have noticed, time — that iconic yet controversial five-second threshold — is considered a variable factor. In our experiment, we investigate the differences in feedback between three separate groups of participants who are shown pictures for either five (5) or alternatively two (2) or (10) seconds (so a bit less and a bit more time, respectively). This means that it would not be correct to refer to it as just a five-second test anymore, but rather an N-second test (or a first impression test, if you do not wish to be too pedantic about the number of seconds).</p>\n<p>Each participant first passes not just one but two cognitive ability tests. Human minds are multifaceted, and there is not just a single “cognitive ability” metric that would encompass everything that the mind can do. Among standard tests used by psychologists, we picked two that are linked to abilities that can be found as the most relevant to the formation and testing of first impressions:</p>\n<ul>\n<li><strong>Perceptual speed</strong>: How quickly you pick up visual information.</li>\n<li><strong>Working memory</strong>: How much information you can mentally process at the same time.</li>\n</ul>\n<p>Working memory is the appropriate memory ability to focus on since it operates with information that receives the user’s attention. This distinguishes it from sensory memory (the memory processing information that our senses pick up) and long-term memory, where information is stored persistently for later use.</p>\n<p><img src=\"https://files.smashing.media/articles/five-second-testing-case-study/2-working-memory.png\" /></p>\n<p>For the first impression test itself, six website screenshots were used as the stimuli. These screenshots were selected for possessing a <strong>broad range of visual complexity</strong>, from the simplest with just a few visual elements to the most complex with a number of distinct sections that serve different purposes.</p>\n<p>Screenshots of real websites local to Czechia and Slovakia were translated into English, and their logos were replaced with fictional brand names so that, for all intents and purposes, the website screenshots would be authentic yet also unfamiliar to the participants who were recruited in the UK.</p>\n<p><img src=\"https://files.smashing.media/articles/five-second-testing-case-study/3-website-screenshots.png\" /></p>\n<p>Finally, participants were asked to provide feedback by answering practically a complete portfolio of the various <a href=\"https://books.google.sk/books?hl=en&amp;lr=&amp;id=b7XrAgAAQBAJ&amp;oi=fnd&amp;pg=PP1&amp;ots=5WmLD6RjuI&amp;sig=SSPVM6ZNKTiib3nVEWWF4W9X8dM&amp;redir_esc=y#v=onepage&amp;q&amp;f=false\">types of questions that can be typically asked during a first impression test</a>. Each type of question tests a different aspect of the first impressions that the participants have formed inside their heads:</p>\n<ul>\n<li><strong>Attitudinal questions</strong>: Rating a perceived quality of the website (e.g., ugly vs. attractive) on a scale from 1 to 7.</li>\n<li><strong>Target identification questions</strong>: Questions directed at specific elements or aspects of the stimulus.</li>\n<li><strong>Memory dump questions</strong>: Asking participants to describe everything that they remember about what they saw.</li>\n</ul>\n<p>The resulting answers were analyzed both quantitatively (with statistics) and qualitatively (by inspecting the contents of the received answers on an individual level). With it, a number of conclusions can be reached, some expected and some rather surprising.</p>\n<p>Now that you have a picture of what our case study was about let’s dive into the actual, interesting implications for developing the first impressions of your product.</p>\n<p><strong>Note</strong>: <em>If you would like to immerse yourself in further details of how our case study was conducted, you can learn more in our <a href=\"https://www.tandfonline.com/doi/full/10.1080/0144929X.2023.2272747?src=\">scientific paper</a>.</em></p>\nTakeaways\n<p>Statistically, all the variables we experimented with — the time duration of showing pictures to participants, the participants’ innate cognitive abilities, and the visual complexity of pictures — had a significant effect on the first impression answers.</p>\n<p>For instance, between the groups that were shown screenshots of websites for two, five, and ten seconds, the number of answers that incorrectly identified what the websites were for dropped as time progressed. Notable is the difference between five and ten seconds. If the participants were really focusing on inconsequential details after five seconds, there should not be differences in recognition of such a key aspect as the website’s entire purpose.</p>\n<p><img src=\"https://files.smashing.media/articles/five-second-testing-case-study/4-purpose-identification.png\" /></p>\n<p>Statistical differences lay the grounds for further observations on how changing the conditions of a test can (or cannot) affect its results:</p>\n<ul>\n<li><strong>Attitudes crystallize faster than in five seconds.</strong><br />In attitudinal questions where participants are asked to rate how they view the picture’s various qualities (e.g., from clear to confusing, from captivating to dull), answers stay relatively consistent, regardless of how much time the participant has or how good their cognitive abilities are. If you are laser-focused on assessing participants’ attitudes about your product and nothing else, you could present pictures for two seconds, <a href=\"https://www.tandfonline.com/doi/abs/10.1080/01449290500330448\">or possibly even less, as research done by others on a related topic also implies</a>.</li>\n<li><strong>Logos are recognized earlier than in five seconds (with one exception).</strong><br />The target identification questions where participants are asked to recall the company name from the logo are, on the whole, impacted by time very little. This is to be expected: when viewing a website, our eyes are usually drawn to the top left corner to find out where we have found ourselves. There is an exception to this rule, however.<br />Among participants with slower perceptual speed, significantly fewer identified the company name correctly at two seconds when compared to five seconds. This establishes five seconds as a more inclusive choice for timing your first impression test if you expect your target audience to have, on average, lower perceptual speed than the general populace and if the primary aim is to test contents of the header, such as logo design or company name identification. Otherwise, two seconds is a safe bet.</li>\n<li><strong>Irrelevant nitpicking? Yes, if visual complexity is low.</strong><br />In some cases, the popular narrative about five seconds being a good viewing time for testing first impressions is indeed true. Particularly for the simplest website screenshots, once five seconds have elapsed, participants start paying attention to minute details (e.g., the girl’s shirt color in the hero image).<br />Curiously, though, having more time does not mean that participants would write longer or more complex answers. Instead, when participants have ten seconds to view the screenshots, the higher visual complexity of the screenshots is reflected in better-quality answers. Participants stay more on-topic–describing how the site is visually structured or justifying their criticisms of the page’s design. Different viewing times may be optimal in different situations. Especially since…</li>\n<li><strong>Low working memory warrants longer viewing time.</strong><br />When asked to reiterate what they saw in their own words, participants with low and high working memory provided significantly different answers. With low working memory, answers become shorter, less complex, and recall fewer concepts overall. However, when the viewing time is extended to ten seconds, these differences disappear. This implies that the same information is being processed — memory capacity just dictates how fast it can happen.<br />Without knowing where each participant’s memory ability stands, it is difficult to tell what they would actually recall if we left them to work at their own pace. Consequently, assessment of working memory before testing first impressions (and adjusting viewing time accordingly) should be considered a good practice.</li>\n<li><strong>For cognitive powerhouses, five seconds are enough.</strong><br />A less practical point maybe, but if you are developing an app for people with reasonably high perceptual speed and working memory — be it the mentally gifted, hyperproductive hustle enthusiasts, or caffeine addicts — you could likely show them your screenshots for just two seconds and get similar results as in a five-second test. </li>\n<li><strong>Give participants the proper amount of time to form a first impression.</strong><br />When the visual stimulus is more visually complex in a first impression test, the task of mentally processing it becomes more difficult and time-consuming (just like in any normal scenario). This manifests in test results. Fewer people correctly identify the purpose of a more visually complex website, and they recall fewer elements and aspects of the website.<br />This could be seen as a bit of a paradox since more complex stimuli mean there is actually more content that participants could potentially remember and comment on, but only if they had the time to absorb the information properly. Data shows that when participants are given ten seconds, the answers do actually normalize, becoming more similar to stimuli of lower visual complexity.</li>\n</ul>\n<p>If the purpose of the particular first impression test is not to remove all visual complexity at any cost outright, we would suggest adjusting the viewing time to reflect the visual complexity of the stimulus.</p>\n<p>Keep in mind there are still aspects of first impression testing that remain unknown. A reasonable question that you can ask now would be: “Okay, so how exactly do I time my first impression test?” While we can sum up our observations into a conceptual framework of how time can be treated in first-impression test planning, it is not an exact guideline; there may be other interpretations or exceptions.</p>\n<p><img src=\"https://files.smashing.media/articles/five-second-testing-case-study/5-testing-different-kinds-questions.png\" /></p>\n<p>Take this more as an eye-opener and a call to action. Indeed, in our study, ten seconds yielded more appropriate results for more complex websites than five seconds did. But there is nothing to say that for other websites, the best timing could not be fifteen or even twenty seconds. Even more so, once you also factor in the influence of the cognitive ability of each individual participant.</p>\n<p>The key takeaway? <strong>When you gauge your audience’s first impressions about something, take a more holistic approach.</strong></p>\n<p>Consider your goals for your test. What kind of questions do you want to ask? Use some of the <a href=\"https://interfacemetrics.aalto.fi/\">tools that are available to measure the visual complexity</a> of the pictures that you want to present. Give your participants a <a href=\"https://humanbenchmark.com/tests/memory\">short working memory test</a> before you start bombarding them with pictures and questions.</p>\n<p>Try to adjust the timing in your first impression test to match the situation. To give an analogy, by blindly following a different five-second rule and eating off the floor, you could end up getting sick. Be just as cautious about relying on myths in your usability research methods. This is not to discount five seconds. As we show, it is still good timing for first impression tests in plenty of cases, but it is not the be-all and end-all as far as first impression testing goes. By broadening your perspective, you can do even better. </p>\n<h3>Resources</h3>\n<ul>\n<li>“<a href=\"https://www.tandfonline.com/doi/full/10.1080/0144929X.2023.2272747?src=\">Cognitive abilities and visual complexity impact first impressions in five-second testing</a>”<br />The paper by UXtweak Research investigates the impact of timing, cognitive abilities, and visual complexity on first impression testing. Read for further details about the experiment, its outcomes, and a discussion of findings.</li>\n<li>“<a href=\"https://www.nngroup.com/articles/how-long-do-users-stay-on-web-pages/\">How Long Do Users Stay on Web Pages?</a>”<br />Jakob Nielsen’s article on how long it takes people to leave a website (a fact to consider when testing first impressions).</li>\n<li>“<a href=\"https://www.tandfonline.com/doi/abs/10.1080/01449290500330448\">Attention web designers: You have 50 milliseconds to make a good first impression!</a>”<br />The paper by Lindgaard et al. shows that when it comes to attitudes, some first impressions are genuinely formed in a flash.</li>\n<li>“<a href=\"https://books.google.sk/books?hl=en&amp;lr=&amp;id=b7XrAgAAQBAJ&amp;oi=fnd&amp;pg=PP1&amp;ots=5WmLD6RjuI&amp;sig=SSPVM6ZNKTiib3nVEWWF4W9X8dM&amp;redir_esc=y#v=onepage&amp;q&amp;f=false\">The UX Five-Second Rules: Guidelines for User Experience Design’s Simplest Testing Technique</a>”<br />Paul Doncaster’s book on five-second testing provides a thorough summary of existing knowledge about the method and its applications.</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2020/06/test-design-concept-effectiveness/\">How to Test a Design Concept for Effectiveness</a>”<br />Paul Boag’s walkthrough of key concept testing methods, including five-second testing.</li>\n<li>“<a href=\"https://articles.centercentre.com/five_second_test/\">5-Second Tests: Measuring Your Site’s Content Pages</a>”<br />This article by Christine Perfetti, dating back to 2007, can be seen as the first reference to modern five-second testing.</li>\n<li><a href=\"https://interfacemetrics.aalto.fi/\">Aalto Interface Metrics tool</a> for measuring visual complexity of user interfaces</li>\n<li><a href=\"https://humanbenchmark.com/tests/memory\">Human Benchmark test of visual working memory</a></li>\n<li><a href=\"https://www.uxtweak.com/five-second-test-tool\">UXtweak’s Five Second Test tool</a></li>\n</ul>\n",
          "content:encodedSnippet": "In today’s world of shortening attention spans and omnipresent hustle, wasting even a second could mean losing the chance to earn more time from a person you want to impress. If your interests lie in creating good user experiences, there is a fair chance you have heard of five-second testing.\nFive-second testing is an established technique of usability research used by UX researchers, designers, product managers, and in a variety of other professions, such as marketing or business analysis.\nIn short, you show a picture of whatever you are designing (site, app, pair of socks) to a member of your intended audience for exactly five seconds. Then, you hide the picture and ask the participant a couple of questions. The goal is to learn whether the reaction — the participants’s first impression — is what you wanted to see. Did you get the main message across? Do people remember the company’s name? Sounds like an efficient way to test your product without needing to turn to full-on usability testing, right?\nNote: The word “participant” in this article is used to refer to users involved in five-second testing or related usability research methods. The word “user” is used in more general contexts since users form first impressions all the time, not just when you are testing it.\n\nWhy is it five seconds exactly, though? Are five seconds some magical moment when everything we see should become clear? And if it does not, does it automatically mean that a user experience is bad? Or are five seconds just the right amount of time for first impressions to brew in the user’s mind so that they’re neither undercooked nor overcooked?\nThese are some of the questions that we asked ourselves. Not satisfied with the answers written by others who covered the topic before us, we kept drilling and conducted an actual peer-reviewed scientific case study, exploring the hidden truths behind the testing of first impressions. The research paper examines the five-second test and discusses the results.\nSo strap in and read what science has to say about five-second testing. And then, what the implications are for you so that you can take practical advantage of this new knowledge to develop better first impressions of your services or products. But first, let us delve into what we know about five-second testing and its caveats so that you see the greater picture of the focal points of our investigation.\nYou may be familiar with the well-known statistic that a website has about ten seconds to communicate its key message to the user. Knowing that waiting only five seconds to ask testing participants about their first impressions may suddenly seem like an odd choice. If indeed visitors of a website have about ten seconds to grasp a message, are five seconds really enough time for users? There is an alleged justification, as we explain below.\nCutting a bit forward, though, the factual basis for it is admittedly a bit of a Wild West if you look for hard data to support it. There is an almost uncanny resemblance to another not wholly scientific five-second rule that says it’s okay to eat food off the ground if it’s within five seconds from when it dropped there.\nThe five-second testing method has its origins as a simplification of usability testing. The first references to five-second testing point to Christine Perfetti, who coined the term for the method in the mid-2000s. The answer to “Why five seconds exactly?” comes largely from anecdotal evidence in the form of the experience of usability researchers.\nThe common story is that if something is shown to participants for more than five seconds, their first impressions will start to deviate from the actual user’s genuine initial impressions. The participant’s perspective becomes more analytical and less task-driven. The five-second test lets you avoid overtly speculative feedback that nobody would give you under normal circumstances.\nFair enough, that could potentially be true. But five seconds is still quite a short period of time. Consider how different people can be when it comes to their cognitive abilities (and there is nothing wrong with that). For example, one user’s sharp perception may let them realistically form first impressions in five seconds or faster, but another user may barely have the time to blink, much less absorb any meaningful information–they need a moment to take it in at their own tempo.\nThe reasoning starts to fall apart a bit more at its seams once you also consider the visual complexity of the stimulus (a.k.a., the picture you show to the participants). The nature of the things you may want to test can range from very simple to very complex. If the stimulus is simple, it is possible to take even less than five seconds for participants to form their initial impressions. Would this mean that there would be the risk of them using the remaining time to get over-exceedingly analytical? \nConversely, there is the question of whether five seconds is enough time to let participants realistically visually scan a more complex stimulus. I can already hear staunch proponents of five-second testing saying that this last discrepancy is actually rightfully intentional. It’s a feature, not a bug, if you will.\nAfter all, if a stimulus is too complex, that is exactly why you conduct five-second testing. It allows us to find out about things like complexity. It can help you find out if participants cannot extract the key information you want to communicate so that you can fix it. \nHowever, we need to consider that not all user interfaces are the landing pages of websites. They serve to support different user tasks, some of which cannot avoid having a certain degree of complexity.\nFive-second testing guides typically avoid directly addressing testing of these types of user interfaces by saying that the method has the following limitation: it should not be used to test user interfaces with multiple purposes. If the same stimulus serves for more than one task, it is alleged that you should probably conduct full-fledged usability testing, which is technically correct (the best kind of correct).\nGiving up on the five-second testing in the inherently more complex user interfaces, however, also gives up on its advantages for measuring and optimizing first impressions. For instance, the idea that a screenshot or a mockup is all you need to quickly find usability problems and iterate your designs. This is where five-second testing really shines.\nUsability testing does not tell you accurately what the actual first impressions are without considerably interrupting the participant. And even then, you would encounter the same problem: At what moment from when the participant is exposed to a design should their first impressions be gauged so that they are genuine?\nAs we have discussed so far, there are certainly a fair number of question marks surrounding five-second testing. The method still undeniably has a number of merits, as proven by our experience at UXtweak, where we also provide our own Five Second Test tool. A lack of proper research on the topic is what drove us at UXtweak Research to conduct our very own case study.\nEssentially, what we sought to investigate in our case study are the relations of a number of key factors that are absolutely crucial for five-second testing:\nWhat are the cognitive abilities of the participant engaging in the five-second test?\nHow visually complex is the stimulus shown to the participant?\nFor how long is the stimulus shown to the participant?\nWhat kinds of questions do we ask the participants afterward?\nWhat is the feedback that participants give you?\nAs you may have noticed, time — that iconic yet controversial five-second threshold — is considered a variable factor. In our experiment, we investigate the differences in feedback between three separate groups of participants who are shown pictures for either five (5) or alternatively two (2) or (10) seconds (so a bit less and a bit more time, respectively). This means that it would not be correct to refer to it as just a five-second test anymore, but rather an N-second test (or a first impression test, if you do not wish to be too pedantic about the number of seconds).\nEach participant first passes not just one but two cognitive ability tests. Human minds are multifaceted, and there is not just a single “cognitive ability” metric that would encompass everything that the mind can do. Among standard tests used by psychologists, we picked two that are linked to abilities that can be found as the most relevant to the formation and testing of first impressions:\nPerceptual speed: How quickly you pick up visual information.\nWorking memory: How much information you can mentally process at the same time.\nWorking memory is the appropriate memory ability to focus on since it operates with information that receives the user’s attention. This distinguishes it from sensory memory (the memory processing information that our senses pick up) and long-term memory, where information is stored persistently for later use.\n\nFor the first impression test itself, six website screenshots were used as the stimuli. These screenshots were selected for possessing a broad range of visual complexity, from the simplest with just a few visual elements to the most complex with a number of distinct sections that serve different purposes.\nScreenshots of real websites local to Czechia and Slovakia were translated into English, and their logos were replaced with fictional brand names so that, for all intents and purposes, the website screenshots would be authentic yet also unfamiliar to the participants who were recruited in the UK.\n\nFinally, participants were asked to provide feedback by answering practically a complete portfolio of the various types of questions that can be typically asked during a first impression test. Each type of question tests a different aspect of the first impressions that the participants have formed inside their heads:\nAttitudinal questions: Rating a perceived quality of the website (e.g., ugly vs. attractive) on a scale from 1 to 7.\nTarget identification questions: Questions directed at specific elements or aspects of the stimulus.\nMemory dump questions: Asking participants to describe everything that they remember about what they saw.\nThe resulting answers were analyzed both quantitatively (with statistics) and qualitatively (by inspecting the contents of the received answers on an individual level). With it, a number of conclusions can be reached, some expected and some rather surprising.\nNow that you have a picture of what our case study was about let’s dive into the actual, interesting implications for developing the first impressions of your product.\nNote: If you would like to immerse yourself in further details of how our case study was conducted, you can learn more in our scientific paper.\nStatistically, all the variables we experimented with — the time duration of showing pictures to participants, the participants’ innate cognitive abilities, and the visual complexity of pictures — had a significant effect on the first impression answers.\nFor instance, between the groups that were shown screenshots of websites for two, five, and ten seconds, the number of answers that incorrectly identified what the websites were for dropped as time progressed. Notable is the difference between five and ten seconds. If the participants were really focusing on inconsequential details after five seconds, there should not be differences in recognition of such a key aspect as the website’s entire purpose.\n\nStatistical differences lay the grounds for further observations on how changing the conditions of a test can (or cannot) affect its results:\nAttitudes crystallize faster than in five seconds.\nIn attitudinal questions where participants are asked to rate how they view the picture’s various qualities (e.g., from clear to confusing, from captivating to dull), answers stay relatively consistent, regardless of how much time the participant has or how good their cognitive abilities are. If you are laser-focused on assessing participants’ attitudes about your product and nothing else, you could present pictures for two seconds, or possibly even less, as research done by others on a related topic also implies.\nLogos are recognized earlier than in five seconds (with one exception).\nThe target identification questions where participants are asked to recall the company name from the logo are, on the whole, impacted by time very little. This is to be expected: when viewing a website, our eyes are usually drawn to the top left corner to find out where we have found ourselves. There is an exception to this rule, however.\nAmong participants with slower perceptual speed, significantly fewer identified the company name correctly at two seconds when compared to five seconds. This establishes five seconds as a more inclusive choice for timing your first impression test if you expect your target audience to have, on average, lower perceptual speed than the general populace and if the primary aim is to test contents of the header, such as logo design or company name identification. Otherwise, two seconds is a safe bet.\nIrrelevant nitpicking? Yes, if visual complexity is low.\nIn some cases, the popular narrative about five seconds being a good viewing time for testing first impressions is indeed true. Particularly for the simplest website screenshots, once five seconds have elapsed, participants start paying attention to minute details (e.g., the girl’s shirt color in the hero image).\nCuriously, though, having more time does not mean that participants would write longer or more complex answers. Instead, when participants have ten seconds to view the screenshots, the higher visual complexity of the screenshots is reflected in better-quality answers. Participants stay more on-topic–describing how the site is visually structured or justifying their criticisms of the page’s design. Different viewing times may be optimal in different situations. Especially since…\nLow working memory warrants longer viewing time.\nWhen asked to reiterate what they saw in their own words, participants with low and high working memory provided significantly different answers. With low working memory, answers become shorter, less complex, and recall fewer concepts overall. However, when the viewing time is extended to ten seconds, these differences disappear. This implies that the same information is being processed — memory capacity just dictates how fast it can happen.\nWithout knowing where each participant’s memory ability stands, it is difficult to tell what they would actually recall if we left them to work at their own pace. Consequently, assessment of working memory before testing first impressions (and adjusting viewing time accordingly) should be considered a good practice.\nFor cognitive powerhouses, five seconds are enough.\nA less practical point maybe, but if you are developing an app for people with reasonably high perceptual speed and working memory — be it the mentally gifted, hyperproductive hustle enthusiasts, or caffeine addicts — you could likely show them your screenshots for just two seconds and get similar results as in a five-second test. \nGive participants the proper amount of time to form a first impression.\nWhen the visual stimulus is more visually complex in a first impression test, the task of mentally processing it becomes more difficult and time-consuming (just like in any normal scenario). This manifests in test results. Fewer people correctly identify the purpose of a more visually complex website, and they recall fewer elements and aspects of the website.\nThis could be seen as a bit of a paradox since more complex stimuli mean there is actually more content that participants could potentially remember and comment on, but only if they had the time to absorb the information properly. Data shows that when participants are given ten seconds, the answers do actually normalize, becoming more similar to stimuli of lower visual complexity.\nIf the purpose of the particular first impression test is not to remove all visual complexity at any cost outright, we would suggest adjusting the viewing time to reflect the visual complexity of the stimulus.\nKeep in mind there are still aspects of first impression testing that remain unknown. A reasonable question that you can ask now would be: “Okay, so how exactly do I time my first impression test?” While we can sum up our observations into a conceptual framework of how time can be treated in first-impression test planning, it is not an exact guideline; there may be other interpretations or exceptions.\n\nTake this more as an eye-opener and a call to action. Indeed, in our study, ten seconds yielded more appropriate results for more complex websites than five seconds did. But there is nothing to say that for other websites, the best timing could not be fifteen or even twenty seconds. Even more so, once you also factor in the influence of the cognitive ability of each individual participant.\nThe key takeaway? When you gauge your audience’s first impressions about something, take a more holistic approach.\nConsider your goals for your test. What kind of questions do you want to ask? Use some of the tools that are available to measure the visual complexity of the pictures that you want to present. Give your participants a short working memory test before you start bombarding them with pictures and questions.\nTry to adjust the timing in your first impression test to match the situation. To give an analogy, by blindly following a different five-second rule and eating off the floor, you could end up getting sick. Be just as cautious about relying on myths in your usability research methods. This is not to discount five seconds. As we show, it is still good timing for first impression tests in plenty of cases, but it is not the be-all and end-all as far as first impression testing goes. By broadening your perspective, you can do even better. \nResources\n“Cognitive abilities and visual complexity impact first impressions in five-second testing”\nThe paper by UXtweak Research investigates the impact of timing, cognitive abilities, and visual complexity on first impression testing. Read for further details about the experiment, its outcomes, and a discussion of findings.\n“How Long Do Users Stay on Web Pages?”\nJakob Nielsen’s article on how long it takes people to leave a website (a fact to consider when testing first impressions).\n“Attention web designers: You have 50 milliseconds to make a good first impression!”\nThe paper by Lindgaard et al. shows that when it comes to attitudes, some first impressions are genuinely formed in a flash.\n“The UX Five-Second Rules: Guidelines for User Experience Design’s Simplest Testing Technique”\nPaul Doncaster’s book on five-second testing provides a thorough summary of existing knowledge about the method and its applications.\n“How to Test a Design Concept for Effectiveness”\nPaul Boag’s walkthrough of key concept testing methods, including five-second testing.\n“5-Second Tests: Measuring Your Site’s Content Pages”\nThis article by Christine Perfetti, dating back to 2007, can be seen as the first reference to modern five-second testing.\nAalto Interface Metrics tool for measuring visual complexity of user interfaces\nHuman Benchmark test of visual working memory\nUXtweak’s Five Second Test tool",
          "enclosure": {
            "url": "http://files.smashing.media/articles/five-second-testing-case-study/five-second-testing-case-study.jpg",
            "length": "0",
            "type": "image/jpg"
          },
          "content": "Five-second testing is a popular method of usability research used in the industry, yet in essence, its core belief boils down to virtually a superstition. Eduard Kuric looks under the hood at how first impressions are affected by various factors and how UX researchers and product owners can ensure that the user’s first steps can get off on the right foot.",
          "contentSnippet": "Five-second testing is a popular method of usability research used in the industry, yet in essence, its core belief boils down to virtually a superstition. Eduard Kuric looks under the hood at how first impressions are affected by various factors and how UX researchers and product owners can ensure that the user’s first steps can get off on the right foot.",
          "guid": "https://smashingmagazine.com/2023/12/five-second-testing-case-study/",
          "isoDate": "2023-12-06T10:00:00.000Z"
        },
        {
          "creator": "hello@smashingmagazine.com (Juan Diego Rodríguez)",
          "title": "How Marketing Changed OOP In JavaScript",
          "link": "https://smashingmagazine.com/2023/12/marketing-changed-oop-javascript/",
          "pubDate": "Mon, 04 Dec 2023 14:00:00 GMT",
          "author": "hello@smashingmagazine.com (Juan Diego Rodríguez)",
          "content:encoded": "<p>Even though JavaScript’s name was coined from the Java language, the two languages are worlds apart. JavaScript has more in common with <a href=\"https://en.wikipedia.org/wiki/Lisp_(programming_language\">Lisp</a>&gt;) and <a href=\"https://en.wikipedia.org/wiki/Scheme_(programming_language\">Scheme</a>&gt;), sharing features such as first-class functions and lexical scoping.</p>\n<p>JavaScript also borrows its prototypal inheritance from the <a href=\"https://en.wikipedia.org/wiki/Self_(programming_language\">Self</a>&gt;) language. This inheritance mechanism is perhaps what many — if not most — developers do not spend enough time to understand, mainly because it isn’t a requirement to start working with JavaScript. That characteristic can be seen as either a design flaw or a stroke of genius. That said, JavaScript’s prototypal nature was marketed and hidden behind a “Java for the web” mask. We’ll elaborate more on that as we go on.</p>\n<p>JavaScript isn’t confident in its own prototypal nature, so it gives developers the tools to approach the language without ever having to touch a prototype. This was an attempt to be easily understood by every developer, especially those coming from class-based languages, such as Java, and would later become one of JavaScript’s biggest enemies for years to come: You don’t have to understand how JavaScript works to code in JavaScript.</p>\nWhat Is Classical Object-Oriented Programming?\n<p>Classical <strong>object-oriented programming (OOP)</strong> revolves around the concept of classes and instances and is widely used in languages like Java, C++, C#, and many others. A class is a blueprint or template for creating objects. It defines the structure and behavior of objects that belong to that class and encapsulates properties and methods. On the other hand, objects are instances of classes. When you create an object from a class, you’re essentially creating a specific instance that inherits the structure and behavior defined in the class while also giving each object an individual state.</p>\n<p>OOP has many fundamental concepts, but we will focus on <strong>inheritance</strong>, a mechanism that allows one class to take on the properties and methods of another class. This facilitates code reuse and the creation of a hierarchy of classes.</p>\n<p><img src=\"https://files.smashing.media/articles/marketing-changed-oop-javascript/classical-oop.jpg\" /></p>\nWhat’s Prototypal OOP In JavaScript?\n<p>I will explain the concepts behind prototypal OOP in Javascript, but for an in-depth explanation of how prototypes work, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\">MDN has an excellent overview on the topic</a>.</p>\n<p>Prototypal OOP differs from classical OOP, which is based on classes and instances. In prototypal OOP, there are no classes, only objects, and they are created directly from other objects.</p>\n<p>If we create an object, it will have a built-in property called <code>prototype</code> that holds a reference to its “parent” object prototype so we can access its prototype’s methods and properties. This is what allows us to access methods like <code>.sort()</code> or <code>.forEach()</code> from any array since each array inherits methods from the <code>Array.prototype</code> object.</p>\n<p>The prototype itself is an object, so the prototype will have its own prototype. This creates a chain of objects known as the <strong>prototype chain</strong>. When you access a property or method on an object, JavaScript will first look for it on the object itself. If it’s not found, it will traverse up the prototype chain until it finds the property or reaches the top-level object. It will often end in <code>Object.prototype</code>, which has a <code>null</code> prototype, denoting the end of the chain.</p>\n<p>A crucial difference between classical and prototypal OOP is that we can’t dynamically manipulate a class definition once an object is created. But with JavaScript prototypes, we can add, delete, or change methods and properties from the prototype, affecting the objects down the chain.</p>\n<blockquote>“Objects inherit from objects. What could be more object-oriented than that?”<br /><br />— <a href=\"https://crockford.com/javascript/prototypal.html#:~:text=supply%20the%20member.-,Objects%20inherit%20from%20objects.,them%20new%20fields%20and%20methods.\">Douglas Crockford</a></blockquote>\n\n<p><img src=\"https://files.smashing.media/articles/marketing-changed-oop-javascript/prototypal-oop.jpg\" /></p>\n<h3>What’s The Difference In JavaScript? Spoiler: None</h3>\n<p>So, on paper, the difference is simple. In classical OOP, we instantiate objects from a class, and a class can inherit methods and properties from another class. In prototypal OOP, objects can inherit properties and methods from other objects through their prototype.</p>\n<p>However, in JavaScript, there is not a single difference beyond syntax. Can you spot the difference between the following two code excerpts?</p>\n<div>\n<pre><code>// With Classes\n\nclass Dog {\n  constructor(name, color) {\n    this.name = name;\n\n    this.color = color;\n  }\n\n  bark() {\n    return <code>I am a ${this.color} dog and my name is ${this.name}.</code>;\n  }\n}\n\nconst myDog = new Dog(\"Charlie\", \"brown\");\n\nconsole.log(myDog.name); // Charlie\n\nconsole.log(myDog.bark()); // I am a brown dog and my name is Charlie.\n</code></pre>\n</div>\n\n<div>\n<pre><code>// With Prototypes\n\nfunction Dog(name, color) {\n  this.name = name;\n\n  this.color = color;\n}\n\nDog.prototype.bark = function () {\n  return <code>I am a ${this.color} dog and my name is ${this.name}.</code>;\n};\n\nconst myDog = new Dog(\"Charlie\", \"brown\");\n\nconsole.log(myDog.name); // Charlie\n\nconsole.log(myDog.bark()); // I am a brown dog and my name is Charlie.\n</code></pre>\n</div>\n\n<p>There is no difference, and JavaScript will execute the same code, but the latter example is honest about what JavaScript is doing under the hood, while the former hides it behind syntactic sugar.</p>\n<p>Do I have a problem with the classical approach? Yes and no. An argument can be made that the classical syntax improves readability by having all the code related to the class inside a block scope. On the other hand, it’s misleading and <strong>has led thousands of developers to believe that JavaScript has true classes when a class in JavaScript is no different from any other function object</strong>.</p>\n<p>My biggest issue isn’t pretending that true classes exist but rather that prototypes don’t.</p>\n<p>Consider the following code:</p>\n<div>\n<pre><code>class Dog {\n  constructor(name, color) {\n    this.name = name;\n\n    this.color = color;\n  }\n\n  bark() {\n    return <code>I am a ${this.color} dog and my name is ${this.name}.</code>;\n  }\n}\n\nconst myDog = new Dog(\"Charlie\", \"brown\");\n\nDog.prototype.bark = function () {\n  return \"I am really just another object with a prototype!\";\n};\n\nconsole.log(myDog.bark()); // I am really just another object with a prototype!\"\n</code></pre>\n</div>\n\n<p>Wait, did we just access the class prototype? Yes, because classes don’t exist! They are merely functions returning an object (called constructor functions), and, inevitably, they have a prototype which means we can access its <code>.prototype</code> property.</p>\n<p>It almost looks like JavaScript tries to hide its prototypes. But why?</p>\nThere Are Clues In JavaScript’s History\n<p>In May 1995, <a href=\"https://thehistoryoftheweb.com/postscript/netscape-mosaic-coup/\">Netscape</a> involved JavaScript creator <a href=\"https://en.wikipedia.org/wiki/Brendan_Eich\">Brendan Eich</a> in a project to implement a scripting language into the Netscape browser. The main idea was to implement the Scheme language into the browser due to its minimal approach. The plan changed when Netscape closed a deal with Sun Microsystems, creators of Java, to implement Java on the web. Soon enough, Brendan Eich and Sun Microsystems founder Bill Joy saw the need for a new language. A language that was approachable for people whose main focus wasn’t only programming. A language both for a designer trying to make a website and for an experienced developer coming from Java.</p>\n<p>With this goal in mind, JavaScript was created in 10 days of intense work under the early name of <em>Mocha</em>. It would be changed to <em>LiveScript</em> to market it as a script executing “live” in the browser but in December 1995, it would ultimately be named <em>JavaScript</em> to be marketed along with Java. This deal with Sun Microsystems forced Brendan to accommodate his prototype-based language to Java. <a href=\"https://www.infoworld.com/video/89115/javascript-creator-brendan-eich-on-the-genesis-of-the-popular-programming-language-true-technologis\">According to Brendan Eich</a>, JavaScript was treated as the “sidekick language to Java” and was greatly underfunded in comparison with the Java team:</p>\n<blockquote>“I was thinking the whole time, what should the language be like? Should it be easy to use? Might the syntax even be more like natural language? [...] Well, I’d like to do that, but my management said, “Make it look like Java.”</blockquote>\n\n<p>Eich’s idea for JavaScript was to implement Scheme first-class functions — a feature that would allow callbacks for user events — and OOP based on prototypes from Self. He’s <a href=\"https://brendaneich.com/2008/04/popularity/\">expressed this before</a> on his blog:</p>\n<blockquote>“I’m not proud, but I’m happy that I chose Scheme-ish first-class functions and Self-ish prototypes as the main ingredients.”</blockquote>\n\n<p>JavaScript’s prototypal nature stayed but would specifically be obscured behind a Java facade. Prototypes likely remained in place because Eich implemented Self prototypes from the beginning and they later couldn’t be changed, only hidden. We can find a mixed explanation <a href=\"https://brendaneich.com/2011/01/harmony-of-my-dreams/\">in an old comment on his blog</a>:</p>\n<blockquote>“It is ironic that JS could not have class in 1995 because it would have rivaled Java. It was constrained by both time and a sidekick role.”</blockquote>\n\n<p>Either way, JavaScript became a prototype-based language and the most popular one by far.</p>\nIf Only JavaScript Embraced Its Prototypes\n<p>In the rush between the creation of JavaScript and its mass adoption, there were several other questionable design decisions surrounding prototypes. In his book, <a href=\"https://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742\"><em>JavaScript: The Good Parts</em></a>, Crockford explains the <em>bad</em> parts surrounding JavaScript, such as global variables and the misunderstanding around prototypes.</p>\n<p>As you may have noticed, this article is inspired by Crockford’s book. Although I disagree with many of his opinions about JavaScript’s bad parts, it’s important to note the book was published in 2008 when ECMAScript 4 (ES4) was the stable version of JavaScript. Many years have passed since its publication, and JavaScript has significantly changed in that time. The following are features that I think could have been saved from the language if only JavaScript had embraced its prototypes.</p>\n<h3>The <code>this</code> Value In Different Contexts</h3>\n<p>The <code>this</code> keyword is another one of the things JavaScript added to look like Java. In Java, and classical OOP in general, <code>this</code> refers to the current instance on which the method or constructor is being invoked, just that. However, in JavaScript, we didn’t have class syntax until ES6 but still inherited the <code>this</code> keyword. My problem with <code>this</code> is it can be four different things depending on where is invoked!</p>\n<h4>1. <code>this</code> In The Function Invocation Pattern</h4>\n<p>When <code>this</code> is invoked inside a function call, it will be bound to the global object. It will also be bound to the global object if it’s invoked from the global scope.</p>\n<pre><code>console.log(this); // window\n\nfunction myFunction() {\n  console.log(this);\n}\n\nmyFunction(); // window\n</code></pre>\n\n<p>In strict mode and through the function invocation pattern, <code>this</code> will be <code>undefined</code>.</p>\n<pre><code>function getThis() {\n  \"use strict\";\n\n  return this;\n}\n\ngetThis(); // undefined\n</code></pre>\n\n<h4>2. <code>this</code> In The Method Invocation Pattern</h4>\n<p>If we reference a function as an object’s property, <code>this</code> will be bound to its parent object.</p>\n<pre><code>const dog = {\n  name: \"Sparky\",\n\n  bark: function () {\n    console.log(`Woof, my name is ${this.name}.`);\n  },\n};\n\ndog.bark(); // Woof, my name is Sparky.\n</code></pre>\n\n<p>Arrow functions do not have their own <code>this</code>, but instead, they inherit <code>this</code> from their parent scope at creation.</p>\n<pre><code>const dog = {\n  name: \"Sparky\",\n\n  bark: () =&gt; {\n    console.log(`Woof, my name is ${this.name}.`);\n  },\n};\n\ndog.bark(); // Woof, my name is undefined.\n</code></pre>\n\n<p>In this case, <code>this</code> was bound to the global object instead of <code>dog</code>, hence <code>this.name</code> is <code>undefined</code>.</p>\n<h4>3. The Constructor Invocation Pattern</h4>\n<p>If we invoke a function with the <code>new</code> prefix, a new empty object will be created, and <code>this</code> will be bound to that object.</p>\n<pre><code>function Dog(name) {\n  this.name = name;\n\n  this.bark = function () {\n    console.log(`Woof, my name is ${this.name}.`);\n  };\n}\n\nconst myDog = new Dog(\"Coco\");\n\nmyDog.bark(); // Woof, my name is Coco.\n</code></pre>\n\n<p>We could also employ <code>this</code> from the function’s prototype to access the object’s properties, which could give us a more valid reason to use it.</p>\n<pre><code>function Dog(name) {\n  this.name = name;\n}\n\nDog.prototype.bark = function () {\n  console.log(`Woof, my name is ${this.name}.`);\n};\n\nconst myDog = new Dog(\"Coco\");\n\nmyDog.bark(); // Woof, my name is Coco.\n</code></pre>\n\n<h4>4. The <code>apply</code> Invocation Pattern</h4>\n<p>Lastly, each function inherits an <code>apply</code> method from the function prototype that takes two parameters. The first parameter is the value that will be bound to <code>this</code> inside the function, and the second is an array that will be used as the function parameters.</p>\n<pre><code>// Bounding `this` to another object\n\nfunction bark() {\n  console.log(`Woof, my name is ${this.name}.`);\n}\n\nconst myDog = {\n  name: \"Milo\",\n};\n\nbark.apply(myDog); // Woof, my name is Milo.\n\n// Using the array parameter\n\nconst numbers = [3, 10, 4, 6, 9];\n\nconst max = Math.max.apply(null, numbers);\n\nconsole.log(max); // 10\n</code></pre>\n\n<p>As you can see, <code>this</code> can be almost anything and shouldn’t be in JavaScript in the first place. Approaches like using <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"><code>bind()</code></a> are solutions to a problem that shouldn’t even exist. Fortunately, <code>this</code> is completely avoidable in modern JavaScript, and you can save yourself several headaches if you learn how to dodge it; an advantage that ES6 class users can’t enjoy.</p>\n<p>Crockford has a nice anecdote on the topic from his book:</p>\n<blockquote>“This is a demonstrative pronoun. Just having <code>this</code> in the language makes the language harder to talk about. It is like pair programming with Abbott and Costello.”</blockquote>\n\n<p><em>“But if we want to create a function constructor, we will need to use <code>this</code>.”</em> Not necessarily! In the following example, we can make a function constructor that doesn’t use <code>this</code> or <code>new</code> to work.</p>\n<pre><code>function counterConstructor() {\n  let counter = 0;\n\n  function getCounter() {\n    return counter;\n  }\n\n  function up() {\n    counter += 1;\n\n    return counter;\n  }\n\n  function down() {\n    counter -= 1;\n\n    return counter;\n  }\n\n  return {\n    getCounter,\n\n    up,\n\n    down,\n  };\n}\n\nconst myCounter = counterConstructor();\n\nmyCounter.up(); // 1\n\nmyCounter.down(); // 0\n</code></pre>\n\n<p>We just created a function constructor without using <code>this</code> or <code>new</code>! And it comes with a straightforward syntax. A downside you could see is that objects created from <code>counterConstructor</code> won’t have access to its prototype, so we can’t add methods or properties from <code>counterConstructor.prototype</code>.</p>\n<p>But do we need this? Of course, we will need to reuse our code, but there are better approaches that we will see later.</p>\n<h3>The <code>new</code> Prefix</h3>\n<p>In <em>JavaScript: The Good Parts</em>, Crockford argues that we shouldn’t use the <code>new</code> prefix simply because there is no guarantee that we will remember to use it in the intended functions. I think that it’s an easy-to-spot mistake and also avoidable by capitalizing the constructor functions you intend to use with <code>new</code>. And nowadays, linters will warn us when we call a capitalized function without <code>new</code>, or vice-versa.</p>\n<p>A better argument is simply that using <code>new</code> forces us to use <code>this</code> inside our constructor functions or “classes,” and as we saw earlier, we are better off avoiding <code>this</code> in the first place.</p>\n<h3>The Multiple Ways To Access Prototypes</h3>\n<p>For the historical reasons we already reviewed, we can understand why JavaScript doesn’t embrace its prototypes. By extension, we don’t have tools to mingle with prototypes as straightforward as we would want, but rather devious attempts to manipulate the prototype chain. Things get worse when across documentation, we can read different jargon around prototypes.</p>\n<h4>The Difference Between <code>[[Prototype]]</code>, <code>__proto__</code>, And <code>.prototype</code></h4>\n<p>To make the reading experience more pleasant, let’s go over the differences between these terms.</p>\n<ul>\n<li><strong><code>[[Prototype]]</code></strong> is an internal property that holds a reference to the object’s prototype. It’s enclosed in double square brackets, which means it typically cannot be accessed using normal notation.</li>\n<li><strong><code>__proto__</code></strong> can refer to two possible properties:<ul>\n<li>It can refer to a property from any <code>Object.prototype</code> object that exposes the hidden <code>[[Prototype]]</code> property. It’s deprecated and ill-performing.</li>\n<li>It can refer to an optional property we can add when creating an object literal. The object’s prototype will point to the value we give it.</li>\n</ul>\n</li>\n<li><strong><code>.prototype</code></strong> is a property exclusive to functions or classes (excluding arrow functions). When invoked using the <code>new</code> prefix, the instantiated object’s prototype will point to the function’s <code>.prototype</code>.</li>\n</ul>\n<p>We can now see all the ways we can modify prototypes in JavaScript. After reviewing, we will notice they all fall short in at least some aspect.</p>\n<h3>Using The <code>__proto__</code> Literal Property At Initialization</h3>\n<p>When creating a JavaScript object using object literals, we can add a <code>__proto__</code> property. The created object will point its <code>[[Prototoype]]</code> to the value given in <code>__proto__</code>. In a prior example, objects created from our function constructor didn’t have access to the constructor prototype. We can use the <code>__proto__</code> property at initialization to change this without using <code>this</code> or <code>new</code>.</p>\n<pre><code>function counterConstructor() {\n  let counter = 0;\n\n  function getCounter() {\n    return counter;\n  }\n\n  function up() {\n    counter += 1;\n\n    return counter;\n  }\n\n  function down() {\n    counter -= 1;\n\n    return counter;\n  }\n\n  return {\n    getCounter,\n\n    up,\n\n    down,\n\n    __proto__: counterConstructor.prototype,\n  };\n}\n</code></pre>\n\n<p>The advantage of linking the new object’s prototype to the function constructor would be that we can extend its methods from the constructor prototype. But what good would it be if we needed to use <code>this</code> again?</p>\n<pre><code>const myCounter = counterConstructor();\n\ncounterConstructor.prototype.printDouble = function () {\n  return this.getCounter() * 2;\n};\n\nmyCounter.up(); // 1\n\nmyCounter.up(); // 2\n\nmyCounter.printDouble(); // 4\n</code></pre>\n\n<p>We didn’t even modify the <code>count</code> internal value but instead printed it double. So, a setter method would be necessary to manipulate its state from outside the initial function constructor declaration. However, we are over-complicating our code since we could have simply added a <code>double</code> method inside our function.</p>\n<pre><code>function counterConstructor() {\n  let counter = 0;\n\n  function getCounter() {\n    return counter;\n  }\n\n  function up() {\n    counter += 1;\n\n    return counter;\n  }\n\n  function down() {\n    counter -= 1;\n\n    return counter;\n  }\n\n  function double() {\n    counter = counter * 2;\n\n    return counter;\n  }\n\n  return {\n    getCounter,\n\n    up,\n\n    down,\n\n    double,\n  };\n}\n\nconst myCounter = counterConstructor();\n\nmyCounter.up(); // 1\n\nmyCounter.up(); // 2\n\nmyCounter.double(); // 4\n</code></pre>\n\n<p>Using <code>__proto__</code> is overkill in practice.</p>\n<p>It’s vital to note that <code>__proto__</code> must only be used when initializing a new object through an object literal. Using the <code>__proto__</code> accessor in <code>Object.prototype.__proto__</code> will change the object’s <code>[[Prototoype]]</code> after initialization, disrupting lots of optimizations done under the hood by JavaScript engines. That’s why <strong><code>Object.prototype.__proto__</code> is ill-performant and deprecated</strong>.</p>\n<h4><code>Object.create()</code></h4>\n<p><code>Object.create()</code> returns a new object whose <code>[[Prototype]]</code> will be the first argument of the function. It also has a second argument that lets you define additional properties to the new objects. However, it’s more flexible and readable to create an object using an object literal. Hence, its only practical use would be to create an object without a prototype using <code>Object.create(null)</code> since all objects created using object literals are automatically linked to <code>Object.prototype</code>.</p>\n<h4><code>Object.setPrototypeOf()</code></h4>\n<p><code>Object.setPrototypeOf()</code> takes two objects as arguments and will mutate the prototype chain from the former argument to the latter. As we saw earlier, switching an object’s prototype after initialization is ill-performing, so avoid it at all costs.</p>\n<h3>Encapsulation And Private Classes</h3>\n<p>My last argument against classes is the lack of privacy and encapsulation. Take, for example, the following class syntax:</p>\n<pre><code>class Cat {\n  constructor(name) {\n    this.name = name;\n  }\n\n  meow() {\n    console.log(`Meow! My name is ${this.name}.`);\n  }\n}\n\nconst myCat = new Cat(\"Gala\");\n\nmyCat.meow(); // Meow! My name is Gala.\n\nmyCat.name = \"Pumpkin\";\n\nmyCat.meow(); // Meow! My name is Pumpkin.\n</code></pre>\n\n<p>We don’t have any privacy! All properties are public. We can try to mitigate this with closures:</p>\n<pre><code>class Cat {\n  constructor(name) {\n    this.getName = function () {\n      return name;\n    };\n  }\n\n  meow() {\n    console.log(`Meow! My name is ${this.name}.`);\n  }\n}\n\nconst myCat = new Cat(\"Gala\");\n\nmyCat.meow(); // Meow! My name is undefined.\n</code></pre>\n\n<p>Oops, now <code>this.name</code> is <code>undefined</code> outside the constructor’s scope. We have to change <code>this.name</code> to <code>this.getName()</code> so it can work properly.</p>\n<pre><code>class Cat {\n  constructor(name) {\n    this.getName = function () {\n      return name;\n    };\n  }\n\n  meow() {\n    console.log(`Meow! My name is ${this.getName()}.`);\n  }\n}\n\nconst myCat = new Cat(\"Gala\");\n\nmyCat.meow(); // Meow! My name is Gala.\n</code></pre>\n\n<p>This is with only one argument, so you can imagine how unnecessarily repetitive our code would be the more arguments we add. Besides, we can still modify our object methods:</p>\n<pre><code>myCat.meow = function () {\n  console.log(`Meow! ${this.getName()} is a bad kitten.`);\n};\n\nmyCat.meow(); // Meow! Gala is a bad kitten.\n</code></pre>\n\n<p>We can save and implement better privacy if we use our own function constructors and even make our methods immutable using <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\"><code>Object.freeze()</code></a>!</p>\n<pre><code>function catConstructor(name) {\n  function getName() {\n    return name;\n  }\n\n  function meow() {\n    console.log(`Meow! My name is ${name}.`);\n  }\n\n  return Object.freeze({\n    getName,\n\n    meow,\n  });\n}\n\nconst myCat = catConstructor(\"Loaf\");\n\nmyCat.meow(); // Meow! My name is Loaf.\n</code></pre>\n\n<p>And trying to modify the object’s methods will fail silently.</p>\n<pre><code>myCat.meow = function () {\n  console.log(`Meow! ${this.getName()} is a bad Kitten.`);\n};\n\nmyCat.meow(); // Meow! My name is Loaf.\n</code></pre>\n\n<p>And yes, I am aware of the recent proposal for <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_class_fields\">private class fields</a>. But do we really need even <em>more</em> new syntax when we could accomplish the same using custom constructor functions and closures?</p>\nSo, Classes Or Prototypes In JavaScript?\n<p>In Crockford’s more recent book, <a href=\"https://www.amazon.com/dp/1949815005/wrrrldwideweb\"><em>How JavaScript Works</em></a> (<a href=\"https://www.crockford.com/image/howjsworks.pdf\">PDF</a>), we can see a better option than using Prototypes or Classes for code reuse: <strong>Composition</strong>!</p>\n<p>Using prototypes feels like using a half-finished feature, while classes can lead to overcomplicated and unnecessary hierarchies (and also to <code>this</code> ). Fortunately, JavaScript is a multi-paradigm language, and forcing ourselves to only use classes or prototypes for code reusability is constraining ourselves with imaginary ropes.</p>\n<p>As Crockford says in his more recent book:</p>\n<blockquote>“[I]nstead of <strong>same as except</strong> we can get a <strong>little bit of this</strong> and <strong>a little bit of that</strong>.”<br /><br />— Douglas Crockford, <a href=\"https://www.amazon.com/dp/1949815005/wrrrldwideweb\"><em>How JavaScript Works</em></a></blockquote>\n\n<p>Instead of a function constructor or class inheriting from another, we can have a set of constructors and combine them when needed to create a specialized object.</p>\n<div>\n<pre><code>function speakerConstructor(name, message) {\n  function talk() {\n    return <code>Hi, mi name is ${name} and I want to tell something: ${message}.</code>;\n  }\n\n  return Object.freeze({\n    talk,\n  });\n}\n\nfunction loudSpeakerConstructor(name, message) {\n  const {talk} = speakerConstructor(name, message);\n\n  function yell() {\n    return talk().toUpperCase();\n  }\n\n  return Object.freeze({\n    talk,\n\n    yell,\n  });\n}\n\nconst mySpeaker = loudSpeakerConstructor(\"Juan\", \"You look nice!\");\n\nmySpeaker.talk(); // Hi, my name is Juan and I want to tell something: You look nice!\n\nmySpeaker.yell(); // HI, MY NAME IS JUAN AND I WANT TO TELL SOMETHING: YOU LOOK NICE!\n</code></pre>\n</div>\n\n<p>Without the need for <code>this</code> and <code>new</code> and classes or prototypes, we achieve a reusable function constructor with full privacy and encapsulation.</p>\nConclusion\n<p>Yes, JavaScript was made in 10 days in a rush; yes, it was tainted by marketing; and yes, it has a long set of useless and dangerous parts. Yet is a beautiful language and fuels a lot of the innovation happening in web development today, so it clearly has done something good!</p>\n<p>I don’t think we will see a day when prototypes receive the features they deserve, nor one in which we stop using classical syntactic sugar, but we can decide to avoid them when possible.</p>\n<p>Unfortunately, this conscious decision to stick to the good parts isn’t exclusive to JavaScript OOP since, between the rush into existence, the language brought a lot of other dubious features that we are better off not using. Maybe we can tackle them in a future article, but in the meantime, we will have to acknowledge their presence and make the conscious decision to keep learning and understanding the language to know which parts to use and which parts to ignore.</p>\n<h3>References</h3>\n<ul>\n<li><a href=\"https://brendaneich.com/\">Brendan Eich Personal Website</a> (N.D.)</li>\n<li><a href=\"https://www.amazon.com/Douglas-Crockford/dp/0596517742\"><em>JavaScript: The Good Parts</em></a>, Douglas Crockford (O’Reilly, 2008)</li>\n<li><a href=\"https://www.amazon.com/Douglas-Crockford-ebook/dp/B07NLM78D9/\"><em>How JavaScript Works</em></a>, Douglas Crockford (Virgule-Solidus, 2018)</li>\n<li><a href=\"https://crockford.com/javascript/\">Douglas Crockford Personal Website</a> (N.D.)</li>\n<li><a href=\"https://www.infoworld.com/video/89115/javascript-creator-brendan-eich-on-the-genesis-of-the-popular-programming-language-true-technologis\">Brendan Eich’s Interview Conducted by Eric Knorr</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=krB0enBeSiE\">Brendan Eich’s Interview Conducted by Lex Fridman</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web\">Mozilla Foundation Documentation</a> (N.D.)</li>\n</ul>\n",
          "content:encodedSnippet": "Even though JavaScript’s name was coined from the Java language, the two languages are worlds apart. JavaScript has more in common with Lisp>) and Scheme>), sharing features such as first-class functions and lexical scoping.\nJavaScript also borrows its prototypal inheritance from the Self>) language. This inheritance mechanism is perhaps what many — if not most — developers do not spend enough time to understand, mainly because it isn’t a requirement to start working with JavaScript. That characteristic can be seen as either a design flaw or a stroke of genius. That said, JavaScript’s prototypal nature was marketed and hidden behind a “Java for the web” mask. We’ll elaborate more on that as we go on.\nJavaScript isn’t confident in its own prototypal nature, so it gives developers the tools to approach the language without ever having to touch a prototype. This was an attempt to be easily understood by every developer, especially those coming from class-based languages, such as Java, and would later become one of JavaScript’s biggest enemies for years to come: You don’t have to understand how JavaScript works to code in JavaScript.\nClassical object-oriented programming (OOP) revolves around the concept of classes and instances and is widely used in languages like Java, C++, C#, and many others. A class is a blueprint or template for creating objects. It defines the structure and behavior of objects that belong to that class and encapsulates properties and methods. On the other hand, objects are instances of classes. When you create an object from a class, you’re essentially creating a specific instance that inherits the structure and behavior defined in the class while also giving each object an individual state.\nOOP has many fundamental concepts, but we will focus on inheritance, a mechanism that allows one class to take on the properties and methods of another class. This facilitates code reuse and the creation of a hierarchy of classes.\n\nI will explain the concepts behind prototypal OOP in Javascript, but for an in-depth explanation of how prototypes work, MDN has an excellent overview on the topic.\nPrototypal OOP differs from classical OOP, which is based on classes and instances. In prototypal OOP, there are no classes, only objects, and they are created directly from other objects.\nIf we create an object, it will have a built-in property called prototype that holds a reference to its “parent” object prototype so we can access its prototype’s methods and properties. This is what allows us to access methods like .sort() or .forEach() from any array since each array inherits methods from the Array.prototype object.\nThe prototype itself is an object, so the prototype will have its own prototype. This creates a chain of objects known as the prototype chain. When you access a property or method on an object, JavaScript will first look for it on the object itself. If it’s not found, it will traverse up the prototype chain until it finds the property or reaches the top-level object. It will often end in Object.prototype, which has a null prototype, denoting the end of the chain.\nA crucial difference between classical and prototypal OOP is that we can’t dynamically manipulate a class definition once an object is created. But with JavaScript prototypes, we can add, delete, or change methods and properties from the prototype, affecting the objects down the chain.\n“Objects inherit from objects. What could be more object-oriented than that?”\n— Douglas Crockford\n\nWhat’s The Difference In JavaScript? Spoiler: None\nSo, on paper, the difference is simple. In classical OOP, we instantiate objects from a class, and a class can inherit methods and properties from another class. In prototypal OOP, objects can inherit properties and methods from other objects through their prototype.\nHowever, in JavaScript, there is not a single difference beyond syntax. Can you spot the difference between the following two code excerpts?\n// With Classes\n\nclass Dog {\n  constructor(name, color) {\n    this.name = name;\n\n    this.color = color;\n  }\n\n  bark() {\n    return I am a ${this.color} dog and my name is ${this.name}.;\n  }\n}\n\nconst myDog = new Dog(\"Charlie\", \"brown\");\n\nconsole.log(myDog.name); // Charlie\n\nconsole.log(myDog.bark()); // I am a brown dog and my name is Charlie.\n\n// With Prototypes\n\nfunction Dog(name, color) {\n  this.name = name;\n\n  this.color = color;\n}\n\nDog.prototype.bark = function () {\n  return I am a ${this.color} dog and my name is ${this.name}.;\n};\n\nconst myDog = new Dog(\"Charlie\", \"brown\");\n\nconsole.log(myDog.name); // Charlie\n\nconsole.log(myDog.bark()); // I am a brown dog and my name is Charlie.\n\nThere is no difference, and JavaScript will execute the same code, but the latter example is honest about what JavaScript is doing under the hood, while the former hides it behind syntactic sugar.\nDo I have a problem with the classical approach? Yes and no. An argument can be made that the classical syntax improves readability by having all the code related to the class inside a block scope. On the other hand, it’s misleading and has led thousands of developers to believe that JavaScript has true classes when a class in JavaScript is no different from any other function object.\nMy biggest issue isn’t pretending that true classes exist but rather that prototypes don’t.\nConsider the following code:\nclass Dog {\n  constructor(name, color) {\n    this.name = name;\n\n    this.color = color;\n  }\n\n  bark() {\n    return I am a ${this.color} dog and my name is ${this.name}.;\n  }\n}\n\nconst myDog = new Dog(\"Charlie\", \"brown\");\n\nDog.prototype.bark = function () {\n  return \"I am really just another object with a prototype!\";\n};\n\nconsole.log(myDog.bark()); // I am really just another object with a prototype!\"\n\nWait, did we just access the class prototype? Yes, because classes don’t exist! They are merely functions returning an object (called constructor functions), and, inevitably, they have a prototype which means we can access its .prototype property.\nIt almost looks like JavaScript tries to hide its prototypes. But why?\nIn May 1995, Netscape involved JavaScript creator Brendan Eich in a project to implement a scripting language into the Netscape browser. The main idea was to implement the Scheme language into the browser due to its minimal approach. The plan changed when Netscape closed a deal with Sun Microsystems, creators of Java, to implement Java on the web. Soon enough, Brendan Eich and Sun Microsystems founder Bill Joy saw the need for a new language. A language that was approachable for people whose main focus wasn’t only programming. A language both for a designer trying to make a website and for an experienced developer coming from Java.\nWith this goal in mind, JavaScript was created in 10 days of intense work under the early name of Mocha. It would be changed to LiveScript to market it as a script executing “live” in the browser but in December 1995, it would ultimately be named JavaScript to be marketed along with Java. This deal with Sun Microsystems forced Brendan to accommodate his prototype-based language to Java. According to Brendan Eich, JavaScript was treated as the “sidekick language to Java” and was greatly underfunded in comparison with the Java team:\n“I was thinking the whole time, what should the language be like? Should it be easy to use? Might the syntax even be more like natural language? [...] Well, I’d like to do that, but my management said, “Make it look like Java.”\nEich’s idea for JavaScript was to implement Scheme first-class functions — a feature that would allow callbacks for user events — and OOP based on prototypes from Self. He’s expressed this before on his blog:\n“I’m not proud, but I’m happy that I chose Scheme-ish first-class functions and Self-ish prototypes as the main ingredients.”\nJavaScript’s prototypal nature stayed but would specifically be obscured behind a Java facade. Prototypes likely remained in place because Eich implemented Self prototypes from the beginning and they later couldn’t be changed, only hidden. We can find a mixed explanation in an old comment on his blog:\n“It is ironic that JS could not have class in 1995 because it would have rivaled Java. It was constrained by both time and a sidekick role.”\nEither way, JavaScript became a prototype-based language and the most popular one by far.\nIn the rush between the creation of JavaScript and its mass adoption, there were several other questionable design decisions surrounding prototypes. In his book, JavaScript: The Good Parts, Crockford explains the bad parts surrounding JavaScript, such as global variables and the misunderstanding around prototypes.\nAs you may have noticed, this article is inspired by Crockford’s book. Although I disagree with many of his opinions about JavaScript’s bad parts, it’s important to note the book was published in 2008 when ECMAScript 4 (ES4) was the stable version of JavaScript. Many years have passed since its publication, and JavaScript has significantly changed in that time. The following are features that I think could have been saved from the language if only JavaScript had embraced its prototypes.\nThe this Value In Different Contexts\nThe this keyword is another one of the things JavaScript added to look like Java. In Java, and classical OOP in general, this refers to the current instance on which the method or constructor is being invoked, just that. However, in JavaScript, we didn’t have class syntax until ES6 but still inherited the this keyword. My problem with this is it can be four different things depending on where is invoked!\n1. this In The Function Invocation Pattern\nWhen this is invoked inside a function call, it will be bound to the global object. It will also be bound to the global object if it’s invoked from the global scope.\nconsole.log(this); // window\n\nfunction myFunction() {\n  console.log(this);\n}\n\nmyFunction(); // window\n\nIn strict mode and through the function invocation pattern, this will be undefined.\nfunction getThis() {\n  \"use strict\";\n\n  return this;\n}\n\ngetThis(); // undefined\n\n2. this In The Method Invocation Pattern\nIf we reference a function as an object’s property, this will be bound to its parent object.\nconst dog = {\n  name: \"Sparky\",\n\n  bark: function () {\n    console.log(`Woof, my name is ${this.name}.`);\n  },\n};\n\ndog.bark(); // Woof, my name is Sparky.\n\nArrow functions do not have their own this, but instead, they inherit this from their parent scope at creation.\nconst dog = {\n  name: \"Sparky\",\n\n  bark: () => {\n    console.log(`Woof, my name is ${this.name}.`);\n  },\n};\n\ndog.bark(); // Woof, my name is undefined.\n\nIn this case, this was bound to the global object instead of dog, hence this.name is undefined.\n3. The Constructor Invocation Pattern\nIf we invoke a function with the new prefix, a new empty object will be created, and this will be bound to that object.\nfunction Dog(name) {\n  this.name = name;\n\n  this.bark = function () {\n    console.log(`Woof, my name is ${this.name}.`);\n  };\n}\n\nconst myDog = new Dog(\"Coco\");\n\nmyDog.bark(); // Woof, my name is Coco.\n\nWe could also employ this from the function’s prototype to access the object’s properties, which could give us a more valid reason to use it.\nfunction Dog(name) {\n  this.name = name;\n}\n\nDog.prototype.bark = function () {\n  console.log(`Woof, my name is ${this.name}.`);\n};\n\nconst myDog = new Dog(\"Coco\");\n\nmyDog.bark(); // Woof, my name is Coco.\n\n4. The apply Invocation Pattern\nLastly, each function inherits an apply method from the function prototype that takes two parameters. The first parameter is the value that will be bound to this inside the function, and the second is an array that will be used as the function parameters.\n// Bounding `this` to another object\n\nfunction bark() {\n  console.log(`Woof, my name is ${this.name}.`);\n}\n\nconst myDog = {\n  name: \"Milo\",\n};\n\nbark.apply(myDog); // Woof, my name is Milo.\n\n// Using the array parameter\n\nconst numbers = [3, 10, 4, 6, 9];\n\nconst max = Math.max.apply(null, numbers);\n\nconsole.log(max); // 10\n\nAs you can see, this can be almost anything and shouldn’t be in JavaScript in the first place. Approaches like using bind() are solutions to a problem that shouldn’t even exist. Fortunately, this is completely avoidable in modern JavaScript, and you can save yourself several headaches if you learn how to dodge it; an advantage that ES6 class users can’t enjoy.\nCrockford has a nice anecdote on the topic from his book:\n“This is a demonstrative pronoun. Just having this in the language makes the language harder to talk about. It is like pair programming with Abbott and Costello.”\n“But if we want to create a function constructor, we will need to use this.” Not necessarily! In the following example, we can make a function constructor that doesn’t use this or new to work.\nfunction counterConstructor() {\n  let counter = 0;\n\n  function getCounter() {\n    return counter;\n  }\n\n  function up() {\n    counter += 1;\n\n    return counter;\n  }\n\n  function down() {\n    counter -= 1;\n\n    return counter;\n  }\n\n  return {\n    getCounter,\n\n    up,\n\n    down,\n  };\n}\n\nconst myCounter = counterConstructor();\n\nmyCounter.up(); // 1\n\nmyCounter.down(); // 0\n\nWe just created a function constructor without using this or new! And it comes with a straightforward syntax. A downside you could see is that objects created from counterConstructor won’t have access to its prototype, so we can’t add methods or properties from counterConstructor.prototype.\nBut do we need this? Of course, we will need to reuse our code, but there are better approaches that we will see later.\nThe new Prefix\nIn JavaScript: The Good Parts, Crockford argues that we shouldn’t use the new prefix simply because there is no guarantee that we will remember to use it in the intended functions. I think that it’s an easy-to-spot mistake and also avoidable by capitalizing the constructor functions you intend to use with new. And nowadays, linters will warn us when we call a capitalized function without new, or vice-versa.\nA better argument is simply that using new forces us to use this inside our constructor functions or “classes,” and as we saw earlier, we are better off avoiding this in the first place.\nThe Multiple Ways To Access Prototypes\nFor the historical reasons we already reviewed, we can understand why JavaScript doesn’t embrace its prototypes. By extension, we don’t have tools to mingle with prototypes as straightforward as we would want, but rather devious attempts to manipulate the prototype chain. Things get worse when across documentation, we can read different jargon around prototypes.\nThe Difference Between [[Prototype]], __proto__, And .prototype\nTo make the reading experience more pleasant, let’s go over the differences between these terms.\n[[Prototype]] is an internal property that holds a reference to the object’s prototype. It’s enclosed in double square brackets, which means it typically cannot be accessed using normal notation.\n__proto__ can refer to two possible properties:\nIt can refer to a property from any Object.prototype object that exposes the hidden [[Prototype]] property. It’s deprecated and ill-performing.\nIt can refer to an optional property we can add when creating an object literal. The object’s prototype will point to the value we give it.\n.prototype is a property exclusive to functions or classes (excluding arrow functions). When invoked using the new prefix, the instantiated object’s prototype will point to the function’s .prototype.\nWe can now see all the ways we can modify prototypes in JavaScript. After reviewing, we will notice they all fall short in at least some aspect.\nUsing The __proto__ Literal Property At Initialization\nWhen creating a JavaScript object using object literals, we can add a __proto__ property. The created object will point its [[Prototoype]] to the value given in __proto__. In a prior example, objects created from our function constructor didn’t have access to the constructor prototype. We can use the __proto__ property at initialization to change this without using this or new.\nfunction counterConstructor() {\n  let counter = 0;\n\n  function getCounter() {\n    return counter;\n  }\n\n  function up() {\n    counter += 1;\n\n    return counter;\n  }\n\n  function down() {\n    counter -= 1;\n\n    return counter;\n  }\n\n  return {\n    getCounter,\n\n    up,\n\n    down,\n\n    __proto__: counterConstructor.prototype,\n  };\n}\n\nThe advantage of linking the new object’s prototype to the function constructor would be that we can extend its methods from the constructor prototype. But what good would it be if we needed to use this again?\nconst myCounter = counterConstructor();\n\ncounterConstructor.prototype.printDouble = function () {\n  return this.getCounter() * 2;\n};\n\nmyCounter.up(); // 1\n\nmyCounter.up(); // 2\n\nmyCounter.printDouble(); // 4\n\nWe didn’t even modify the count internal value but instead printed it double. So, a setter method would be necessary to manipulate its state from outside the initial function constructor declaration. However, we are over-complicating our code since we could have simply added a double method inside our function.\nfunction counterConstructor() {\n  let counter = 0;\n\n  function getCounter() {\n    return counter;\n  }\n\n  function up() {\n    counter += 1;\n\n    return counter;\n  }\n\n  function down() {\n    counter -= 1;\n\n    return counter;\n  }\n\n  function double() {\n    counter = counter * 2;\n\n    return counter;\n  }\n\n  return {\n    getCounter,\n\n    up,\n\n    down,\n\n    double,\n  };\n}\n\nconst myCounter = counterConstructor();\n\nmyCounter.up(); // 1\n\nmyCounter.up(); // 2\n\nmyCounter.double(); // 4\n\nUsing __proto__ is overkill in practice.\nIt’s vital to note that __proto__ must only be used when initializing a new object through an object literal. Using the __proto__ accessor in Object.prototype.__proto__ will change the object’s [[Prototoype]] after initialization, disrupting lots of optimizations done under the hood by JavaScript engines. That’s why Object.prototype.__proto__ is ill-performant and deprecated.\nObject.create()\nObject.create() returns a new object whose [[Prototype]] will be the first argument of the function. It also has a second argument that lets you define additional properties to the new objects. However, it’s more flexible and readable to create an object using an object literal. Hence, its only practical use would be to create an object without a prototype using Object.create(null) since all objects created using object literals are automatically linked to Object.prototype.\nObject.setPrototypeOf()\nObject.setPrototypeOf() takes two objects as arguments and will mutate the prototype chain from the former argument to the latter. As we saw earlier, switching an object’s prototype after initialization is ill-performing, so avoid it at all costs.\nEncapsulation And Private Classes\nMy last argument against classes is the lack of privacy and encapsulation. Take, for example, the following class syntax:\nclass Cat {\n  constructor(name) {\n    this.name = name;\n  }\n\n  meow() {\n    console.log(`Meow! My name is ${this.name}.`);\n  }\n}\n\nconst myCat = new Cat(\"Gala\");\n\nmyCat.meow(); // Meow! My name is Gala.\n\nmyCat.name = \"Pumpkin\";\n\nmyCat.meow(); // Meow! My name is Pumpkin.\n\nWe don’t have any privacy! All properties are public. We can try to mitigate this with closures:\nclass Cat {\n  constructor(name) {\n    this.getName = function () {\n      return name;\n    };\n  }\n\n  meow() {\n    console.log(`Meow! My name is ${this.name}.`);\n  }\n}\n\nconst myCat = new Cat(\"Gala\");\n\nmyCat.meow(); // Meow! My name is undefined.\n\nOops, now this.name is undefined outside the constructor’s scope. We have to change this.name to this.getName() so it can work properly.\nclass Cat {\n  constructor(name) {\n    this.getName = function () {\n      return name;\n    };\n  }\n\n  meow() {\n    console.log(`Meow! My name is ${this.getName()}.`);\n  }\n}\n\nconst myCat = new Cat(\"Gala\");\n\nmyCat.meow(); // Meow! My name is Gala.\n\nThis is with only one argument, so you can imagine how unnecessarily repetitive our code would be the more arguments we add. Besides, we can still modify our object methods:\nmyCat.meow = function () {\n  console.log(`Meow! ${this.getName()} is a bad kitten.`);\n};\n\nmyCat.meow(); // Meow! Gala is a bad kitten.\n\nWe can save and implement better privacy if we use our own function constructors and even make our methods immutable using Object.freeze()!\nfunction catConstructor(name) {\n  function getName() {\n    return name;\n  }\n\n  function meow() {\n    console.log(`Meow! My name is ${name}.`);\n  }\n\n  return Object.freeze({\n    getName,\n\n    meow,\n  });\n}\n\nconst myCat = catConstructor(\"Loaf\");\n\nmyCat.meow(); // Meow! My name is Loaf.\n\nAnd trying to modify the object’s methods will fail silently.\nmyCat.meow = function () {\n  console.log(`Meow! ${this.getName()} is a bad Kitten.`);\n};\n\nmyCat.meow(); // Meow! My name is Loaf.\n\nAnd yes, I am aware of the recent proposal for private class fields. But do we really need even more new syntax when we could accomplish the same using custom constructor functions and closures?\nIn Crockford’s more recent book, How JavaScript Works (PDF), we can see a better option than using Prototypes or Classes for code reuse: Composition!\nUsing prototypes feels like using a half-finished feature, while classes can lead to overcomplicated and unnecessary hierarchies (and also to this ). Fortunately, JavaScript is a multi-paradigm language, and forcing ourselves to only use classes or prototypes for code reusability is constraining ourselves with imaginary ropes.\nAs Crockford says in his more recent book:\n“[I]nstead of same as except we can get a little bit of this and a little bit of that.”\n— Douglas Crockford, How JavaScript Works\nInstead of a function constructor or class inheriting from another, we can have a set of constructors and combine them when needed to create a specialized object.\nfunction speakerConstructor(name, message) {\n  function talk() {\n    return Hi, mi name is ${name} and I want to tell something: ${message}.;\n  }\n\n  return Object.freeze({\n    talk,\n  });\n}\n\nfunction loudSpeakerConstructor(name, message) {\n  const {talk} = speakerConstructor(name, message);\n\n  function yell() {\n    return talk().toUpperCase();\n  }\n\n  return Object.freeze({\n    talk,\n\n    yell,\n  });\n}\n\nconst mySpeaker = loudSpeakerConstructor(\"Juan\", \"You look nice!\");\n\nmySpeaker.talk(); // Hi, my name is Juan and I want to tell something: You look nice!\n\nmySpeaker.yell(); // HI, MY NAME IS JUAN AND I WANT TO TELL SOMETHING: YOU LOOK NICE!\n\nWithout the need for this and new and classes or prototypes, we achieve a reusable function constructor with full privacy and encapsulation.\nYes, JavaScript was made in 10 days in a rush; yes, it was tainted by marketing; and yes, it has a long set of useless and dangerous parts. Yet is a beautiful language and fuels a lot of the innovation happening in web development today, so it clearly has done something good!\nI don’t think we will see a day when prototypes receive the features they deserve, nor one in which we stop using classical syntactic sugar, but we can decide to avoid them when possible.\nUnfortunately, this conscious decision to stick to the good parts isn’t exclusive to JavaScript OOP since, between the rush into existence, the language brought a lot of other dubious features that we are better off not using. Maybe we can tackle them in a future article, but in the meantime, we will have to acknowledge their presence and make the conscious decision to keep learning and understanding the language to know which parts to use and which parts to ignore.\nReferences\nBrendan Eich Personal Website (N.D.)\nJavaScript: The Good Parts, Douglas Crockford (O’Reilly, 2008)\nHow JavaScript Works, Douglas Crockford (Virgule-Solidus, 2018)\nDouglas Crockford Personal Website (N.D.)\nBrendan Eich’s Interview Conducted by Eric Knorr\nBrendan Eich’s Interview Conducted by Lex Fridman\nMozilla Foundation Documentation (N.D.)",
          "enclosure": {
            "url": "http://files.smashing.media/articles/marketing-changed-oop-javascript/marketing-changed-oop-javascript.jpg",
            "length": "0",
            "type": "image/jpg"
          },
          "content": "Discussing the decisions surrounding JavaScript prototypes, the article by Juan Diego Rodriguez scrutinizes their origin, examines missteps in the design, and explores how these factors have affected the way we write JavaScript today.",
          "contentSnippet": "Discussing the decisions surrounding JavaScript prototypes, the article by Juan Diego Rodriguez scrutinizes their origin, examines missteps in the design, and explores how these factors have affected the way we write JavaScript today.",
          "guid": "https://smashingmagazine.com/2023/12/marketing-changed-oop-javascript/",
          "isoDate": "2023-12-04T14:00:00.000Z"
        },
        {
          "creator": "hello@smashingmagazine.com (Oluwasanmi Akande)",
          "title": "Recovering Deleted Files From Your Git Working Tree",
          "link": "https://smashingmagazine.com/2023/12/recovering-deleted-files-git-working-tree/",
          "pubDate": "Fri, 01 Dec 2023 10:00:00 GMT",
          "author": "hello@smashingmagazine.com (Oluwasanmi Akande)",
          "content:encoded": "<p>There are times when mistakes happen, and useful and important files are deleted by error or lost from your file system irrevocably (or seemingly, at least). Version control systems make it difficult to permanently lose files, provided they have been either added to staging or committed to a remote repository, because Git allows you to undo or revert changes and access previous versions of the saved files.</p>\n<p>It is also possible to erroneously erase files from both the working directory and the Git repository. I’ve certainly done that! I imagine you have, too, if you’re reading this, and if that’s the case, then you will need a way to recover those files.</p>\n<p>I have a few methods and strategies you can use to recover your deleted files. Some are more obvious than others, and some are designed for very specific situations. And while it is indeed possible to irrevocably lose a file, even then, you may have a path to at least recover a copy of it with third-party software if it comes to that.</p>\nHow Git Works With Files\n<p>Before we dive into all of that, let’s explore how your files journey from your local computer to your remote repository. </p>\n<p>Your files are initially only located on your computer’s storage, known as your <strong>working tree</strong> or <strong>working directory</strong>, and Git has no idea they exist yet. At this point, they are at their most vulnerable state since they are untracked.</p>\n<p>Adding files to the staging area — also known as the index — so that Git is aware of them is what the <code>git add &lt;filename&gt;</code> (or <code>git add -A</code> for all files) is for. What actually happens under the hood when pushing files to staging is that Git hashes the content and <a href=\"https://git-scm.com/book/en/v2/Git-Internals-Git-Objects\">creates a blob for each file</a> based on the file’s content and proceeds to store them in the <code>/objects</code> subdirectory located at <code>.git/objects</code>. Run <code>git status</code> to confirm that the files you want to commit have been added to your staging area.</p>\n<p><img src=\"https://files.smashing.media/articles/recovering-deleted-files-git-working-tree/1-git-hashing-storing-file-blob-git-objectsp-directory.jpg\" /></p>\n<p>Once the files are staged, Git is at least aware of them, and we can include them in commits. When including a file in a commit, Git creates a new tree object to represent the state of the repository at the time the commit happens. The tree object contains the following information:</p>\n<ul>\n<li>SHA-1 hash of the tree object that represents the state of the repository;</li>\n<li>SHA-1 hash of the commit’s parent commit object if it has a parent;</li>\n<li>Author and committer information;</li>\n<li>Commit message.</li>\n</ul>\n<p>It’s at this point that the files are <code>git push</code>-ed to the remote repo, wherever you happen to be hosting it, whether it’s GitHub, Beanstalk, Bitbucket, or whatever.</p>\n<p><img src=\"https://files.smashing.media/articles/recovering-deleted-files-git-working-tree/2-file-journey-local-computer-remote-repo.jpg\" /></p>\nHow Files Can Get Deleted From A Working Tree\n<p>So, the key pieces we’re talking about are your project’s <em>working tree</em>, <em>staging area</em> and <em>commit</em>. It is possible for files to be deleted at any one of these points, but it’s the working tree where it is most irreversible, or at least tough, to restore a lost file.</p>\n<p>There are some very specific Git commands or actions that tend to be the biggest culprits when a file is deleted from the working tree.</p>\n<h3><code>git rm</code></h3>\n<p>I’m sure you have seen this one before. It’s a command for <em>removing</em> (<code>rm</code>) files from the working tree. It might be the most commonly used command for deleting files. </p>\n<h3><code>git reset</code></h3>\n<p>Anytime a reset happens, it’s very possible to lose any files you’ve been working on. <a href=\"https://www.git-scm.com/docs/git-reset\">But there are two types of Git resets</a> that make this possible:</p>\n<ol>\n<li><strong><code>git reset --hard</code></strong><br />This command is sort of a nuclear path for resetting a working tree and the staging area. If you’ve made any changes to tracked files, those will be lost. That goes for commits, too, which are discarded altogether. In fact, <em>any</em> files or directories that are not in the HEAD commit are removed from the working tree.</li>\n<li><strong><code>git reset &lt;filename&gt;</code></strong><br />This is a lot less damaging than a hard reset, but it does indeed remove the specified file from the working tree. But it’s worth mentioning that <em>the file is not pulled out from the staging area</em>. So there’s a path back, which we’ll get to.</li>\n</ol>\n<h3><code>git clean</code></h3>\n<p>This <a href=\"https://www.git-scm.com/docs/git-clean\">removes untracked files</a> from the working tree. Untracked files are not in the Git staging area and are not really part of the repository. They’re typically temporary files or files that have not yet been added to the repository.</p>\n<p>One key distinction with a clean command is that it will not remove files that are included in a project’s <code>.gitignore</code> file, nor will it remove files that have been added to the staging area, nor ones that have already been committed. This can be useful for cleaning up your working tree after you have finished working on a project and you want to remove all of the temporary files that you created.</p>\n<p>Like <code>git reset</code>, there are different variations of <code>git clean</code> that remove files in different ways:</p>\n<ul>\n<li><strong><code>git clean &lt;filename&gt;</code></strong><br />Used to remove specific files from the working tree.</li>\n<li><strong><code>git clean -d</code></strong><br />Removes untracked files from a specific directory.</li>\n<li><strong><code>git clean -i</code></strong><br />This one interactively removes files from the working tree. And by that, I mean you will be prompted to confirm removal before it happens, which is a nice safeguard against accidents.</li>\n<li><strong><code>git clean -n</code></strong><br />This is a dry run option and will show you the files that would be removed if you were to run the original <code>git clean</code> command. In other words, it doesn’t actually remove anything but lets you know what would be removed if you were to run an actual clean.</li>\n<li><strong><code>git clean -f</code></strong><br />This one <em>forces</em> the <code>git clean</code> command to remove all untracked files from the working tree, even if they are ignored by the <code>.gitignore</code> file. It’s pretty heavy-handed.</li>\n<li><strong><code>git clean -f -d</code></strong><br />Running this command is a lot like <code>git clean --f</code> but wipes out directories as well.</li>\n<li><strong><code>git clean -x</code></strong><br />This removes all untracked files, including build products. It is best used when you want to wipe your working tree clean and test a fresh build.</li>\n<li><strong><code>git clean -X</code></strong><br />This only removes files ignored by git.</li>\n</ul>\n<p>Of course, I’m merely summarizing what you can already find in <a href=\"https://www.git-scm.com/docs/git-clean\">Git’s documentation</a>. That’s where you can get the best information about the specific details and nuances of <code>git clean</code> and its variants.</p>\nManually Removing Files\n<p>Yes, it’s possible! You can manually delete the files and directories from your working tree using your computer’s file manager. The good news, however, is that this will <em>not</em> remove the files from the staging area. Also, it’s quite possible you can undo that action with a simple CMD + Z/CTRL + Z if no other action has happened.</p>\n<p>It is important to note that <strong>manually removing files from the working tree is a destructive operation</strong>. Once you have removed a file from the working tree that has not been added to a commit, it is almost impossible to undo the operation completely from a Git perspective. As a result, it is crucial to make sure that you really want to remove a file before you go this route.</p>\n<p>But mistakes happen! So, let’s look at a variety of commands, strategies, and — if needed — apps that could reasonably recover deleted files from a working directory.</p>\nHow Files Can Be Recovered After Being Deleted\n<p>Git commands like <code>git checkout</code>, <code>git reset</code>, <code>git restore</code>, and <code>git reflog</code> can be helpful for restoring files that you have either previously added to the staging area or committed to your repository.</p>\n<h3><code>git checkout</code></h3>\n<p><strong>If you have not committed the changes that deleted the files and directories,</strong> then you can use the <code>git checkout</code> command to checkout a previous commit, branch, or tag. This will overwrite the working tree with the contents of the specific commit, branch, or tag, and any deleted files and directories will be restored.</p>\n<pre><code>git checkout HEAD~ &lt;filename&gt;\n</code></pre> \n\n<p>That will take things back to the last commit that was made. But let’s say you’ve made several commits since the file was deleted. If that’s the case, try checking out a specific commit by providing that commit’s hash:</p>\n<pre><code>git checkout &lt;commit-hash&gt; &lt;filename&gt;\n</code></pre>\n\n<p>Oh, you’re not sure which file it is, or there are more files than you want to type out? You can check out the entire working tree by committing the filename:</p>\n<pre><code>git checkout &lt;commit-hash&gt;\n</code></pre>\n\n<h3><code>git reset</code></h3>\n<p><strong>If you have committed the changes that deleted the files and directories,</strong> then you can use the <code>git reset</code> command to reset the HEAD pointer to a previous commit. This will also overwrite the working tree with the contents of the specific commit, and any deleted files and directories will be restored in the process.</p>\n<pre><code>git reset &lt;commit-hash&gt;\n</code></pre>\n\n<h3><code>git restore</code></h3>\n<p><strong>If you want to restore deleted files and directories without overwriting the working tree,</strong> then you can use the <code>git restore</code> command. This command restores files and directories deleted from the staging area or the working tree. Note that it only works for tracked files, meaning that any files that weren’t <code>git add</code>-ed to the working tree are excluded.</p>\n<pre><code>git restore --staged &lt;filename&gt;\n</code></pre>\n\n<p>To jump back one commit, you could go back to the <code>--worktree</code> instead of the staging area:</p>\n<pre><code>git restore --worktree &lt;filename&gt;\n</code></pre>\n\n<p>And, of course, leave out the filename if you want to restore all files in the working tree from the previous commit:</p>\n<pre><code>git restore --worktree\n</code></pre>\n\n<p>Another option is to restore all of the files in the current directory:</p>\n<pre><code>git restore .\n</code></pre>\n\n<h3><code>git reflog</code></h3>\n<p>There’s also the <code>git reflog</code> command, which shows a history of all recent HEAD movements. I like this as a way to identify the commit that you want to <code>checkout</code> or <code>reset</code> to.</p>\n<pre><code>git reflog\n</code></pre>\n\n\n\nLast Resorts\n<p>When files that are neither present in the staging area nor committed are deleted from the working tree, it is commonly accepted that those files are gone forever — or <em>oti lor</em> as we say in Yoruba — without any hope of recovery. So, if for any reason or by error, you delete important files from your project’s working tree without ensuring that they are either in the staging area or have been previously committed, then you may be thinking all hope of getting them back is lost.</p>\n<p>But I can assure you, based on my experiences in this situation, that it is usually possible to recover all or most of a project’s lost files. There are two approaches I normally take.</p>\n<h3>File Recovery Apps</h3>\n<p>File recovery tools can recover lost or deleted data from your storage devices. They work by running a deep scan of your device in an attempt to find every file and folder that has ever existed on your storage device, including deleted and lost files and folders. Once the files have all been found, you can then use the data recovery tool to restore/recover the files of your choice to a new location.</p>\n<p><strong>Note</strong>: <em>Some of the deleted and lost files found may be corrupted and damaged or not found at all, but I am certain from my experience using them that the majority will be found without any corruption or damage.</em></p>\n<p>There are a variety of file recovery tools available, and the “right” one is largely a subjective matter. I could spend an entire post exclusively on the various options, but I’ve selected a few that I have used and feel comfortable at least suggesting as options to look into.</p>\n<p><a href=\"https://recoverit.wondershare.com\"><strong>Wondershare Recoverit</strong></a> is capable of recovering more than 1,000 file formats. Its free tier option allows you to run a scan to find files on your computer’s storage, but to actually recover the files, you will have to do a paid upgrade to one of its paid plans starting at a $69.99 annual subscription or a one-time $119.99 license. There’s a premium plan for more enhanced recovery methods for things like videos and files, as well as fixing corrupted files that go well beyond the basic need of recovering a single lost file.</p>\n<ul>\n<li><strong>Pros:</strong> High success rate, free tech support, allows partition recovery.</li>\n<li><strong>Cons:</strong> Free tier is extremely limited.</li>\n</ul>\n<p><a href=\"https://www.easeus.com/data-recovery-software/\"><strong>EaseUS Data Recovery Wizard</strong></a> is perhaps one of the most popular tools out of what’s available. Its free tier option is quite robust, running a deep scan and recovering up to 2GB of data. The difference between that and its paid subscription (starting at $119.95 per year, $169.95 lifetime) is that the paid tier recovers an unlimited amount of data.</p>\n<ul>\n<li><strong>Pros:</strong> Fast deep scans, file preview before recovery, easy to use, generous free tier.</li>\n<li><strong>Cons:</strong> Paid plans are significantly more expensive than other tools, Windows and macOS versions are vastly different, and the macOS software is even more expensive.</li>\n</ul>\n<p><a href=\"https://dmde.com\"><strong>DM Disk Editor</strong></a> (DMDE) makes use of a special algorithm that reconstructs directory structures and recovers files by their <a href=\"https://dmde.com/manual/fullscan.html#raw\">file signature</a> when recovering solely by the file system proves impossible. DMDE also offers a free tier option, but it is quite limited as you can only recover files from the directory you have selected, and it only recovers up to 4,000 files at a time. Compare that to its paid versions that allow unlimited and unrestricted data recovery. Paid plans start at $20 per year but scale up to $133 per year for more advanced needs that are likely beyond the scope of what you need.</p>\n<ul>\n<li><strong>Pros:</strong> High recovery success rate, generous free tier, reasonable paid tiers if needed.</li>\n<li><strong>Cons:</strong> I personally find the UI to be more difficult to navigate than other apps.</li>\n</ul>\n<table>\n    <thead>\n        <tr>\n            <th>Software</th>\n            <th>Operating Systems supported</th>\n      <th>Starting price</th>\n      <th>File types and formats supported</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td><strong>Wondershare Recoverit</strong></td>\n            <td>Windows, Mac, Linux(Premium)</td>\n      <td>$69.99/year</td>\n      <td>1000+ file types and formats</td>\n        </tr>\n        <tr>\n            <td><strong>EaseUS</strong></td>\n            <td>Windows, Mac</td>\n      <td>$99.95/year (Windows), $119.95/year (Mac)</td>\n      <td>1000+ file types and formats</td>\n        </tr>\n        <tr>\n            <td><strong>DMDE</strong></td>\n            <td>Windows, Mac, Linux, DOS</td>\n      <td>$20/year</td>\n      <td>Supports basic file formats. Does not support raw photo files.</td>\n        </tr>\n    </tbody>\n</table>\n\n<p>As I said, there are many, many more options out there. If you’re reading this and have a favorite app that you use to recover lost files, then please share it in the comments. The more, the merrier!</p>\n<h3>Last Resort: <code>git fsck</code></h3>\n<p><strong>First off, the <code>git fsck</code> command can be dangerous if used incorrectly.</strong> It is essential to make sure that you understand how to use the command before using it to recover files from the working tree. If you are unsure how to proceed after reading this section, then it is a good idea to consult the <a href=\"https://git-scm.com/docs/git-fsck\">Git documentation</a> for additional details on how it is used and when it is best to use it.</p>\n<p>That said, <code>git fsck</code> can indeed recover files lost from the working tree in Git and maybe your absolute last resort. It works by scanning the Git repository for “dangling” objects, which are objects that are not referenced by any commit. The Git docs <a href=\"https://git-scm.com/docs/gitglossary/#Documentation/gitglossary.txt-aiddefdanglingobjectadanglingobject\">define it</a> like this:</p>\n<blockquote><strong><code>dangling object</code></strong>:<br /><br />“An <a href=\"https://git-scm.com/docs/gitglossary/#def_unreachable_object\">unreachable object</a> that is not <a href=\"https://git-scm.com/docs/gitglossary/#def_reachable\">reachable</a> even from other unreachable objects; a dangling object has no references to it from any reference or <a href=\"https://git-scm.com/docs/gitglossary/#def_object\">object</a> in the <a href=\"https://git-scm.com/docs/gitglossary/#def_repository\">repository</a>.”</blockquote>\n\n<p>This can happen if a file is deleted from the working tree but not committed or if a branch is deleted, but the files on the branch are not deleted.</p>\n<p>To recover files lost from the working tree using the <code>git fsck</code> command, follow these steps:</p>\n<ul>\n<li><strong>Run <code>git fsck –lost-found</code>, which is a special mode of the <code>git fsck</code> command.</strong><br />It creates a directory called <code>.git/lost-found</code> and moves all of the lost objects to that directory. The lost objects are organized into two subdirectories: commits and objects. The <code>/commits</code> subdirectory contains lost commits, and the <code>/objects</code> subdirectory contains lost blobs, trees, and tags. This command prints the dangling objects (blobs, commits, trees, and tags) if they exist.</li>\n</ul>\n<p><img src=\"https://files.smashing.media/articles/recovering-deleted-files-git-working-tree/3-output-git-fsck-lost-found-command.png\" /></p>\n<ul>\n<li><strong>Run the <code>git show &lt;dangling_object_hash&gt;</code> command for each dangling object that is printed.</strong><br />This will print the content of the object and enable you to see the original content of the hashed object so you can identify the dangling objects in the case of files dangling blobs that correspond to the files that you want to recover.</li>\n<li><strong>To recover a dangling object,</strong> you can manually copy the content of the printed in the console when you run the <code>git show &lt;dangling_object_hash&gt;</code> command or run <code>git show &lt;dangling_object_hash&gt; &gt; &lt;filename&gt;</code> command to save the content of the hashed object to the file you specified in the command. You can also use the <code>git checkout &lt;dangling_object_hash&gt;</code> command to restore the file to the working tree.</li>\n</ul>\n<p>Once you have recovered the files that you want to recover, you can commit the changes to the Git repository as if nothing ever happened. Phew! But again, I only advise this approach if you’ve tried everything else and are absolutely at your last resort.</p>\nConclusion\n<p>Now that you know how to recover files lost from your working tree, your mind should be relatively at ease whenever or if ever you find yourself in this unfortunate situation. Remember, there’s a good chance to recover a file that may have been accidentally deleted from a project.</p>\n<p>That said, a better plan is to prevent being in this situation in the first place. Here are some tips that will help you prevent ending up almost irrevocably losing files from your working tree:</p>\n<ul>\n<li><strong>Commit your files to your Git repository and remote servers as quickly and as often as you create or make changes to them.</strong><br />There is no such thing as a “too small” commit.</li>\n<li><strong>Routinely create backups of your project files.</strong><br />This will help you recover your files if you accidentally delete them or your computer crashes.</li>\n</ul>\n<h3>Further Reading On SmashingMag</h3>\n<ul>\n<li>“<a href=\"https://www.smashingmagazine.com/2021/05/undoing-mistakes-git-part1/\">A Guide To Undoing Mistakes With Git (Part 1)</a>,” Tobias Günther</li>\n<li>“<a href=\"https://www.smashingmagazine.com/make-life-easier-when-using-git/\">How To Make Life Easier When Using Git</a>,” Shane Hudson</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2022/03/improving-ci-cd-flow-application/\">Improving The CI/CD Flow For Your Application</a>,” Tom Hastjarjanto</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2021/02/getting-the-most-out-of-git/\">Getting The Most Out Of Git</a>,” Tobias Günther</li>\n</ul>\n",
          "content:encodedSnippet": "There are times when mistakes happen, and useful and important files are deleted by error or lost from your file system irrevocably (or seemingly, at least). Version control systems make it difficult to permanently lose files, provided they have been either added to staging or committed to a remote repository, because Git allows you to undo or revert changes and access previous versions of the saved files.\nIt is also possible to erroneously erase files from both the working directory and the Git repository. I’ve certainly done that! I imagine you have, too, if you’re reading this, and if that’s the case, then you will need a way to recover those files.\nI have a few methods and strategies you can use to recover your deleted files. Some are more obvious than others, and some are designed for very specific situations. And while it is indeed possible to irrevocably lose a file, even then, you may have a path to at least recover a copy of it with third-party software if it comes to that.\nBefore we dive into all of that, let’s explore how your files journey from your local computer to your remote repository. \nYour files are initially only located on your computer’s storage, known as your working tree or working directory, and Git has no idea they exist yet. At this point, they are at their most vulnerable state since they are untracked.\nAdding files to the staging area — also known as the index — so that Git is aware of them is what the git add <filename> (or git add -A for all files) is for. What actually happens under the hood when pushing files to staging is that Git hashes the content and creates a blob for each file based on the file’s content and proceeds to store them in the /objects subdirectory located at .git/objects. Run git status to confirm that the files you want to commit have been added to your staging area.\n\nOnce the files are staged, Git is at least aware of them, and we can include them in commits. When including a file in a commit, Git creates a new tree object to represent the state of the repository at the time the commit happens. The tree object contains the following information:\nSHA-1 hash of the tree object that represents the state of the repository;\nSHA-1 hash of the commit’s parent commit object if it has a parent;\nAuthor and committer information;\nCommit message.\nIt’s at this point that the files are git push-ed to the remote repo, wherever you happen to be hosting it, whether it’s GitHub, Beanstalk, Bitbucket, or whatever.\n\nSo, the key pieces we’re talking about are your project’s working tree, staging area and commit. It is possible for files to be deleted at any one of these points, but it’s the working tree where it is most irreversible, or at least tough, to restore a lost file.\nThere are some very specific Git commands or actions that tend to be the biggest culprits when a file is deleted from the working tree.\ngit rm\nI’m sure you have seen this one before. It’s a command for removing (rm) files from the working tree. It might be the most commonly used command for deleting files. \ngit reset\nAnytime a reset happens, it’s very possible to lose any files you’ve been working on. But there are two types of Git resets that make this possible:\ngit reset --hard\nThis command is sort of a nuclear path for resetting a working tree and the staging area. If you’ve made any changes to tracked files, those will be lost. That goes for commits, too, which are discarded altogether. In fact, any files or directories that are not in the HEAD commit are removed from the working tree.\ngit reset <filename>\nThis is a lot less damaging than a hard reset, but it does indeed remove the specified file from the working tree. But it’s worth mentioning that the file is not pulled out from the staging area. So there’s a path back, which we’ll get to.\ngit clean\nThis removes untracked files from the working tree. Untracked files are not in the Git staging area and are not really part of the repository. They’re typically temporary files or files that have not yet been added to the repository.\nOne key distinction with a clean command is that it will not remove files that are included in a project’s .gitignore file, nor will it remove files that have been added to the staging area, nor ones that have already been committed. This can be useful for cleaning up your working tree after you have finished working on a project and you want to remove all of the temporary files that you created.\nLike git reset, there are different variations of git clean that remove files in different ways:\ngit clean <filename>\nUsed to remove specific files from the working tree.\ngit clean -d\nRemoves untracked files from a specific directory.\ngit clean -i\nThis one interactively removes files from the working tree. And by that, I mean you will be prompted to confirm removal before it happens, which is a nice safeguard against accidents.\ngit clean -n\nThis is a dry run option and will show you the files that would be removed if you were to run the original git clean command. In other words, it doesn’t actually remove anything but lets you know what would be removed if you were to run an actual clean.\ngit clean -f\nThis one forces the git clean command to remove all untracked files from the working tree, even if they are ignored by the .gitignore file. It’s pretty heavy-handed.\ngit clean -f -d\nRunning this command is a lot like git clean --f but wipes out directories as well.\ngit clean -x\nThis removes all untracked files, including build products. It is best used when you want to wipe your working tree clean and test a fresh build.\ngit clean -X\nThis only removes files ignored by git.\nOf course, I’m merely summarizing what you can already find in Git’s documentation. That’s where you can get the best information about the specific details and nuances of git clean and its variants.\nYes, it’s possible! You can manually delete the files and directories from your working tree using your computer’s file manager. The good news, however, is that this will not remove the files from the staging area. Also, it’s quite possible you can undo that action with a simple CMD + Z/CTRL + Z if no other action has happened.\nIt is important to note that manually removing files from the working tree is a destructive operation. Once you have removed a file from the working tree that has not been added to a commit, it is almost impossible to undo the operation completely from a Git perspective. As a result, it is crucial to make sure that you really want to remove a file before you go this route.\nBut mistakes happen! So, let’s look at a variety of commands, strategies, and — if needed — apps that could reasonably recover deleted files from a working directory.\nGit commands like git checkout, git reset, git restore, and git reflog can be helpful for restoring files that you have either previously added to the staging area or committed to your repository.\ngit checkout\nIf you have not committed the changes that deleted the files and directories, then you can use the git checkout command to checkout a previous commit, branch, or tag. This will overwrite the working tree with the contents of the specific commit, branch, or tag, and any deleted files and directories will be restored.\ngit checkout HEAD~ <filename>\n\n \n\nThat will take things back to the last commit that was made. But let’s say you’ve made several commits since the file was deleted. If that’s the case, try checking out a specific commit by providing that commit’s hash:\ngit checkout <commit-hash> <filename>\n\nOh, you’re not sure which file it is, or there are more files than you want to type out? You can check out the entire working tree by committing the filename:\ngit checkout <commit-hash>\n\ngit reset\nIf you have committed the changes that deleted the files and directories, then you can use the git reset command to reset the HEAD pointer to a previous commit. This will also overwrite the working tree with the contents of the specific commit, and any deleted files and directories will be restored in the process.\ngit reset <commit-hash>\n\ngit restore\nIf you want to restore deleted files and directories without overwriting the working tree, then you can use the git restore command. This command restores files and directories deleted from the staging area or the working tree. Note that it only works for tracked files, meaning that any files that weren’t git add-ed to the working tree are excluded.\ngit restore --staged <filename>\n\nTo jump back one commit, you could go back to the --worktree instead of the staging area:\ngit restore --worktree <filename>\n\nAnd, of course, leave out the filename if you want to restore all files in the working tree from the previous commit:\ngit restore --worktree\n\nAnother option is to restore all of the files in the current directory:\ngit restore .\n\ngit reflog\nThere’s also the git reflog command, which shows a history of all recent HEAD movements. I like this as a way to identify the commit that you want to checkout or reset to.\ngit reflog\n\nWhen files that are neither present in the staging area nor committed are deleted from the working tree, it is commonly accepted that those files are gone forever — or oti lor as we say in Yoruba — without any hope of recovery. So, if for any reason or by error, you delete important files from your project’s working tree without ensuring that they are either in the staging area or have been previously committed, then you may be thinking all hope of getting them back is lost.\nBut I can assure you, based on my experiences in this situation, that it is usually possible to recover all or most of a project’s lost files. There are two approaches I normally take.\nFile Recovery Apps\nFile recovery tools can recover lost or deleted data from your storage devices. They work by running a deep scan of your device in an attempt to find every file and folder that has ever existed on your storage device, including deleted and lost files and folders. Once the files have all been found, you can then use the data recovery tool to restore/recover the files of your choice to a new location.\nNote: Some of the deleted and lost files found may be corrupted and damaged or not found at all, but I am certain from my experience using them that the majority will be found without any corruption or damage.\nThere are a variety of file recovery tools available, and the “right” one is largely a subjective matter. I could spend an entire post exclusively on the various options, but I’ve selected a few that I have used and feel comfortable at least suggesting as options to look into.\nWondershare Recoverit is capable of recovering more than 1,000 file formats. Its free tier option allows you to run a scan to find files on your computer’s storage, but to actually recover the files, you will have to do a paid upgrade to one of its paid plans starting at a $69.99 annual subscription or a one-time $119.99 license. There’s a premium plan for more enhanced recovery methods for things like videos and files, as well as fixing corrupted files that go well beyond the basic need of recovering a single lost file.\nPros: High success rate, free tech support, allows partition recovery.\nCons: Free tier is extremely limited.\nEaseUS Data Recovery Wizard is perhaps one of the most popular tools out of what’s available. Its free tier option is quite robust, running a deep scan and recovering up to 2GB of data. The difference between that and its paid subscription (starting at $119.95 per year, $169.95 lifetime) is that the paid tier recovers an unlimited amount of data.\nPros: Fast deep scans, file preview before recovery, easy to use, generous free tier.\nCons: Paid plans are significantly more expensive than other tools, Windows and macOS versions are vastly different, and the macOS software is even more expensive.\nDM Disk Editor (DMDE) makes use of a special algorithm that reconstructs directory structures and recovers files by their file signature when recovering solely by the file system proves impossible. DMDE also offers a free tier option, but it is quite limited as you can only recover files from the directory you have selected, and it only recovers up to 4,000 files at a time. Compare that to its paid versions that allow unlimited and unrestricted data recovery. Paid plans start at $20 per year but scale up to $133 per year for more advanced needs that are likely beyond the scope of what you need.\nPros: High recovery success rate, generous free tier, reasonable paid tiers if needed.\nCons: I personally find the UI to be more difficult to navigate than other apps.\nSoftware\n            Operating Systems supported\n      Starting price\n      File types and formats supported\n        \nWondershare Recoverit\n            Windows, Mac, Linux(Premium)\n      $69.99/year\n      1000+ file types and formats\n        \nEaseUS\n            Windows, Mac\n      $99.95/year (Windows), $119.95/year (Mac)\n      1000+ file types and formats\n        \nDMDE\n            Windows, Mac, Linux, DOS\n      $20/year\n      Supports basic file formats. Does not support raw photo files.\n        \nAs I said, there are many, many more options out there. If you’re reading this and have a favorite app that you use to recover lost files, then please share it in the comments. The more, the merrier!\nLast Resort: git fsck\nFirst off, the git fsck command can be dangerous if used incorrectly. It is essential to make sure that you understand how to use the command before using it to recover files from the working tree. If you are unsure how to proceed after reading this section, then it is a good idea to consult the Git documentation for additional details on how it is used and when it is best to use it.\nThat said, git fsck can indeed recover files lost from the working tree in Git and maybe your absolute last resort. It works by scanning the Git repository for “dangling” objects, which are objects that are not referenced by any commit. The Git docs define it like this:\ndangling object:\n“An unreachable object that is not reachable even from other unreachable objects; a dangling object has no references to it from any reference or object in the repository.”\nThis can happen if a file is deleted from the working tree but not committed or if a branch is deleted, but the files on the branch are not deleted.\nTo recover files lost from the working tree using the git fsck command, follow these steps:\nRun git fsck –lost-found, which is a special mode of the git fsck command.\nIt creates a directory called .git/lost-found and moves all of the lost objects to that directory. The lost objects are organized into two subdirectories: commits and objects. The /commits subdirectory contains lost commits, and the /objects subdirectory contains lost blobs, trees, and tags. This command prints the dangling objects (blobs, commits, trees, and tags) if they exist.\n\nRun the git show <dangling_object_hash> command for each dangling object that is printed.\nThis will print the content of the object and enable you to see the original content of the hashed object so you can identify the dangling objects in the case of files dangling blobs that correspond to the files that you want to recover.\nTo recover a dangling object, you can manually copy the content of the printed in the console when you run the git show <dangling_object_hash> command or run git show <dangling_object_hash> > <filename> command to save the content of the hashed object to the file you specified in the command. You can also use the git checkout <dangling_object_hash> command to restore the file to the working tree.\nOnce you have recovered the files that you want to recover, you can commit the changes to the Git repository as if nothing ever happened. Phew! But again, I only advise this approach if you’ve tried everything else and are absolutely at your last resort.\nNow that you know how to recover files lost from your working tree, your mind should be relatively at ease whenever or if ever you find yourself in this unfortunate situation. Remember, there’s a good chance to recover a file that may have been accidentally deleted from a project.\nThat said, a better plan is to prevent being in this situation in the first place. Here are some tips that will help you prevent ending up almost irrevocably losing files from your working tree:\nCommit your files to your Git repository and remote servers as quickly and as often as you create or make changes to them.\nThere is no such thing as a “too small” commit.\nRoutinely create backups of your project files.\nThis will help you recover your files if you accidentally delete them or your computer crashes.\nFurther Reading On SmashingMag\n“A Guide To Undoing Mistakes With Git (Part 1),” Tobias Günther\n“How To Make Life Easier When Using Git,” Shane Hudson\n“Improving The CI/CD Flow For Your Application,” Tom Hastjarjanto\n“Getting The Most Out Of Git,” Tobias Günther",
          "enclosure": {
            "url": "http://files.smashing.media/articles/recovering-deleted-files-git-working-tree/recovering-deleted-files-git-working-tree.jpg",
            "length": "0",
            "type": "image/jpg"
          },
          "content": "Git is designed to assure us that we can track a project’s files at different points in time. But it doesn’t assure us that those files are always safe along the way. For those of you who have dealt with the sinking feeling that you’ve irrevocably deleted and lost files, Sanmi has a couple of approaches that, in the right situations, may help bring them back.",
          "contentSnippet": "Git is designed to assure us that we can track a project’s files at different points in time. But it doesn’t assure us that those files are always safe along the way. For those of you who have dealt with the sinking feeling that you’ve irrevocably deleted and lost files, Sanmi has a couple of approaches that, in the right situations, may help bring them back.",
          "guid": "https://smashingmagazine.com/2023/12/recovering-deleted-files-git-working-tree/",
          "isoDate": "2023-12-01T10:00:00.000Z"
        },
        {
          "creator": "hello@smashingmagazine.com (Cosima Mielke)",
          "title": "Cold Days, Shining Lights (December 2023 Wallpapers Edition)",
          "link": "https://smashingmagazine.com/2023/11/desktop-wallpaper-calendars-december-2023/",
          "pubDate": "Thu, 30 Nov 2023 09:30:00 GMT",
          "author": "hello@smashingmagazine.com (Cosima Mielke)",
          "content:encoded": "<p>As the year is coming to a close, many of us feel rushed, meeting deadlines, finishing off projects, or preparing for the upcoming holiday season. So how about some <strong>beautiful, wintery desktop wallpapers</strong> to cater for some fresh inspiration and get you in the mood for December (and the holidays, if you’re celebrating)?</p>\n\n<p>As every month <a href=\"https://www.smashingmagazine.com/category/wallpapers\">since more than twelve years already</a>, artists and designers from across the globe once again got their ideas bubbling and created wallpaper designs to sweeten up your December. They come in versions <strong>with and without a calendar</strong> and can be downloaded for free. As a little bonus goodie, we also added a selection of December favorites from our wallpapers archives to the collection that are just waiting to be rediscovered, so maybe you’ll spot one of <em>your</em> <strong>almost-forgotten favorites</strong> in here, too.</p>\n\n<p>A huge thank you to everyone who took on the challenge and shared their designs with us — this post wouldn’t exist without you! Happy December!</p>\n\n<ul>\n<li>You can <strong>click on every image to see a larger preview</strong>,</li>\n<li>We respect and carefully consider the ideas and motivation behind each and every artist’s work. This is why we give all artists the <strong>full freedom to explore their creativity</strong> and express emotions and experience through their works. This is also why the themes of the wallpapers weren’t anyhow influenced by us but rather designed from scratch by the artists themselves.</li>\n<li><strong><a href=\"https://www.smashingmagazine.com/desktop-wallpaper-calendars-join-in/\">Submit a wallpaper!</a></strong><br />Did you know that <em>you</em> could get featured in our next wallpapers post, too? We are always <strong>looking for creative talent</strong>.</li>\n</ul>\n\n<p></p>Sweet Ride Into The Holidays<p></p>\n<p></p><p>“December is here, and that means it’s time to celebrate National Cookie Day and embrace the festive spirit with our snowboarding cookie man! This delightful illustration captures the essence of the holidays — a time for indulging in our favorite treats, spreading joy, and creating unforgettable memories with loved ones. So, grab your favorite cookie, put on your coziest pajamas, and let the holiday cheer commence!” — Designed by <a href=\"https://www.popwebdesign.net/search-engine-optimization.html\">PopArt Studio</a> from Serbia.</p><p></p>\n<p></p><a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/sweet-ride-into-the-holidays/dec-23-sweet-ride-into-the-holidays-full.png\"><img src=\"https://files.smashing.media/articles/desktop-wallpaper-calendars-dec-2023/dec-23-sweet-ride-into-the-holidays-preview-opt.png\" /></a><p></p>\n<ul>\n<li><a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/sweet-ride-into-the-holidays/dec-23-sweet-ride-into-the-holidays-preview.png\">preview</a></li>\n<li>with calendar: <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/sweet-ride-into-the-holidays/cal/dec-23-sweet-ride-into-the-holidays-cal-320x480.png\">320x480</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/sweet-ride-into-the-holidays/cal/dec-23-sweet-ride-into-the-holidays-cal-640x480.png\">640x480</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/sweet-ride-into-the-holidays/cal/dec-23-sweet-ride-into-the-holidays-cal-800x480.png\">800x480</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/sweet-ride-into-the-holidays/cal/dec-23-sweet-ride-into-the-holidays-cal-800x600.png\">800x600</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/sweet-ride-into-the-holidays/cal/dec-23-sweet-ride-into-the-holidays-cal-1024x768.png\">1024x768</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/sweet-ride-into-the-holidays/cal/dec-23-sweet-ride-into-the-holidays-cal-1024x1024.png\">1024x1024</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/sweet-ride-into-the-holidays/cal/dec-23-sweet-ride-into-the-holidays-cal-1152x864.png\">1152x864</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/sweet-ride-into-the-holidays/cal/dec-23-sweet-ride-into-the-holidays-cal-1280x720.png\">1280x720</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/sweet-ride-into-the-holidays/cal/dec-23-sweet-ride-into-the-holidays-cal-1280x800.png\">1280x800</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/sweet-ride-into-the-holidays/cal/dec-23-sweet-ride-into-the-holidays-cal-1280x960.png\">1280x960</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/sweet-ride-into-the-holidays/cal/dec-23-sweet-ride-into-the-holidays-cal-1280x1024.png\">1280x1024</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/sweet-ride-into-the-holidays/cal/dec-23-sweet-ride-into-the-holidays-cal-1400x1050.png\">1400x1050</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/sweet-ride-into-the-holidays/cal/dec-23-sweet-ride-into-the-holidays-cal-1440x900.png\">1440x900</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/sweet-ride-into-the-holidays/cal/dec-23-sweet-ride-into-the-holidays-cal-1600x1200.png\">1600x1200</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/sweet-ride-into-the-holidays/cal/dec-23-sweet-ride-into-the-holidays-cal-1680x1050.png\">1680x1050</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/sweet-ride-into-the-holidays/cal/dec-23-sweet-ride-into-the-holidays-cal-1680x1200.png\">1680x1200</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/sweet-ride-into-the-holidays/cal/dec-23-sweet-ride-into-the-holidays-cal-1920x1080.png\">1920x1080</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/sweet-ride-into-the-holidays/cal/dec-23-sweet-ride-into-the-holidays-cal-1920x1200.png\">1920x1200</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/sweet-ride-into-the-holidays/cal/dec-23-sweet-ride-into-the-holidays-cal-1920x1440.png\">1920x1440</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/sweet-ride-into-the-holidays/cal/dec-23-sweet-ride-into-the-holidays-cal-2560x1440.png\">2560x1440</a></li>\n<li>without calendar: <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/sweet-ride-into-the-holidays/nocal/dec-23-sweet-ride-into-the-holidays-nocal-320x480.png\">320x480</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/sweet-ride-into-the-holidays/nocal/dec-23-sweet-ride-into-the-holidays-nocal-640x480.png\">640x480</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/sweet-ride-into-the-holidays/nocal/dec-23-sweet-ride-into-the-holidays-nocal-800x480.png\">800x480</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/sweet-ride-into-the-holidays/nocal/dec-23-sweet-ride-into-the-holidays-nocal-800x600.png\">800x600</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/sweet-ride-into-the-holidays/nocal/dec-23-sweet-ride-into-the-holidays-nocal-1024x768.png\">1024x768</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/sweet-ride-into-the-holidays/nocal/dec-23-sweet-ride-into-the-holidays-nocal-1024x1024.png\">1024x1024</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/sweet-ride-into-the-holidays/nocal/dec-23-sweet-ride-into-the-holidays-nocal-1152x864.png\">1152x864</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/sweet-ride-into-the-holidays/nocal/dec-23-sweet-ride-into-the-holidays-nocal-1280x720.png\">1280x720</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/sweet-ride-into-the-holidays/nocal/dec-23-sweet-ride-into-the-holidays-nocal-1280x800.png\">1280x800</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/sweet-ride-into-the-holidays/nocal/dec-23-sweet-ride-into-the-holidays-nocal-1280x960.png\">1280x960</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/sweet-ride-into-the-holidays/nocal/dec-23-sweet-ride-into-the-holidays-nocal-1280x1024.png\">1280x1024</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/sweet-ride-into-the-holidays/nocal/dec-23-sweet-ride-into-the-holidays-nocal-1400x1050.png\">1400x1050</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/sweet-ride-into-the-holidays/nocal/dec-23-sweet-ride-into-the-holidays-nocal-1440x900.png\">1440x900</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/sweet-ride-into-the-holidays/nocal/dec-23-sweet-ride-into-the-holidays-nocal-1600x1200.png\">1600x1200</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/sweet-ride-into-the-holidays/nocal/dec-23-sweet-ride-into-the-holidays-nocal-1680x1050.png\">1680x1050</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/sweet-ride-into-the-holidays/nocal/dec-23-sweet-ride-into-the-holidays-nocal-1680x1200.png\">1680x1200</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/sweet-ride-into-the-holidays/nocal/dec-23-sweet-ride-into-the-holidays-nocal-1920x1080.png\">1920x1080</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/sweet-ride-into-the-holidays/nocal/dec-23-sweet-ride-into-the-holidays-nocal-1920x1200.png\">1920x1200</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/sweet-ride-into-the-holidays/nocal/dec-23-sweet-ride-into-the-holidays-nocal-1920x1440.png\">1920x1440</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/sweet-ride-into-the-holidays/nocal/dec-23-sweet-ride-into-the-holidays-nocal-2560x1440.png\">2560x1440</a></li>\n</ul>\n\n<p></p>Spread The Soul Of Christmas<p></p>\n<p></p><p>Designed by <a href=\"https://design-studio.io/\">Bhabna Basak</a> from India.</p><p></p>\n<p></p><a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/spread-the-soul-of-christmas/dec-23-spread-the-soul-of-christmas-full.png\"><img src=\"https://files.smashing.media/articles/desktop-wallpaper-calendars-dec-2023/dec-23-spread-the-soul-of-christmas-preview-opt.png\" /></a><p></p>\n<ul>\n<li><a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/spread-the-soul-of-christmas/dec-23-spread-the-soul-of-christmas-preview.png\">preview</a></li>\n<li>with calendar: <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/spread-the-soul-of-christmas/cal/dec-23-spread-the-soul-of-christmas-cal-1440x900.jpg\">1440x900</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/spread-the-soul-of-christmas/cal/dec-23-spread-the-soul-of-christmas-cal-1600x1200.jpg\">1600x1200</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/spread-the-soul-of-christmas/cal/dec-23-spread-the-soul-of-christmas-cal-1680x1050.jpg\">1680x1050</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/spread-the-soul-of-christmas/cal/dec-23-spread-the-soul-of-christmas-cal-1680x1200.jpg\">1680x1200</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/spread-the-soul-of-christmas/cal/dec-23-spread-the-soul-of-christmas-cal-1920x1080.jpg\">1920x1080</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/spread-the-soul-of-christmas/cal/dec-23-spread-the-soul-of-christmas-cal-1920x1200.jpg\">1920x1200</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/spread-the-soul-of-christmas/cal/dec-23-spread-the-soul-of-christmas-cal-1920x1440.jpg\">1920x1440</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/spread-the-soul-of-christmas/cal/dec-23-spread-the-soul-of-christmas-cal-2560x1440.jpg\">2560x1440</a></li>\n<li>without calendar: <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/spread-the-soul-of-christmas/nocal/dec-23-spread-the-soul-of-christmas-nocal-1440x900.jpg\">1440x900</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/spread-the-soul-of-christmas/nocal/dec-23-spread-the-soul-of-christmas-nocal-1600x1200.jpg\">1600x1200</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/spread-the-soul-of-christmas/nocal/dec-23-spread-the-soul-of-christmas-nocal-1680x1050.jpg\">1680x1050</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/spread-the-soul-of-christmas/nocal/dec-23-spread-the-soul-of-christmas-nocal-1680x1200.jpg\">1680x1200</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/spread-the-soul-of-christmas/nocal/dec-23-spread-the-soul-of-christmas-nocal-1920x1080.jpg\">1920x1080</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/spread-the-soul-of-christmas/nocal/dec-23-spread-the-soul-of-christmas-nocal-1920x1200.jpg\">1920x1200</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/spread-the-soul-of-christmas/nocal/dec-23-spread-the-soul-of-christmas-nocal-1920x1440.jpg\">1920x1440</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/spread-the-soul-of-christmas/nocal/dec-23-spread-the-soul-of-christmas-nocal-2560x1440.jpg\">2560x1440</a></li>\n</ul>\n\n<p></p>Views Of The Alhambra<p></p>\n<p></p><p>“This last month of the year, we wanted to put the focus on one of the most visited buildings in the world whose beauty is unmatched: the Alhambra in Granada. Together, from the Albaicín we will see this beauty and tour its gardens and rooms. We wish you a very merry Christmas and all the best for the coming year!” — Designed by <a href=\"https://www.silocreativo.com/en\">Veronica Valenzuela Jimenez</a> from Spain.</p><p></p>\n<p></p><a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/views-of-the-alhambra/dec-23-views-of-the-alhambra-full.png\"><img src=\"https://files.smashing.media/articles/desktop-wallpaper-calendars-dec-2023/dec-23-views-of-the-alhambra-preview-opt.png\" /></a><p></p>\n<ul>\n<li><a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/views-of-the-alhambra/dec-23-views-of-the-alhambra-preview.png\">preview</a></li>\n<li>with calendar: <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/views-of-the-alhambra/cal/dec-23-views-of-the-alhambra-cal-640x480.png\">640x480</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/views-of-the-alhambra/cal/dec-23-views-of-the-alhambra-cal-800x480.png\">800x480</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/views-of-the-alhambra/cal/dec-23-views-of-the-alhambra-cal-1024x768.png\">1024x768</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/views-of-the-alhambra/cal/dec-23-views-of-the-alhambra-cal-1280x720.png\">1280x720</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/views-of-the-alhambra/cal/dec-23-views-of-the-alhambra-cal-1280x800.png\">1280x800</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/views-of-the-alhambra/cal/dec-23-views-of-the-alhambra-cal-1440x900.png\">1440x900</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/views-of-the-alhambra/cal/dec-23-views-of-the-alhambra-cal-1600x1200.png\">1600x1200</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/views-of-the-alhambra/cal/dec-23-views-of-the-alhambra-cal-1920x1080.png\">1920x1080</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/views-of-the-alhambra/cal/dec-23-views-of-the-alhambra-cal-1920x1440.png\">1920x1440</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/views-of-the-alhambra/cal/dec-23-views-of-the-alhambra-cal-2560x1440.png\">2560x1440</a></li>\n<li>without calendar: <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/views-of-the-alhambra/nocal/dec-23-views-of-the-alhambra-nocal-640x480.png\">640x480</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/views-of-the-alhambra/nocal/dec-23-views-of-the-alhambra-nocal-800x480.png\">800x480</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/views-of-the-alhambra/nocal/dec-23-views-of-the-alhambra-nocal-1024x768.png\">1024x768</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/views-of-the-alhambra/nocal/dec-23-views-of-the-alhambra-nocal-1280x720.png\">1280x720</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/views-of-the-alhambra/nocal/dec-23-views-of-the-alhambra-nocal-1280x800.png\">1280x800</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/views-of-the-alhambra/nocal/dec-23-views-of-the-alhambra-nocal-1440x900.png\">1440x900</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/views-of-the-alhambra/nocal/dec-23-views-of-the-alhambra-nocal-1600x1200.png\">1600x1200</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/views-of-the-alhambra/nocal/dec-23-views-of-the-alhambra-nocal-1920x1080.png\">1920x1080</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/views-of-the-alhambra/nocal/dec-23-views-of-the-alhambra-nocal-1920x1440.png\">1920x1440</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/views-of-the-alhambra/nocal/dec-23-views-of-the-alhambra-nocal-2560x1440.png\">2560x1440</a></li>\n</ul>\n\n<p></p>Energy Drink<p></p>\n<p></p><p>Designed by <a href=\"https://www.ricardogimenes.com/\">Ricardo Gimenes</a> from Sweden.</p><p></p>\n<p></p><a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/energy-drink/dec-23-energy-drink-full.png\"><img src=\"https://files.smashing.media/articles/desktop-wallpaper-calendars-dec-2023/dec-23-energy-drink-preview-opt.png\" /></a><p></p>\n<ul>\n<li><a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/energy-drink/dec-23-energy-drink-preview.png\">preview</a></li>\n<li>with calendar: <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/energy-drink/cal/dec-23-energy-drink-cal-640x480.png\">640x480</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/energy-drink/cal/dec-23-energy-drink-cal-800x480.png\">800x480</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/energy-drink/cal/dec-23-energy-drink-cal-800x600.png\">800x600</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/energy-drink/cal/dec-23-energy-drink-cal-1024x768.png\">1024x768</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/energy-drink/cal/dec-23-energy-drink-cal-1024x1024.png\">1024x1024</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/energy-drink/cal/dec-23-energy-drink-cal-1152x864.png\">1152x864</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/energy-drink/cal/dec-23-energy-drink-cal-1280x720.png\">1280x720</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/energy-drink/cal/dec-23-energy-drink-cal-1280x800.png\">1280x800</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/energy-drink/cal/dec-23-energy-drink-cal-1280x960.png\">1280x960</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/energy-drink/cal/dec-23-energy-drink-cal-1280x1024.png\">1280x1024</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/energy-drink/cal/dec-23-energy-drink-cal-1366x768.png\">1366x768</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/energy-drink/cal/dec-23-energy-drink-cal-1400x1050.png\">1400x1050</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/energy-drink/cal/dec-23-energy-drink-cal-1440x900.png\">1440x900</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/energy-drink/cal/dec-23-energy-drink-cal-1600x1200.png\">1600x1200</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/energy-drink/cal/dec-23-energy-drink-cal-1680x1050.png\">1680x1050</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/energy-drink/cal/dec-23-energy-drink-cal-1680x1200.png\">1680x1200</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/energy-drink/cal/dec-23-energy-drink-cal-1920x1080.png\">1920x1080</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/energy-drink/cal/dec-23-energy-drink-cal-1920x1200.png\">1920x1200</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/energy-drink/cal/dec-23-energy-drink-cal-1920x1440.png\">1920x1440</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/energy-drink/cal/dec-23-energy-drink-cal-2560x1440.png\">2560x1440</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/energy-drink/cal/dec-23-energy-drink-cal-3840x2160.png\">3840x2160</a></li>\n<li>without calendar: <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/energy-drink/nocal/dec-23-energy-drink-nocal-640x480.png\">640x480</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/energy-drink/nocal/dec-23-energy-drink-nocal-800x480.png\">800x480</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/energy-drink/nocal/dec-23-energy-drink-nocal-800x600.png\">800x600</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/energy-drink/nocal/dec-23-energy-drink-nocal-1024x768.png\">1024x768</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/energy-drink/nocal/dec-23-energy-drink-nocal-1024x1024.png\">1024x1024</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/energy-drink/nocal/dec-23-energy-drink-nocal-1152x864.png\">1152x864</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/energy-drink/nocal/dec-23-energy-drink-nocal-1280x720.png\">1280x720</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/energy-drink/nocal/dec-23-energy-drink-nocal-1280x800.png\">1280x800</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/energy-drink/nocal/dec-23-energy-drink-nocal-1280x960.png\">1280x960</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/energy-drink/nocal/dec-23-energy-drink-nocal-1280x1024.png\">1280x1024</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/energy-drink/nocal/dec-23-energy-drink-nocal-1366x768.png\">1366x768</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/energy-drink/nocal/dec-23-energy-drink-nocal-1400x1050.png\">1400x1050</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/energy-drink/nocal/dec-23-energy-drink-nocal-1440x900.png\">1440x900</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/energy-drink/nocal/dec-23-energy-drink-nocal-1600x1200.png\">1600x1200</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/energy-drink/nocal/dec-23-energy-drink-nocal-1680x1050.png\">1680x1050</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/energy-drink/nocal/dec-23-energy-drink-nocal-1680x1200.png\">1680x1200</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/energy-drink/nocal/dec-23-energy-drink-nocal-1920x1080.png\">1920x1080</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/energy-drink/nocal/dec-23-energy-drink-nocal-1920x1200.png\">1920x1200</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/energy-drink/nocal/dec-23-energy-drink-nocal-1920x1440.png\">1920x1440</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/energy-drink/nocal/dec-23-energy-drink-nocal-2560x1440.png\">2560x1440</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/energy-drink/nocal/dec-23-energy-drink-nocal-3840x2160.png\">3840x2160</a></li>\n</ul>\n\n<p></p>Go Green<p></p>\n<p></p><p>“We’d love to invite you to our free <a href=\"https://smashingconf.com/meets-green\">Smashing Meets Goes Green</a> on Thursday, December 7, to explore how we as designers and developers can make our world just a bit greener.” — Designed by <a href=\"https://www.ricardogimenes.com/\">Ricardo Gimenes</a> from Sweden.</p><p></p>\n<p></p><a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/go-green/dec-23-go-green-full.png\"><img src=\"https://files.smashing.media/articles/desktop-wallpaper-calendars-dec-2023/dec-23-go-green-preview-opt.png\" /></a><p></p>\n<ul>\n<li><a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/go-green/dec-23-go-green-preview.png\">preview</a></li>\n<li>with calendar: <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/go-green/cal/dec-23-go-green-cal-640x480.png\">640x480</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/go-green/cal/dec-23-go-green-cal-800x480.png\">800x480</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/go-green/cal/dec-23-go-green-cal-800x600.png\">800x600</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/go-green/cal/dec-23-go-green-cal-1024x768.png\">1024x768</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/go-green/cal/dec-23-go-green-cal-1024x1024.png\">1024x1024</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/go-green/cal/dec-23-go-green-cal-1152x864.png\">1152x864</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/go-green/cal/dec-23-go-green-cal-1280x720.png\">1280x720</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/go-green/cal/dec-23-go-green-cal-1280x800.png\">1280x800</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/go-green/cal/dec-23-go-green-cal-1280x960.png\">1280x960</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/go-green/cal/dec-23-go-green-cal-1280x1024.png\">1280x1024</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/go-green/cal/dec-23-go-green-cal-1366x768.png\">1366x768</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/go-green/cal/dec-23-go-green-cal-1400x1050.png\">1400x1050</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/go-green/cal/dec-23-go-green-cal-1440x900.png\">1440x900</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/go-green/cal/dec-23-go-green-cal-1600x1200.png\">1600x1200</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/go-green/cal/dec-23-go-green-cal-1680x1050.png\">1680x1050</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/go-green/cal/dec-23-go-green-cal-1680x1200.png\">1680x1200</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/go-green/cal/dec-23-go-green-cal-1920x1080.png\">1920x1080</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/go-green/cal/dec-23-go-green-cal-1920x1200.png\">1920x1200</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/go-green/cal/dec-23-go-green-cal-1920x1440.png\">1920x1440</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/go-green/cal/dec-23-go-green-cal-2560x1440.png\">2560x1440</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/go-green/cal/dec-23-go-green-cal-3840x2160.png\">3840x2160</a></li>\n<li>without calendar: <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/go-green/nocal/dec-23-go-green-nocal-640x480.png\">640x480</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/go-green/nocal/dec-23-go-green-nocal-800x480.png\">800x480</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/go-green/nocal/dec-23-go-green-nocal-800x600.png\">800x600</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/go-green/nocal/dec-23-go-green-nocal-1024x768.png\">1024x768</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/go-green/nocal/dec-23-go-green-nocal-1024x1024.png\">1024x1024</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/go-green/nocal/dec-23-go-green-nocal-1152x864.png\">1152x864</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/go-green/nocal/dec-23-go-green-nocal-1280x720.png\">1280x720</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/go-green/nocal/dec-23-go-green-nocal-1280x800.png\">1280x800</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/go-green/nocal/dec-23-go-green-nocal-1280x960.png\">1280x960</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/go-green/nocal/dec-23-go-green-nocal-1280x1024.png\">1280x1024</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/go-green/nocal/dec-23-go-green-nocal-1366x768.png\">1366x768</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/go-green/nocal/dec-23-go-green-nocal-1400x1050.png\">1400x1050</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/go-green/nocal/dec-23-go-green-nocal-1440x900.png\">1440x900</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/go-green/nocal/dec-23-go-green-nocal-1600x1200.png\">1600x1200</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/go-green/nocal/dec-23-go-green-nocal-1680x1050.png\">1680x1050</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/go-green/nocal/dec-23-go-green-nocal-1680x1200.png\">1680x1200</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/go-green/nocal/dec-23-go-green-nocal-1920x1080.png\">1920x1080</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/go-green/nocal/dec-23-go-green-nocal-1920x1200.png\">1920x1200</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/go-green/nocal/dec-23-go-green-nocal-1920x1440.png\">1920x1440</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/go-green/nocal/dec-23-go-green-nocal-2560x1440.png\">2560x1440</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-23/go-green/nocal/dec-23-go-green-nocal-3840x2160.png\">3840x2160</a></li>\n</ul>\n\n\n\n<p></p>Dear Moon, Merry Christmas<p></p>\n<p></p><p>Designed by <a href=\"https://vlad.studio/\">Vlad Gerasimov</a> from Georgia.</p><p></p>\n<p></p><a href=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/69d1bfe5-28c1-489a-80e7-0e74ec404bad/dec-19-dear-moon-merry-christmas-full-opt.png\"><img src=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a6b9bd64-491c-4be4-bb3e-0295fea6f0c6/dec-19-dear-moon-merry-christmas-preview-opt.png\" /></a><p></p>\n<ul>\n<li><a href=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a6b9bd64-491c-4be4-bb3e-0295fea6f0c6/dec-19-dear-moon-merry-christmas-preview-opt.png\">preview</a></li>\n<li>without calendar: <a href=\"https://smashingmagazine.com/files/wallpapers/dec-19/dear-moon-merry-christmas/nocal/dec-19-dear-moon-merry-christmas-nocal-800x480.jpg\">800x480</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-19/dear-moon-merry-christmas/nocal/dec-19-dear-moon-merry-christmas-nocal-800x600.jpg\">800x600</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-19/dear-moon-merry-christmas/nocal/dec-19-dear-moon-merry-christmas-nocal-1024x600.jpg\">1024x600</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-19/dear-moon-merry-christmas/nocal/dec-19-dear-moon-merry-christmas-nocal-1024x768.jpg\">1024x768</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-19/dear-moon-merry-christmas/nocal/dec-19-dear-moon-merry-christmas-nocal-1152x864.jpg\">1152x864</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-19/dear-moon-merry-christmas/nocal/dec-19-dear-moon-merry-christmas-nocal-1280x720.jpg\">1280x720</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-19/dear-moon-merry-christmas/nocal/dec-19-dear-moon-merry-christmas-nocal-1280x800.jpg\">1280x800</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-19/dear-moon-merry-christmas/nocal/dec-19-dear-moon-merry-christmas-nocal-1280x960.jpg\">1280x960</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-19/dear-moon-merry-christmas/nocal/dec-19-dear-moon-merry-christmas-nocal-1280x1024.jpg\">1280x1024</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-19/dear-moon-merry-christmas/nocal/dec-19-dear-moon-merry-christmas-nocal-1366x768.jpg\">1366x768</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-19/dear-moon-merry-christmas/nocal/dec-19-dear-moon-merry-christmas-nocal-1400x1050.jpg\">1400x1050</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-19/dear-moon-merry-christmas/nocal/dec-19-dear-moon-merry-christmas-nocal-1440x900.jpg\">1440x900</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-19/dear-moon-merry-christmas/nocal/dec-19-dear-moon-merry-christmas-nocal-1440x960.jpg\">1440x960</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-19/dear-moon-merry-christmas/nocal/dec-19-dear-moon-merry-christmas-nocal-1600x900.jpg\">1600x900</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-19/dear-moon-merry-christmas/nocal/dec-19-dear-moon-merry-christmas-nocal-1600x1200.jpg\">1600x1200</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-19/dear-moon-merry-christmas/nocal/dec-19-dear-moon-merry-christmas-nocal-1680x1050.jpg\">1680x1050</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-19/dear-moon-merry-christmas/nocal/dec-19-dear-moon-merry-christmas-nocal-1680x1200.jpg\">1680x1200</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-19/dear-moon-merry-christmas/nocal/dec-19-dear-moon-merry-christmas-nocal-1920x1080.jpg\">1920x1080</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-19/dear-moon-merry-christmas/nocal/dec-19-dear-moon-merry-christmas-nocal-1920x1200.jpg\">1920x1200</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-19/dear-moon-merry-christmas/nocal/dec-19-dear-moon-merry-christmas-nocal-1920x1440.jpg\">1920x1440</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-19/dear-moon-merry-christmas/nocal/dec-19-dear-moon-merry-christmas-nocal-2560x1440.jpg\">2560x1440</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-19/dear-moon-merry-christmas/nocal/dec-19-dear-moon-merry-christmas-nocal-2560x1600.jpg\">2560x1600</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-19/dear-moon-merry-christmas/nocal/dec-19-dear-moon-merry-christmas-nocal-2880x1800.jpg\">2880x1800</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-19/dear-moon-merry-christmas/nocal/dec-19-dear-moon-merry-christmas-nocal-3072x1920.jpg\">3072x1920</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-19/dear-moon-merry-christmas/nocal/dec-19-dear-moon-merry-christmas-nocal-3840x2160.jpg\">3840x2160</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-19/dear-moon-merry-christmas/nocal/dec-19-dear-moon-merry-christmas-nocal-5120x2880.jpg\">5120x2880</a></li>\n</ul>\n\n<p></p>The House On The River Drina<p></p>\n<p></p><p>“Since we often yearn for a peaceful and quiet place to work, we have found inspiration in the famous house on the River Drina in Bajina Bašta, Serbia. Wouldn’t it be great being in nature, away from the civilization, swaying in the wind and listening to the waves of the river smashing your house, having no neighbors to bother you? Not sure about the Internet, though…” — Designed by <a href=\"https://www.popwebdesign.net/index_eng.html\">PopArt Studio</a> from Serbia.</p><p></p>\n<p></p><a href=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b63a58fb-92a5-4f9d-81b3-c90e2cfd9b5a/dec-16-the-house-on-the-river-drina-full-opt.png\"><img src=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4b8776b3-8fdf-469a-b5b2-591d535d02b6/dec-16-the-house-on-the-river-drina-preview-opt.png\" /></a><p></p>\n<ul>\n<li><a href=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4b8776b3-8fdf-469a-b5b2-591d535d02b6/dec-16-the-house-on-the-river-drina-preview-opt.png\">preview</a></li>\n<li>without calendar: <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/the-house-on-the-river-drina/nocal/dec-16-the-house-on-the-river-drina-nocal-640x480.jpg\">640x480</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/the-house-on-the-river-drina/nocal/dec-16-the-house-on-the-river-drina-nocal-800x600.jpg\">800x600</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/the-house-on-the-river-drina/nocal/dec-16-the-house-on-the-river-drina-nocal-1024x1024.jpg\">1024x1024</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/the-house-on-the-river-drina/nocal/dec-16-the-house-on-the-river-drina-nocal-1152x864.jpg\">1152x864</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/the-house-on-the-river-drina/nocal/dec-16-the-house-on-the-river-drina-nocal-1280x720.jpg\">1280x720</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/the-house-on-the-river-drina/nocal/dec-16-the-house-on-the-river-drina-nocal-1280x960.jpg\">1280x960</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/the-house-on-the-river-drina/nocal/dec-16-the-house-on-the-river-drina-nocal-1280x1024.jpg\">1280x1024</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/the-house-on-the-river-drina/nocal/dec-16-the-house-on-the-river-drina-nocal-1366x768.jpg\">1366x768</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/the-house-on-the-river-drina/nocal/dec-16-the-house-on-the-river-drina-nocal-1400x1050.jpg\">1400x1050</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/the-house-on-the-river-drina/nocal/dec-16-the-house-on-the-river-drina-nocal-1440x900.jpg\">1440x900</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/the-house-on-the-river-drina/nocal/dec-16-the-house-on-the-river-drina-nocal-1600x1200.jpg\">1600x1200</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/the-house-on-the-river-drina/nocal/dec-16-the-house-on-the-river-drina-nocal-1680x1200.jpg\">1680x1200</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/the-house-on-the-river-drina/nocal/dec-16-the-house-on-the-river-drina-nocal-1920x1080.jpg\">1920x1080</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/the-house-on-the-river-drina/nocal/dec-16-the-house-on-the-river-drina-nocal-1920x1200.jpg\">1920x1200</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/the-house-on-the-river-drina/nocal/dec-16-the-house-on-the-river-drina-nocal-1920x1440.jpg\">1920x1440</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/the-house-on-the-river-drina/nocal/dec-16-the-house-on-the-river-drina-nocal-2560x1440.jpg\">2560x1440</a></li>\n</ul>\n\n<p></p>Cardinals In Snowfall<p></p>\n<p></p><p>“During Christmas season, in the cold, colorless days of winter, Cardinal birds are seen as symbols of faith and warmth. In the part of America I live in, there is snowfall every December. While the snow is falling, I can see gorgeous Cardinals flying in and out of my patio. The intriguing color palette of the bright red of the Cardinals, the white of the flurries and the brown/black of dry twigs and fallen leaves on the snow-laden ground fascinates me a lot, and inspired me to create this quaint and sweet, hand-illustrated surface pattern design as I wait for the snowfall in my town!” — Designed by <a href=\"https://pineconedream.com/\">Gyaneshwari Dave</a> from the United States.</p><p></p>\n<p></p><a href=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/27101977-9a61-41b9-9e80-445f3a8932af/dec-18-cardinals-in-snowfall-full-opt.png\"><img src=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0a28051e-b3bc-4eff-a30b-2456c249aed5/dec-18-cardinals-in-snowfall-preview-opt.png\" /></a><p></p>\n<ul>\n<li><a href=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0a28051e-b3bc-4eff-a30b-2456c249aed5/dec-18-cardinals-in-snowfall-preview-opt.png\">preview</a></li>\n<li>without calendar: <a href=\"https://smashingmagazine.com/files/wallpapers/dec-18/cardinals-in-snowfall/nocal/dec-18-cardinals-in-snowfall-nocal-640x960.jpg\">640x960</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-18/cardinals-in-snowfall/nocal/dec-18-cardinals-in-snowfall-nocal-768x1024.jpg\">768x1024</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-18/cardinals-in-snowfall/nocal/dec-18-cardinals-in-snowfall-nocal-1280x720.jpg\">1280x720</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-18/cardinals-in-snowfall/nocal/dec-18-cardinals-in-snowfall-nocal-1280x1024.jpg\">1280x1024</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-18/cardinals-in-snowfall/nocal/dec-18-cardinals-in-snowfall-nocal-1366x768.jpg\">1366x768</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-18/cardinals-in-snowfall/nocal/dec-18-cardinals-in-snowfall-nocal-1920x1080.jpg\">1920x1080</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-18/cardinals-in-snowfall/nocal/dec-18-cardinals-in-snowfall-nocal-2560x1440.jpg\">2560x1440</a></li>\n</ul>\n\n<p></p>Winter Coziness At Home<p></p>\n<p></p><p>“Winter coziness that we all feel when we come home after spending some time outside or when we come to our parental home to celebrate Christmas inspired our designers. Home is the place where we can feel safe and sound, so we couldn’t help ourselves but create this calendar.” — Designed by <a href=\"http://masterbundles.com/\">MasterBundles</a> from Ukraine.</p><p></p>\n<p></p><a href=\"https://files.smashing.media/articles/desktop-wallpaper-calendars-dec-2023/dec-22-winter-coziness-at-home-full-opt.png\"><img src=\"https://files.smashing.media/articles/desktop-wallpaper-calendars-dec-2023/dec-22-winter-coziness-at-home-preview-opt.png\" /></a><p></p>\n<ul>\n<li><a href=\"https://files.smashing.media/articles/desktop-wallpaper-calendars-dec-2023/dec-22-winter-coziness-at-home-preview-opt.png\">preview</a></li>\n<li>without calendar: <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-22/winter-coziness-at-home/nocal/dec-22-winter-coziness-at-home-nocal-320х480.png\">320x480</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-22/winter-coziness-at-home/nocal/dec-22-winter-coziness-at-home-nocal-640х480.png\">640x480</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-22/winter-coziness-at-home/nocal/dec-22-winter-coziness-at-home-nocal-800х480.png\">800x480</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-22/winter-coziness-at-home/nocal/dec-22-winter-coziness-at-home-nocal-800х600.png\">800x600</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-22/winter-coziness-at-home/nocal/dec-22-winter-coziness-at-home-nocal-1024х768.png\">1024x768</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-22/winter-coziness-at-home/nocal/dec-22-winter-coziness-at-home-nocal-1024х1024.png\">1024x1024</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-22/winter-coziness-at-home/nocal/dec-22-winter-coziness-at-home-nocal-1152х864.png\">1152x864</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-22/winter-coziness-at-home/nocal/dec-22-winter-coziness-at-home-nocal-1280х720.png\">1280x720</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-22/winter-coziness-at-home/nocal/dec-22-winter-coziness-at-home-nocal-1280х800.png\">1280x800</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-22/winter-coziness-at-home/nocal/dec-22-winter-coziness-at-home-nocal-1280х960.png\">1280x960</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-22/winter-coziness-at-home/nocal/dec-22-winter-coziness-at-home-nocal-1280х1024.png\">1280x1024</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-22/winter-coziness-at-home/nocal/dec-22-winter-coziness-at-home-nocal-1366х768.png\">1366x768</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-22/winter-coziness-at-home/nocal/dec-22-winter-coziness-at-home-nocal-1400х1050.png\">1400x1050</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-22/winter-coziness-at-home/nocal/dec-22-winter-coziness-at-home-nocal-1440х900.png\">1440x900</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-22/winter-coziness-at-home/nocal/dec-22-winter-coziness-at-home-nocal-1600х1200.png\">1600x1200</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-22/winter-coziness-at-home/nocal/dec-22-winter-coziness-at-home-nocal-1680х1050.png\">1680x1050</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-22/winter-coziness-at-home/nocal/dec-22-winter-coziness-at-home-nocal-1680х1200.png\">1680x1200</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-22/winter-coziness-at-home/nocal/dec-22-winter-coziness-at-home-nocal-1920х1080.png\">1920x1080</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-22/winter-coziness-at-home/nocal/dec-22-winter-coziness-at-home-nocal-1920х1200.png\">1920x1200</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-22/winter-coziness-at-home/nocal/dec-22-winter-coziness-at-home-nocal-1920х1440.png\">1920x1440</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-22/winter-coziness-at-home/nocal/dec-22-winter-coziness-at-home-nocal-2560х1440.png\">2560x1440</a></li>\n</ul>\n\n<p></p>Bat Christmas<p></p>\n<p></p><p>Designed by <a href=\"https://www.ricardogimenes.com/\">Ricardo Gimenes</a> from Sweden.</p><p></p>\n<p></p><a href=\"https://files.smashing.media/articles/desktop-wallpaper-calendars-dec-2023/dec-22-bat-christmas-full-opt.png\"><img src=\"https://files.smashing.media/articles/desktop-wallpaper-calendars-dec-2023/dec-22-bat-christmas-preview-opt.png\" /></a><p></p>\n<ul>\n<li><a href=\"https://files.smashing.media/articles/desktop-wallpaper-calendars-dec-2023/dec-22-bat-christmas-preview-opt.png\">preview</a></li>\n<li>without calendar: <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-22/bat-christmas/nocal/dec-22-bat-christmas-nocal-640x480.png\">640x480</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-22/bat-christmas/nocal/dec-22-bat-christmas-nocal-800x480.png\">800x480</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-22/bat-christmas/nocal/dec-22-bat-christmas-nocal-800x600.png\">800x600</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-22/bat-christmas/nocal/dec-22-bat-christmas-nocal-1024x768.png\">1024x768</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-22/bat-christmas/nocal/dec-22-bat-christmas-nocal-1024x1024.png\">1024x1024</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-22/bat-christmas/nocal/dec-22-bat-christmas-nocal-1152x864.png\">1152x864</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-22/bat-christmas/nocal/dec-22-bat-christmas-nocal-1280x720.png\">1280x720</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-22/bat-christmas/nocal/dec-22-bat-christmas-nocal-1280x800.png\">1280x800</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-22/bat-christmas/nocal/dec-22-bat-christmas-nocal-1280x960.png\">1280x960</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-22/bat-christmas/nocal/dec-22-bat-christmas-nocal-1280x1024.png\">1280x1024</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-22/bat-christmas/nocal/dec-22-bat-christmas-nocal-1366x768.png\">1366x768</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-22/bat-christmas/nocal/dec-22-bat-christmas-nocal-1400x1050.png\">1400x1050</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-22/bat-christmas/nocal/dec-22-bat-christmas-nocal-1440x900.png\">1440x900</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-22/bat-christmas/nocal/dec-22-bat-christmas-nocal-1600x1200.png\">1600x1200</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-22/bat-christmas/nocal/dec-22-bat-christmas-nocal-1680x1050.png\">1680x1050</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-22/bat-christmas/nocal/dec-22-bat-christmas-nocal-1680x1200.png\">1680x1200</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-22/bat-christmas/nocal/dec-22-bat-christmas-nocal-1920x1080.png\">1920x1080</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-22/bat-christmas/nocal/dec-22-bat-christmas-nocal-1920x1200.png\">1920x1200</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-22/bat-christmas/nocal/dec-22-bat-christmas-nocal-1920x1440.png\">1920x1440</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-22/bat-christmas/nocal/dec-22-bat-christmas-nocal-2560x1440.png\">2560x1440</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-22/bat-christmas/nocal/dec-22-bat-christmas-nocal-3840x2160.png\">3840x2160</a></li>\n</ul>\n\n<p></p>Enchanted Blizzard<p></p>\n<p></p><p>“A seemingly forgotten world under the shade of winter glaze hides a moment where architecture meets fashion and change encounters steadiness.” — Designed by <a href=\"https://www.creitive.com/\">Ana Masnikosa</a> from Belgrade, Serbia.</p><p></p>\n<p></p><a href=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/913ccea9-595b-4aff-9550-0afec57203cc/dec-17-enchanted-blizzard-full-opt.png\"><img src=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/21da6af5-5de8-44c2-9a02-d0e17a1425fa/dec-17-enchanted-blizzard-preview-opt.png\" /></a><p></p>\n<ul>\n<li><a href=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/21da6af5-5de8-44c2-9a02-d0e17a1425fa/dec-17-enchanted-blizzard-preview-opt.png\">preview</a></li>\n<li>without calendar: <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/enchanted-blizzard/nocal/dec-17-enchanted-blizzard-nocal-320x480.png\">320x480</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/enchanted-blizzard/nocal/dec-17-enchanted-blizzard-nocal-640x480.png\">640x480</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/enchanted-blizzard/nocal/dec-17-enchanted-blizzard-nocal-800x480.png\">800x480</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/enchanted-blizzard/nocal/dec-17-enchanted-blizzard-nocal-800x600.png\">800x600</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/enchanted-blizzard/nocal/dec-17-enchanted-blizzard-nocal-1024x768.png\">1024x768</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/enchanted-blizzard/nocal/dec-17-enchanted-blizzard-nocal-1024x1024.png\">1024x1024</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/enchanted-blizzard/nocal/dec-17-enchanted-blizzard-nocal-1152x864.png\">1152x864</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/enchanted-blizzard/nocal/dec-17-enchanted-blizzard-nocal-1280x720.png\">1280x720</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/enchanted-blizzard/nocal/dec-17-enchanted-blizzard-nocal-1280x800.png\">1280x800</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/enchanted-blizzard/nocal/dec-17-enchanted-blizzard-nocal-1280x960.png\">1280x960</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/enchanted-blizzard/nocal/dec-17-enchanted-blizzard-nocal-1280x1024.png\">1280x1024</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/enchanted-blizzard/nocal/dec-17-enchanted-blizzard-nocal-1400x1050.png\">1400x1050</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/enchanted-blizzard/nocal/dec-17-enchanted-blizzard-nocal-1440x900.png\">1440x900</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/enchanted-blizzard/nocal/dec-17-enchanted-blizzard-nocal-1600x1200.png\">1600x1200</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/enchanted-blizzard/nocal/dec-17-enchanted-blizzard-nocal-1680x1050.png\">1680x1050</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/enchanted-blizzard/nocal/dec-17-enchanted-blizzard-nocal-1680x1200.png\">1680x1200</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/enchanted-blizzard/nocal/dec-17-enchanted-blizzard-nocal-1920x1080.png\">1920x1080</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/enchanted-blizzard/nocal/dec-17-enchanted-blizzard-nocal-1920x1200.png\">1920x1200</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/enchanted-blizzard/nocal/dec-17-enchanted-blizzard-nocal-1920x1440.png\">1920x1440</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/enchanted-blizzard/nocal/dec-17-enchanted-blizzard-nocal-2560x1440.png\">2560x1440</a></li>\n</ul>\n\n<p></p>King Of Pop<p></p>\n<p></p><p>Designed by <a href=\"https://www.ricardogimenes.com/\">Ricardo Gimenes</a> from Sweden.</p><p></p>\n<p></p><a href=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/45cc8a5d-29ae-435d-a68d-2991d779c936/dec-21-king-of-pop-nocal-full-opt.png\"><img src=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cd870c1d-c7fb-44ab-9e70-5cac012691fb/dec-21-king-of-pop-nocal-preview-opt.png\" /></a><p></p>\n<ul>\n<li><a href=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cd870c1d-c7fb-44ab-9e70-5cac012691fb/dec-21-king-of-pop-nocal-preview-opt.png\">preview</a></li>\n<li>without calendar: <a href=\"https://smashingmagazine.com/files/wallpapers/dec-21/king-of-pop/nocal/dec-21-king-of-pop-nocal-640x480.png\">640x480</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-21/king-of-pop/nocal/dec-21-king-of-pop-nocal-800x480.png\">800x480</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-21/king-of-pop/nocal/dec-21-king-of-pop-nocal-800x600.png\">800x600</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-21/king-of-pop/nocal/dec-21-king-of-pop-nocal-1024x768.png\">1024x768</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-21/king-of-pop/nocal/dec-21-king-of-pop-nocal-1024x1024.png\">1024x1024</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-21/king-of-pop/nocal/dec-21-king-of-pop-nocal-1152x864.png\">1152x864</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-21/king-of-pop/nocal/dec-21-king-of-pop-nocal-1280x720.png\">1280x720</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-21/king-of-pop/nocal/dec-21-king-of-pop-nocal-1280x800.png\">1280x800</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-21/king-of-pop/nocal/dec-21-king-of-pop-nocal-1280x960.png\">1280x960</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-21/king-of-pop/nocal/dec-21-king-of-pop-nocal-1280x1024.png\">1280x1024</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-21/king-of-pop/nocal/dec-21-king-of-pop-nocal-1366x768.png\">1366x768</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-21/king-of-pop/nocal/dec-21-king-of-pop-nocal-1400x1050.png\">1400x1050</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-21/king-of-pop/nocal/dec-21-king-of-pop-nocal-1440x900.png\">1440x900</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-21/king-of-pop/nocal/dec-21-king-of-pop-nocal-1600x1200.png\">1600x1200</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-21/king-of-pop/nocal/dec-21-king-of-pop-nocal-1680x1050.png\">1680x1050</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-21/king-of-pop/nocal/dec-21-king-of-pop-nocal-1680x1200.png\">1680x1200</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-21/king-of-pop/nocal/dec-21-king-of-pop-nocal-1920x1080.png\">1920x1080</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-21/king-of-pop/nocal/dec-21-king-of-pop-nocal-1920x1200.png\">1920x1200</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-21/king-of-pop/nocal/dec-21-king-of-pop-nocal-1920x1440.png\">1920x1440</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-21/king-of-pop/nocal/dec-21-king-of-pop-nocal-2560x1440.png\">2560x1440</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-21/king-of-pop/nocal/dec-21-king-of-pop-nocal-3840x2160.png\">3840x2160</a></li>\n</ul>\n\n<p></p>Winter Garphee<p></p>\n<p></p><p>“Garphee’s flufiness glowing in the snow.” Designed by Razvan Garofeanu from Romania.</p><p></p>\n<p></p><a href=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/acb0bd7c-2868-4176-9468-d1e06f31f96f/december-12-winter-garphee-81-full-opt.png\"><img src=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/158e76da-934e-4e62-bdb1-32616ccd9e84/december-12-winter-garphee-81-preview-opt.png\" /></a><p></p>\n<ul>\n<li><a href=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/158e76da-934e-4e62-bdb1-32616ccd9e84/december-12-winter-garphee-81-preview-opt.png\">preview</a></li>\n<li>without calendar: <a href=\"https://smashingmagazine.com/files/wallpapers/december-12/december-12-winter_garphee__81-nocal-320x480.jpg\">320x480</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/december-12/december-12-winter_garphee__81-nocal-1024x768.jpg\">1024x768</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/december-12/december-12-winter_garphee__81-nocal-1024x1024.jpg\">1024x1024</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/december-12/december-12-winter_garphee__81-nocal-1280x800.jpg\">1280x800</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/december-12/december-12-winter_garphee__81-nocal-1280x1024.jpg\">1280x1024</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/december-12/december-12-winter_garphee__81-nocal-1366x768.jpg\">1366x768</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/december-12/december-12-winter_garphee__81-nocal-1440x900.jpg\">1440x900</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/december-12/december-12-winter_garphee__81-nocal-1680x1050.jpg\">1680x1050</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/december-12/december-12-winter_garphee__81-nocal-1920x1080.jpg\">1920x1080</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/december-12/december-12-winter_garphee__81-nocal-1920x1200.jpg\">1920x1200</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/december-12/december-12-winter_garphee__81-nocal-2560x1440.jpg\">2560x1440</a></li>\n</ul>\n\n<p></p>Joy To The World<p></p>\n<p></p><p>“Joy to the world, all the boys and girls now, joy to the fishes in the deep blue sea, joy to you and me.” — Designed by Morgan Newnham from Boulder, Colorado.</p><p></p>\n<p></p><a href=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/542d1894-584a-4537-b3c1-142deda3ab5c/dec-17-joy-to-the-world-full-opt.png\"><img src=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/68553142-95b5-47da-9007-e50407f8c5d9/dec-17-joy-to-the-world-preview-opt.png\" /></a><p></p>\n<ul>\n<li><a href=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/68553142-95b5-47da-9007-e50407f8c5d9/dec-17-joy-to-the-world-preview-opt.png\">preview</a></li>\n<li>without calendar: <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/joy-to-the-world/nocal/dec-17-joy-to-the-world-nocal-320x480.png\">320x480</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/joy-to-the-world/nocal/dec-17-joy-to-the-world-nocal-640x480.png\">640x480</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/joy-to-the-world/nocal/dec-17-joy-to-the-world-nocal-800x480.png\">800x480</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/joy-to-the-world/nocal/dec-17-joy-to-the-world-nocal-800x600.png\">800x600</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/joy-to-the-world/nocal/dec-17-joy-to-the-world-nocal-1024x768.png\">1024x768</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/joy-to-the-world/nocal/dec-17-joy-to-the-world-nocal-1024x1024.png\">1024x1024</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/joy-to-the-world/nocal/dec-17-joy-to-the-world-nocal-1152x864.png\">1152x864</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/joy-to-the-world/nocal/dec-17-joy-to-the-world-nocal-1280x720.png\">1280x720</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/joy-to-the-world/nocal/dec-17-joy-to-the-world-nocal-1280x800.png\">1280x800</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/joy-to-the-world/nocal/dec-17-joy-to-the-world-nocal-1280x960.png\">1280x960</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/joy-to-the-world/nocal/dec-17-joy-to-the-world-nocal-1280x1024.png\">1280x1024</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/joy-to-the-world/nocal/dec-17-joy-to-the-world-nocal-1400x1050.png\">1400x1050</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/joy-to-the-world/nocal/dec-17-joy-to-the-world-nocal-1440x900.png\">1440x900</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/joy-to-the-world/nocal/dec-17-joy-to-the-world-nocal-1600x1200.png\">1600x1200</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/joy-to-the-world/nocal/dec-17-joy-to-the-world-nocal-1680x1050.png\">1680x1050</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/joy-to-the-world/nocal/dec-17-joy-to-the-world-nocal-1680x1200.png\">1680x1200</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/joy-to-the-world/nocal/dec-17-joy-to-the-world-nocal-1920x1080.png\">1920x1080</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/joy-to-the-world/nocal/dec-17-joy-to-the-world-nocal-1920x1200.png\">1920x1200</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/joy-to-the-world/nocal/dec-17-joy-to-the-world-nocal-1920x1440.png\">1920x1440</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/joy-to-the-world/nocal/dec-17-joy-to-the-world-nocal-2560x1440.png\">2560x1440</a></li>\n</ul>\n\n\n\n<p></p>Ninja Santa<p></p>\n<p></p><p>Designed by Elise Vanoorbeek from Belgium.</p><p></p>\n<p></p><a href=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/caf4e170-afb2-458a-af83-b67925f3ea7e/dec-13-ninja-santa-full-opt.png\"><img src=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/72db2dde-7f71-4aac-88c3-f17b540e8343/dec-13-ninja-santa-preview-opt.png\" /></a><p></p>\n<ul>\n<li><a href=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/72db2dde-7f71-4aac-88c3-f17b540e8343/dec-13-ninja-santa-preview-opt.png\">preview</a></li>\n<li>without calendar: <a href=\"https://smashingmagazine.com/files/wallpapers/dec-13/ninja-santa/nocal/dec-13-ninja-santa-nocal-1280x1024.jpg\">1280x1024</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-13/ninja-santa/nocal/dec-13-ninja-santa-nocal-1366x768.jpg\">1366x768</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-13/ninja-santa/nocal/dec-13-ninja-santa-nocal-1400x1050.jpg\">1400x1050</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-13/ninja-santa/nocal/dec-13-ninja-santa-nocal-1440x900.jpg\">1440x900</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-13/ninja-santa/nocal/dec-13-ninja-santa-nocal-1600x1200.jpg\">1600x1200</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-13/ninja-santa/nocal/dec-13-ninja-santa-nocal-1680x1050.jpg\">1680x1050</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-13/ninja-santa/nocal/dec-13-ninja-santa-nocal-1680x1200.jpg\">1680x1200</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-13/ninja-santa/nocal/dec-13-ninja-santa-nocal-1920x1080.jpg\">1920x1080</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-13/ninja-santa/nocal/dec-13-ninja-santa-nocal-1920x1440.jpg\">1920x1440</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-13/ninja-santa/nocal/dec-13-ninja-santa-nocal-2560x1440.jpg\">2560x1440</a></li></ul>\n\n<p></p>Hot Hot Hot!<p></p>\n<p></p><p>Designed by <a href=\"https://www.ricardogimenes.com/\">Ricardo Gimenes</a> from Sweden.</p><p></p>\n<p></p><a href=\"https://files.smashing.media/articles/desktop-wallpaper-calendars-dec-2023/dec-22-hot-hot-hot-full-opt.png\"><img src=\"https://files.smashing.media/articles/desktop-wallpaper-calendars-dec-2023/dec-22-hot-hot-hot-preview-opt.png\" /></a><p></p>\n<ul>\n<li><a href=\"https://files.smashing.media/articles/desktop-wallpaper-calendars-dec-2023/dec-22-hot-hot-hot-preview-opt.png\">preview</a></li>\n<li>without calendar: <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-22/hot-hot-hot/nocal/dec-22-hot-hot-hot-nocal-640x480.png\">640x480</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-22/hot-hot-hot/nocal/dec-22-hot-hot-hot-nocal-800x480.png\">800x480</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-22/hot-hot-hot/nocal/dec-22-hot-hot-hot-nocal-800x600.png\">800x600</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-22/hot-hot-hot/nocal/dec-22-hot-hot-hot-nocal-1024x768.png\">1024x768</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-22/hot-hot-hot/nocal/dec-22-hot-hot-hot-nocal-1024x1024.png\">1024x1024</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-22/hot-hot-hot/nocal/dec-22-hot-hot-hot-nocal-1152x864.png\">1152x864</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-22/hot-hot-hot/nocal/dec-22-hot-hot-hot-nocal-1280x720.png\">1280x720</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-22/hot-hot-hot/nocal/dec-22-hot-hot-hot-nocal-1280x800.png\">1280x800</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-22/hot-hot-hot/nocal/dec-22-hot-hot-hot-nocal-1280x960.png\">1280x960</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-22/hot-hot-hot/nocal/dec-22-hot-hot-hot-nocal-1280x1024.png\">1280x1024</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-22/hot-hot-hot/nocal/dec-22-hot-hot-hot-nocal-1366x768.png\">1366x768</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-22/hot-hot-hot/nocal/dec-22-hot-hot-hot-nocal-1400x1050.png\">1400x1050</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-22/hot-hot-hot/nocal/dec-22-hot-hot-hot-nocal-1440x900.png\">1440x900</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-22/hot-hot-hot/nocal/dec-22-hot-hot-hot-nocal-1600x1200.png\">1600x1200</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-22/hot-hot-hot/nocal/dec-22-hot-hot-hot-nocal-1680x1050.png\">1680x1050</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-22/hot-hot-hot/nocal/dec-22-hot-hot-hot-nocal-1680x1200.png\">1680x1200</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-22/hot-hot-hot/nocal/dec-22-hot-hot-hot-nocal-1920x1080.png\">1920x1080</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-22/hot-hot-hot/nocal/dec-22-hot-hot-hot-nocal-1920x1200.png\">1920x1200</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-22/hot-hot-hot/nocal/dec-22-hot-hot-hot-nocal-1920x1440.png\">1920x1440</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-22/hot-hot-hot/nocal/dec-22-hot-hot-hot-nocal-2560x1440.png\">2560x1440</a>, <a href=\"https://www.smashingmagazine.com/files/wallpapers/dec-22/hot-hot-hot/nocal/dec-22-hot-hot-hot-nocal-3840x2160.png\">3840x2160</a></li>\n</ul>\n\n<p></p>Christmas Cookies<p></p>\n<p></p><p>“Christmas is coming and a great way to share our love is by baking cookies.” — Designed by <a href=\"https://www.mariakellerac.com\">Maria Keller</a> from Mexico.</p><p></p>\n<p></p><a href=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/57f8e478-f6a2-4eeb-bac0-45d8dd01d7cb/dec-17-christmas-cookies-full.png\"><img src=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/251c117b-6e3a-42eb-b274-82af1abf00ed/dec-17-christmas-cookies-preview-opt.png\" /></a><p></p>\n<ul>\n<li><a href=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/251c117b-6e3a-42eb-b274-82af1abf00ed/dec-17-christmas-cookies-preview-opt.png\">preview</a></li>\n<li>without calendar: <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/christmas-cookies/nocal/dec-17-christmas-cookies-nocal-320x480.png\">320x480</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/christmas-cookies/nocal/dec-17-christmas-cookies-nocal-640x480.png\">640x480</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/christmas-cookies/nocal/dec-17-christmas-cookies-nocal-640x1136.png\">640x1136</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/christmas-cookies/nocal/dec-17-christmas-cookies-nocal-750x1334.png\">750x1334</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/christmas-cookies/nocal/dec-17-christmas-cookies-nocal-800x480.png\">800x480</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/christmas-cookies/nocal/dec-17-christmas-cookies-nocal-800x600.png\">800x600</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/christmas-cookies/nocal/dec-17-christmas-cookies-nocal-1024x768.png\">1024x768</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/christmas-cookies/nocal/dec-17-christmas-cookies-nocal-1024x1024.png\">1024x1024</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/christmas-cookies/nocal/dec-17-christmas-cookies-nocal-1152x864.png\">1152x864</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/christmas-cookies/nocal/dec-17-christmas-cookies-nocal-1242x2208.png\">1242x2208</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/christmas-cookies/nocal/dec-17-christmas-cookies-nocal-1280x720.png\">1280x720</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/christmas-cookies/nocal/dec-17-christmas-cookies-nocal-1280x800.png\">1280x800</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/christmas-cookies/nocal/dec-17-christmas-cookies-nocal-1280x960.png\">1280x960</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/christmas-cookies/nocal/dec-17-christmas-cookies-nocal-1280x1024.png\">1280x1024</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/christmas-cookies/nocal/dec-17-christmas-cookies-nocal-1366x768.png\">1366x768</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/christmas-cookies/nocal/dec-17-christmas-cookies-nocal-1400x1050.png\">1400x1050</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/christmas-cookies/nocal/dec-17-christmas-cookies-nocal-1440x900.png\">1440x900</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/christmas-cookies/nocal/dec-17-christmas-cookies-nocal-1600x1200.png\">1600x1200</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/christmas-cookies/nocal/dec-17-christmas-cookies-nocal-1680x1050.png\">1680x1050</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/christmas-cookies/nocal/dec-17-christmas-cookies-nocal-1680x1200.png\">1680x1200</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/christmas-cookies/nocal/dec-17-christmas-cookies-nocal-1920x1080.png\">1920x1080</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/christmas-cookies/nocal/dec-17-christmas-cookies-nocal-1920x1200.png\">1920x1200</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/christmas-cookies/nocal/dec-17-christmas-cookies-nocal-1920x1440.png\">1920x1440</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/christmas-cookies/nocal/dec-17-christmas-cookies-nocal-2560x1440.png\">2560x1440</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/christmas-cookies/nocal/dec-17-christmas-cookies-nocal-2880x1800.png\">2880x1800</a></li>\n</ul>\n\n<p></p>Sweet Snowy Tenderness<p></p>\n<p></p><p>“You know that warm feeling when you get to spend cold winter days in a snug, homey, relaxed atmosphere? Oh, yes, we love it, too! It is the sentiment we set our hearts on for the holiday season, and this sweet snowy tenderness is for all of us who adore watching the snowfall from our windows. Isn’t it romantic?” — Designed by <a href=\"https://www.popwebdesign.net/\">PopArt Studio</a> from Serbia.</p><p></p>\n<p></p><a href=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/29ad3ce1-0f4e-4c84-a7fd-222e00e8f544/dec-18-sweet-snowy-tenderness-full-opt.png\"><img src=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6179490e-9ece-4078-8a4b-d37c27f546b4/dec-18-sweet-snowy-tenderness-preview-opt.png\" /></a><p></p>\n<ul>\n<li><a href=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6179490e-9ece-4078-8a4b-d37c27f546b4/dec-18-sweet-snowy-tenderness-preview-opt.png\">preview</a></li>\n<li>without calendar: <a href=\"https://smashingmagazine.com/files/wallpapers/dec-18/sweet-snowy-tenderness/nocal/dec-18-sweet-snowy-tenderness-nocal-320x480.jpg\">320x480</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-18/sweet-snowy-tenderness/nocal/dec-18-sweet-snowy-tenderness-nocal-640x480.jpg\">640x480</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-18/sweet-snowy-tenderness/nocal/dec-18-sweet-snowy-tenderness-nocal-800x480.jpg\">800x480</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-18/sweet-snowy-tenderness/nocal/dec-18-sweet-snowy-tenderness-nocal-800x600.jpg\">800x600</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-18/sweet-snowy-tenderness/nocal/dec-18-sweet-snowy-tenderness-nocal-1024x768.jpg\">1024x768</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-18/sweet-snowy-tenderness/nocal/dec-18-sweet-snowy-tenderness-nocal-1024x1024.jpg\">1024x1024</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-18/sweet-snowy-tenderness/nocal/dec-18-sweet-snowy-tenderness-nocal-1152x864.jpg\">1152x864</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-18/sweet-snowy-tenderness/nocal/dec-18-sweet-snowy-tenderness-nocal-1280x720.jpg\">1280x720</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-18/sweet-snowy-tenderness/nocal/dec-18-sweet-snowy-tenderness-nocal-1280x800.jpg\">1280x800</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-18/sweet-snowy-tenderness/nocal/dec-18-sweet-snowy-tenderness-nocal-1280x960.jpg\">1280x960</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-18/sweet-snowy-tenderness/nocal/dec-18-sweet-snowy-tenderness-nocal-1280x1024.jpg\">1280x1024</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-18/sweet-snowy-tenderness/nocal/dec-18-sweet-snowy-tenderness-nocal-1366x768.jpg\">1366x768</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-18/sweet-snowy-tenderness/nocal/dec-18-sweet-snowy-tenderness-nocal-1400x1050.jpg\">1400x1050</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-18/sweet-snowy-tenderness/nocal/dec-18-sweet-snowy-tenderness-nocal-1440x900.jpg\">1440x900</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-18/sweet-snowy-tenderness/nocal/dec-18-sweet-snowy-tenderness-nocal-1600x1200.jpg\">1600x1200</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-18/sweet-snowy-tenderness/nocal/dec-18-sweet-snowy-tenderness-nocal-1680x1050.jpg\">1680x1050</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-18/sweet-snowy-tenderness/nocal/dec-18-sweet-snowy-tenderness-nocal-1680x1200.jpg\">1680x1200</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-18/sweet-snowy-tenderness/nocal/dec-18-sweet-snowy-tenderness-nocal-1920x1080.jpg\">1920x1080</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-18/sweet-snowy-tenderness/nocal/dec-18-sweet-snowy-tenderness-nocal-1920x1200.jpg\">1920x1200</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-18/sweet-snowy-tenderness/nocal/dec-18-sweet-snowy-tenderness-nocal-1920x1440.jpg\">1920x1440</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-18/sweet-snowy-tenderness/nocal/dec-18-sweet-snowy-tenderness-nocal-2560x1440.jpg\">2560x1440</a></li>\n</ul>\n\n<p></p>All That Belongs To The Past<p></p>\n<p></p><p>“Sometimes new beginnings make us revisit our favorite places or people from the past. We don’t visit them often because they remind us of the past but enjoy the brief reunion. Cheers to new beginnings in the new year!” Designed by <a href=\"https://dorvandavoudi.com\">Dorvan Davoudi</a> from Canada.</p><p></p>\n<p></p><a href=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/102edbd6-ebf2-4df9-9218-7d506a069725/jan-16-all-that-belongs-to-the-past-full-opt.png\"><img src=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e3260240-ab67-4cc8-b391-6e4a412e8b75/jan-16-all-that-belongs-to-the-past-preview-opt.png\" /></a><p></p>\n<ul>\n<li><a href=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e3260240-ab67-4cc8-b391-6e4a412e8b75/jan-16-all-that-belongs-to-the-past-preview-opt.png\">preview</a></li>\n<li>without calendar: <a href=\"https://smashingmagazine.com/files/wallpapers/jan-16/all-that-belongs-to-the-past/nocal/jan-16-all-that-belongs-to-the-past-nocal-800x480.jpg\">800x480</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/jan-16/all-that-belongs-to-the-past/nocal/jan-16-all-that-belongs-to-the-past-nocal-800x600.jpg\">800x600</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/jan-16/all-that-belongs-to-the-past/nocal/jan-16-all-that-belongs-to-the-past-nocal-1024x1024.jpg\">1024x1024</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/jan-16/all-that-belongs-to-the-past/nocal/jan-16-all-that-belongs-to-the-past-nocal-1152x864.jpg\">1152x864</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/jan-16/all-that-belongs-to-the-past/nocal/jan-16-all-that-belongs-to-the-past-nocal-1280x720.jpg\">1280x720</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/jan-16/all-that-belongs-to-the-past/nocal/jan-16-all-that-belongs-to-the-past-nocal-1280x800.jpg\">1280x800</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/jan-16/all-that-belongs-to-the-past/nocal/jan-16-all-that-belongs-to-the-past-nocal-1280x960.jpg\">1280x960</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/jan-16/all-that-belongs-to-the-past/nocal/jan-16-all-that-belongs-to-the-past-nocal-1280x1024.jpg\">1280x1024</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/jan-16/all-that-belongs-to-the-past/nocal/jan-16-all-that-belongs-to-the-past-nocal-1366x768.jpg\">1366x768</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/jan-16/all-that-belongs-to-the-past/nocal/jan-16-all-that-belongs-to-the-past-nocal-1400x1050.jpg\">1400x1050</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/jan-16/all-that-belongs-to-the-past/nocal/jan-16-all-that-belongs-to-the-past-nocal-1440x900.jpg\">1440x900</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/jan-16/all-that-belongs-to-the-past/nocal/jan-16-all-that-belongs-to-the-past-nocal-1600x1200.jpg\">1600x1200</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/jan-16/all-that-belongs-to-the-past/nocal/jan-16-all-that-belongs-to-the-past-nocal-1680x1050.jpg\">1680x1050</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/jan-16/all-that-belongs-to-the-past/nocal/jan-16-all-that-belongs-to-the-past-nocal-1680x1200.jpg\">1680x1200</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/jan-16/all-that-belongs-to-the-past/nocal/jan-16-all-that-belongs-to-the-past-nocal-1920x1080.jpg\">1920x1080</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/jan-16/all-that-belongs-to-the-past/nocal/jan-16-all-that-belongs-to-the-past-nocal-1920x1200.jpg\">1920x1200</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/jan-16/all-that-belongs-to-the-past/nocal/jan-16-all-that-belongs-to-the-past-nocal-1920x1440.jpg\">1920x1440</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/jan-16/all-that-belongs-to-the-past/nocal/jan-16-all-that-belongs-to-the-past-nocal-2560x1440.jpg\">2560x1440</a></li>\n</ul>\n\n<p></p>Trailer Santa<p></p>\n<p></p><p>“A mid-century modern Christmas scene outside the norm of snowflakes and winter landscapes.” Designed by Houndstooth from the United States.</p><p></p>\n<p></p><a href=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/40a7c173-9928-4a55-bc4c-4d48f339b3da/december-12-trailer-santa-21-full-opt.png\"><img src=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1d3703c2-593a-4ff4-a08a-52cb237ddb64/december-12-trailer-santa-21-preview-opt.png\" /></a><p></p>\n<ul>\n<li><a href=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1d3703c2-593a-4ff4-a08a-52cb237ddb64/december-12-trailer-santa-21-preview-opt.png\">preview</a></li>\n<li>without calendar: <a href=\"https://smashingmagazine.com/files/wallpapers/december-12/december-12-trailer_santa__21-nocal-1024x1024.jpg\">1024x1024</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/december-12/december-12-trailer_santa__21-nocal-1280x800.jpg\">1280x800</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/december-12/december-12-trailer_santa__21-nocal-1280x1024.jpg\">1280x1024</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/december-12/december-12-trailer_santa__21-nocal-1440x900.jpg\">1440x900</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/december-12/december-12-trailer_santa__21-nocal-1680x1050.jpg\">1680x1050</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/december-12/december-12-trailer_santa__21-nocal-2560x1440.jpg\">2560x1440</a></li>\n</ul>\n\n<p></p>Getting Hygge<p></p>\n<p></p><p>“There’s no more special time for a fire than in the winter. Cozy blankets, warm beverages, and good company can make all the difference when the sun goes down. We’re all looking forward to generating some hygge this winter, so snuggle up and make some memories.” — Designed by <a href=\"https://bit.ly/TheHannonGroup\">The Hannon Group</a> from Washington D.C.</p><p></p>\n<p></p><a href=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ad2c8c59-c9c4-4153-a57e-8602ff6e09d7/dec-17-getting-hygge-full-opt.png\"><img src=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1145e84f-229d-4f9e-82b6-370c707e695c/dec-17-getting-hygge-preview-opt.png\" /></a><p></p>\n<ul>\n<li><a href=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1145e84f-229d-4f9e-82b6-370c707e695c/dec-17-getting-hygge-preview-opt.png\">preview</a></li>\n<li>without calendar: <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/getting-hygge/nocal/dec-17-getting-hygge-nocal-320x480.png\">320x480</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/getting-hygge/nocal/dec-17-getting-hygge-nocal-640x480.png\">640x480</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/getting-hygge/nocal/dec-17-getting-hygge-nocal-800x600.png\">800x600</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/getting-hygge/nocal/dec-17-getting-hygge-nocal-1024x768.png\">1024x768</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/getting-hygge/nocal/dec-17-getting-hygge-nocal-1280x960.png\">1280x960</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/getting-hygge/nocal/dec-17-getting-hygge-nocal-1440x900.png\">1440x900</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/getting-hygge/nocal/dec-17-getting-hygge-nocal-1600x1200.png\">1600x1200</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/getting-hygge/nocal/dec-17-getting-hygge-nocal-1680x1050.png\">1680x1050</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/getting-hygge/nocal/dec-17-getting-hygge-nocal-1680x1200.png\">1680x1200</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/getting-hygge/nocal/dec-17-getting-hygge-nocal-1920x1080.png\">1920x1080</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/getting-hygge/nocal/dec-17-getting-hygge-nocal-1920x1440.png\">1920x1440</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/getting-hygge/nocal/dec-17-getting-hygge-nocal-2560x1440.png\">2560x1440</a></li>\n</ul>\n\n<p></p>December Through Different Eyes<p></p>\n<p></p><p>“As a Belgian, December reminds me of snow, cosiness, winter, lights, and so on. However, in the Southern Hemisphere, it is summer at this time. With my illustration I wanted to show the different perspectives on December. I wish you all a Merry Christmas and Happy New Year!” — Designed by Jo Smets from Belgium.</p><p></p>\n<p></p><a href=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9a6afdb7-0898-40ce-9a8c-8d9b0b72db1c/dec-16-december-through-different-eyes-full-opt.png\"><img src=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/052848c9-5532-465f-bbac-760188d9f416/dec-16-december-through-different-eyes-preview-opt.png\" /></a><p></p>\n<ul>\n<li><a href=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/052848c9-5532-465f-bbac-760188d9f416/dec-16-december-through-different-eyes-preview-opt.png\">preview</a></li>\n<li>without calendar: <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/december-through-different-eyes/nocal/dec-16-december-through-different-eyes-nocal-320x480.png\">320x480</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/december-through-different-eyes/nocal/dec-16-december-through-different-eyes-nocal-800x480.png\">800x480</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/december-through-different-eyes/nocal/dec-16-december-through-different-eyes-nocal-1280x800.png\">1280x800</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/december-through-different-eyes/nocal/dec-16-december-through-different-eyes-nocal-1280x1024.png\">1280x1024</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/december-through-different-eyes/nocal/dec-16-december-through-different-eyes-nocal-1920x1080.png\">1920x1080</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/december-through-different-eyes/nocal/dec-16-december-through-different-eyes-nocal-2560x1440.png\">2560x1440</a></li>\n</ul>\n\n<p></p>Ice Flowers<p></p>\n<p></p><p>“I took some photos during a very frosty and cold week before Christmas.” Designed by <a href=\"https://kyu-to.deviantart.com\">Anca Varsandan</a> from Romania.</p><p></p>\n<p></p><a href=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f14d58a3-b787-483b-a2e4-a3400d50dfed/january-10-ice-flowers-full-opt.png\"><img src=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7b4a5499-4254-4d4f-a460-0f0964721a55/january-10-ice-flowers-preview-opt.png\" /></a><p></p>\n<ul>\n<li><a href=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7b4a5499-4254-4d4f-a460-0f0964721a55/january-10-ice-flowers-preview-opt.png\">preview</a></li>\n<li>without calendar: <a href=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/101dfe78-547b-4f28-ad00-c3f08302cbe1/january-10-ice-flowers-nocal-1024x768.jpg\">1024x768</a>, <a href=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/33993672-e95d-4729-a836-7af5f941812c/january-10-ice-flowers-nocal-1280x800.jpg\">1280x800</a>, <a href=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/14522cd5-614d-4597-b488-44ffa3e6f3f2/january-10-ice-flowers-nocal-1440x900.jpg\">1440x900</a>, <a href=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0d43a061-dd0c-47f9-af83-a3d7413c719b/january-10-ice-flowers-nocal-1680x1050.jpg\">1680x1050</a>, <a href=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f3822fa3-5814-4b90-96bc-ef75191a9243/january-10-ice-flowers-nocal-1920x1200.jpg\">1920x1200</a></li>\n</ul>\n\n<p></p>Bathtub Party Day<p></p>\n<p></p><p>“December 5th is also known as Bathtub Party Day, which is why I wanted to visualize what celebrating this day could look like.” — Designed by <a href=\"https://www.behance.net/jonasvanhamme\">Jonas Vanhamme</a> from Belgium.</p><p></p>\n<p></p><a href=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cae906bc-d96d-498c-8598-9201b5c1c0dd/dec-18-bathtub-party-day-full-opt.png\"><img src=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bfad32db-a716-4d4a-aeae-98411e78127d/dec-18-bathtub-party-day-preview-opt.png\" /></a><p></p>\n<ul>\n<li><a href=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bfad32db-a716-4d4a-aeae-98411e78127d/dec-18-bathtub-party-day-preview-opt.png\">preview</a></li>\n<li>without calendar: <a href=\"https://smashingmagazine.com/files/wallpapers/dec-18/bathtub-party-day/nocal/dec-18-bathtub-party-day-nocal-320x480.png\">320x480</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-18/bathtub-party-day/nocal/dec-18-bathtub-party-day-nocal-640x480.png\">640x480</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-18/bathtub-party-day/nocal/dec-18-bathtub-party-day-nocal-800x480.png\">800x480</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-18/bathtub-party-day/nocal/dec-18-bathtub-party-day-nocal-800x600.png\">800x600</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-18/bathtub-party-day/nocal/dec-18-bathtub-party-day-nocal-1024x768.png\">1024x768</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-18/bathtub-party-day/nocal/dec-18-bathtub-party-day-nocal-1280x720.png\">1280x720</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-18/bathtub-party-day/nocal/dec-18-bathtub-party-day-nocal-1280x800.png\">1280x800</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-18/bathtub-party-day/nocal/dec-18-bathtub-party-day-nocal-1280x960.png\">1280x960</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-18/bathtub-party-day/nocal/dec-18-bathtub-party-day-nocal-1400x1050.png\">1400x1050</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-18/bathtub-party-day/nocal/dec-18-bathtub-party-day-nocal-1600x1200.png\">1600x1200</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-18/bathtub-party-day/nocal/dec-18-bathtub-party-day-nocal-1680x1200.png\">1680x1200</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-18/bathtub-party-day/nocal/dec-18-bathtub-party-day-nocal-1920x1080.png\">1920x1080</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-18/bathtub-party-day/nocal/dec-18-bathtub-party-day-nocal-1920x1200.png\">1920x1200</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-18/bathtub-party-day/nocal/dec-18-bathtub-party-day-nocal-1920x1440.png\">1920x1440</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-18/bathtub-party-day/nocal/dec-18-bathtub-party-day-nocal-2560x1440.png\">2560x1440</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-18/bathtub-party-day/nocal/dec-18-bathtub-party-day-nocal-2560x1600.png\">2560x1600</a></li>\n</ul>\n\n\n\n<p></p>Silver Winter<p></p>\n<p></p><p>Designed by <a href=\"https://www.violetadabija.com\">Violeta Dabija</a> from Moldova.</p><p></p>\n<p></p><a href=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/37e2aa55-5962-44dd-86a7-9d677e3df446/january-11-silver-winter-full-opt.png\"><img src=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/00c28b2f-a996-41f4-a7f4-34c602e7bfd0/january-11-silver-winter-preview-opt.png\" /></a><p></p>\n<ul>\n<li><a href=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/00c28b2f-a996-41f4-a7f4-34c602e7bfd0/january-11-silver-winter-preview-opt.png\">preview</a></li>\n<li>without calendar: <a href=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4cb3a715-654c-4023-9ec9-a6714a653e46/january-11-silver-winter-52-nocal-1024x768.jpg\">1024x768</a>, <a href=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/35c171e7-9192-492e-bbef-55eaae9b0942/january-11-silver-winter-52-nocal-1280x800.jpg\">1280x800</a>, <a href=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1b99a584-7703-408f-bbd5-5f4e1ba2b4f5/january-11-silver-winter-52-nocal-1440x900.jpg\">1440x900</a>, <a href=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5950575b-f30d-4a0d-83e7-0fc877c911a5/january-11-silver-winter-52-nocal-1680x1050.jpg\">1680x1050</a>, <a href=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a862a30e-ec77-410c-b9a4-7f471a63472f/january-11-silver-winter-52-nocal-1920x1200.jpg\">1920x1200</a>, <a href=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e627ba9b-47ea-41c4-abb5-3aa7c936750a/january-11-silver-winter-52-nocal-2560x1440.jpg\">2560x1440</a></li>\n</ul>\n\n<p></p>Christmas Fail<p></p>\n<p></p><p>Designed by Elise Vanoorbeek from Belgium.</p><p></p>\n<p></p><a href=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0db86fe5-cae2-4bca-8326-bed120986579/dec-16-christmas-fail-full-opt.png\"><img src=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8d0f98a6-b37f-4269-909e-c373d9c6b932/dec-16-christmas-fail-preview-opt.png\" /></a><p></p>\n<ul>\n<li><a href=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8d0f98a6-b37f-4269-909e-c373d9c6b932/dec-16-christmas-fail-preview-opt.png\">preview</a></li>\n<li>without calendar: <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/christmas-fail/nocal/dec-16-christmas-fail-nocal-1024x768.jpg\">1024x768</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/christmas-fail/nocal/dec-16-christmas-fail-nocal-1024x1024.jpg\">1024x1024</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/christmas-fail/nocal/dec-16-christmas-fail-nocal-1152x864.jpg\">1152x864</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/christmas-fail/nocal/dec-16-christmas-fail-nocal-1280x720.jpg\">1280x720</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/christmas-fail/nocal/dec-16-christmas-fail-nocal-1280x800.jpg\">1280x800</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/christmas-fail/nocal/dec-16-christmas-fail-nocal-1280x960.jpg\">1280x960</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/christmas-fail/nocal/dec-16-christmas-fail-nocal-1280x1024.jpg\">1280x1024</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/christmas-fail/nocal/dec-16-christmas-fail-nocal-1366x768.jpg\">1366x768</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/christmas-fail/nocal/dec-16-christmas-fail-nocal-1400x1050.jpg\">1400x1050</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/christmas-fail/nocal/dec-16-christmas-fail-nocal-1440x900.jpg\">1440x900</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/christmas-fail/nocal/dec-16-christmas-fail-nocal-1600x1200.jpg\">1600x1200</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/christmas-fail/nocal/dec-16-christmas-fail-nocal-1680x1050.jpg\">1680x1050</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/christmas-fail/nocal/dec-16-christmas-fail-nocal-1680x1200.jpg\">1680x1200</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/christmas-fail/nocal/dec-16-christmas-fail-nocal-1920x1080.jpg\">1920x1080</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/christmas-fail/nocal/dec-16-christmas-fail-nocal-1920x1200.jpg\">1920x1200</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/christmas-fail/nocal/dec-16-christmas-fail-nocal-1920x1440.jpg\">1920x1440</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/christmas-fail/nocal/dec-16-christmas-fail-nocal-2560x1440.jpg\">2560x1440</a></li>\n</ul>\n\n<p></p>Catch Your Perfect Snowflake<p></p>\n<p></p><p>“This time of year, people tend to dream big and expect miracles. Let your dreams come true!” Designed by <a href=\"https://dribbble.com/izhik\">Igor Izhik</a> from Canada.</p><p></p>\n<p></p><a href=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b2f6a5c7-a3a2-4cb0-82c1-1fcfdb02e27d/dec-15-catch-your-perfect-snowflake-full-opt.png\"><img src=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/27fb2569-e973-4bcb-919a-f8d786e008b1/dec-15-catch-your-perfect-snowflake-preview-opt.png\" /></a><p></p>\n<ul>\n<li><a href=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/27fb2569-e973-4bcb-919a-f8d786e008b1/dec-15-catch-your-perfect-snowflake-preview-opt.png\">preview</a></li>\n<li>without calendar: <a href=\"https://smashingmagazine.com/files/wallpapers/dec-15/catch-your-perfect-snowflake/nocal/dec-15-catch-your-perfect-snowflake-nocal-800x480.jpg\">800x480</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-15/catch-your-perfect-snowflake/nocal/dec-15-catch-your-perfect-snowflake-nocal-800x600.jpg\">800x600</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-15/catch-your-perfect-snowflake/nocal/dec-15-catch-your-perfect-snowflake-nocal-1024x768.jpg\">1024x768</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-15/catch-your-perfect-snowflake/nocal/dec-15-catch-your-perfect-snowflake-nocal-1024x1024.jpg\">1024x1024</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-15/catch-your-perfect-snowflake/nocal/dec-15-catch-your-perfect-snowflake-nocal-1152x864.jpg\">1152x864</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-15/catch-your-perfect-snowflake/nocal/dec-15-catch-your-perfect-snowflake-nocal-1280x720.jpg\">1280x720</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-15/catch-your-perfect-snowflake/nocal/dec-15-catch-your-perfect-snowflake-nocal-1280x800.jpg\">1280x800</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-15/catch-your-perfect-snowflake/nocal/dec-15-catch-your-perfect-snowflake-nocal-1280x960.jpg\">1280x960</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-15/catch-your-perfect-snowflake/nocal/dec-15-catch-your-perfect-snowflake-nocal-1280x1024.jpg\">1280x1024</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-15/catch-your-perfect-snowflake/nocal/dec-15-catch-your-perfect-snowflake-nocal-1400x1050.jpg\">1400x1050</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-15/catch-your-perfect-snowflake/nocal/dec-15-catch-your-perfect-snowflake-nocal-1440x900.jpg\">1440x900</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-15/catch-your-perfect-snowflake/nocal/dec-15-catch-your-perfect-snowflake-nocal-1600x1200.jpg\">1600x1200</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-15/catch-your-perfect-snowflake/nocal/dec-15-catch-your-perfect-snowflake-nocal-1680x1050.jpg\">1680x1050</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-15/catch-your-perfect-snowflake/nocal/dec-15-catch-your-perfect-snowflake-nocal-1680x1200.jpg\">1680x1200</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-15/catch-your-perfect-snowflake/nocal/dec-15-catch-your-perfect-snowflake-nocal-1920x1080.jpg\">1920x1080</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-15/catch-your-perfect-snowflake/nocal/dec-15-catch-your-perfect-snowflake-nocal-1920x1200.jpg\">1920x1200</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-15/catch-your-perfect-snowflake/nocal/dec-15-catch-your-perfect-snowflake-nocal-1920x1440.jpg\">1920x1440</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-15/catch-your-perfect-snowflake/nocal/dec-15-catch-your-perfect-snowflake-nocal-2560x1440.jpg\">2560x1440</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-15/catch-your-perfect-snowflake/nocal/dec-15-catch-your-perfect-snowflake-nocal-2560x1600.jpg\">2560x1600</a></li>\n</ul>\n\n<p></p>Dream What You Want To Do<p></p>\n<p></p><p>“The year will end, hope the last month, you can do what you want to do, seize the time, cherish yourself, expect next year we will be better!” — Designed by Hong Zi-Qing from Taiwan.</p><p></p>\n<p></p><a href=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0694ba14-64b0-4042-b64d-53a594c8e0fe/dec-17-dream-what-you-want-to-do-nocal-full-opt.png\"><img src=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d4440f81-d0da-4813-88fe-95521054b075/dec-17-dream-what-you-want-to-do-nocal-preview-opt.png\" /></a><p></p>\n<ul>\n<li><a href=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d4440f81-d0da-4813-88fe-95521054b075/dec-17-dream-what-you-want-to-do-nocal-preview-opt.png\">preview</a></li>\n<li>without calendar: <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/dream-what-you-want-to-do/nocal/dec-17-dream-what-you-want-to-do-nocal-1024x768.jpg\">1024x768</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/dream-what-you-want-to-do/nocal/dec-17-dream-what-you-want-to-do-nocal-1152x864.jpg\">1152x864</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/dream-what-you-want-to-do/nocal/dec-17-dream-what-you-want-to-do-nocal-1280x720.jpg\">1280x720</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/dream-what-you-want-to-do/nocal/dec-17-dream-what-you-want-to-do-nocal-1280x960.jpg\">1280x960</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/dream-what-you-want-to-do/nocal/dec-17-dream-what-you-want-to-do-nocal-1366x768.jpg\">1366x768</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/dream-what-you-want-to-do/nocal/dec-17-dream-what-you-want-to-do-nocal-1400x1050.jpg\">1400x1050</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/dream-what-you-want-to-do/nocal/dec-17-dream-what-you-want-to-do-nocal-1530x900.jpg\">1530x900</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/dream-what-you-want-to-do/nocal/dec-17-dream-what-you-want-to-do-nocal-1600x1200.jpg\">1600x1200</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/dream-what-you-want-to-do/nocal/dec-17-dream-what-you-want-to-do-nocal-1920x1080.jpg\">1920x1080</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/dream-what-you-want-to-do/nocal/dec-17-dream-what-you-want-to-do-nocal-1920x1440.jpg\">1920x1440</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-17/dream-what-you-want-to-do/nocal/dec-17-dream-what-you-want-to-do-nocal-2560x1440.jpg\">2560x1440</a></li></ul>\n\n\n<p></p>Time For Reindeer, Snowflakes And Jingle Bells<p></p>\n<p></p><p>“Christmas is a time you get homesick, even when you’re home! Christmas reminds me of Harry Potter and his holidays when he would be longing to visit the Weasleys and have a Christmas feast with them at their table! The snowflakes, the Christmas tree, bundles of presents, and the lip smacking feast all gives you a reason to celebrate and stay happy amidst all odds! Life is all about celebration! Christmas is a reason to share the joy of happiness, peace and love with all, your near and dear ones.” — Designed by <a href=\"https://acodez.in/\">Acodez IT Solutions</a> from India.</p><p></p>\n<p></p><a href=\"https://files.smashing.media/articles/desktop-wallpaper-calendars-dec-2023/dec-16-time-for-reindeer-snowflakes-and-jingle-bells-full-opt.png\"><img src=\"https://files.smashing.media/articles/desktop-wallpaper-calendars-dec-2023/dec-16-time-for-reindeer-snowflakes-and-jingle-bells-preview-opt.png\" /></a><p></p>\n<ul>\n<li><a href=\"https://files.smashing.media/articles/desktop-wallpaper-calendars-dec-2023/dec-16-time-for-reindeer-snowflakes-and-jingle-bells-preview-opt.png\">preview</a></li>\n<li>without calendar: <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/time-for-reindeer-snowflakes-and-jingle-bells/nocal/dec-16-time-for-reindeer-snowflakes-and-jingle-bells-nocal-320x480.png\">320x480</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/time-for-reindeer-snowflakes-and-jingle-bells/nocal/dec-16-time-for-reindeer-snowflakes-and-jingle-bells-nocal-640x480.png\">640x480</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/time-for-reindeer-snowflakes-and-jingle-bells/nocal/dec-16-time-for-reindeer-snowflakes-and-jingle-bells-nocal-800x480.png\">800x480</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/time-for-reindeer-snowflakes-and-jingle-bells/nocal/dec-16-time-for-reindeer-snowflakes-and-jingle-bells-nocal-800x600.png\">800x600</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/time-for-reindeer-snowflakes-and-jingle-bells/nocal/dec-16-time-for-reindeer-snowflakes-and-jingle-bells-nocal-1024x768.png\">1024x768</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/time-for-reindeer-snowflakes-and-jingle-bells/nocal/dec-16-time-for-reindeer-snowflakes-and-jingle-bells-nocal-1024x1024.png\">1024x1024</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/time-for-reindeer-snowflakes-and-jingle-bells/nocal/dec-16-time-for-reindeer-snowflakes-and-jingle-bells-nocal-1152x864.png\">1152x864</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/time-for-reindeer-snowflakes-and-jingle-bells/nocal/dec-16-time-for-reindeer-snowflakes-and-jingle-bells-nocal-1280x720.png\">1280x720</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/time-for-reindeer-snowflakes-and-jingle-bells/nocal/dec-16-time-for-reindeer-snowflakes-and-jingle-bells-nocal-1280x960.png\">1280x960</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/time-for-reindeer-snowflakes-and-jingle-bells/nocal/dec-16-time-for-reindeer-snowflakes-and-jingle-bells-nocal-1280x1024.png\">1280x1024</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/time-for-reindeer-snowflakes-and-jingle-bells/nocal/dec-16-time-for-reindeer-snowflakes-and-jingle-bells-nocal-1366x768.png\">1366x768</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/time-for-reindeer-snowflakes-and-jingle-bells/nocal/dec-16-time-for-reindeer-snowflakes-and-jingle-bells-nocal-1400x1050.png\">1400x1050</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/time-for-reindeer-snowflakes-and-jingle-bells/nocal/dec-16-time-for-reindeer-snowflakes-and-jingle-bells-nocal-1440x900.png\">1440x900</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/time-for-reindeer-snowflakes-and-jingle-bells/nocal/dec-16-time-for-reindeer-snowflakes-and-jingle-bells-nocal-1600x1200.png\">1600x1200</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/time-for-reindeer-snowflakes-and-jingle-bells/nocal/dec-16-time-for-reindeer-snowflakes-and-jingle-bells-nocal-1680x1050.png\">1680x1050</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/time-for-reindeer-snowflakes-and-jingle-bells/nocal/dec-16-time-for-reindeer-snowflakes-and-jingle-bells-nocal-1680x1200.png\">1680x1200</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/time-for-reindeer-snowflakes-and-jingle-bells/nocal/dec-16-time-for-reindeer-snowflakes-and-jingle-bells-nocal-1920x1080.png\">1920x1080</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/time-for-reindeer-snowflakes-and-jingle-bells/nocal/dec-16-time-for-reindeer-snowflakes-and-jingle-bells-nocal-1920x1200.png\">1920x1200</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/time-for-reindeer-snowflakes-and-jingle-bells/nocal/dec-16-time-for-reindeer-snowflakes-and-jingle-bells-nocal-1920x1440.png\">1920x1440</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/time-for-reindeer-snowflakes-and-jingle-bells/nocal/dec-16-time-for-reindeer-snowflakes-and-jingle-bells-nocal-2560x1440.png\">2560x1440</a></li></ul>\n\n<p></p>Winter Wonderland<p></p>\n<p></p><p>“‘Winter is the time for comfort, for good food and warmth, for the touch of a friendly hand and for a talk beside the fire: it is the time for home.’ (Edith Sitwell) — Designed by <a href=\"https://itobuz.com/\">Dipanjan Karmakar</a> from India.</p><p></p>\n<p></p><a href=\"https://files.smashing.media/articles/desktop-wallpaper-calendars-dec-2023/dec-16-winter-wonderland-full-opt.png\"><img src=\"https://files.smashing.media/articles/desktop-wallpaper-calendars-dec-2023/dec-16-winter-wonderland-preview-opt.png\" /></a><p></p>\n<ul>\n<li><a href=\"https://files.smashing.media/articles/desktop-wallpaper-calendars-dec-2023/dec-16-winter-wonderland-preview-opt.png\">preview</a></li>\n<li>without calendar: <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/winter-wonderland/nocal/dec-16-winter-wonderland-nocal-1280x720.jpg\">1280x720</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/winter-wonderland/nocal/dec-16-winter-wonderland-nocal-1280x800.jpg\">1280x800</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/winter-wonderland/nocal/dec-16-winter-wonderland-nocal-1280x960.jpg\">1280x960</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/winter-wonderland/nocal/dec-16-winter-wonderland-nocal-1280x1024.jpg\">1280x1024</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/winter-wonderland/nocal/dec-16-winter-wonderland-nocal-1366x768.jpg\">1366x768</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/winter-wonderland/nocal/dec-16-winter-wonderland-nocal-1400x1050.jpg\">1400x1050</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/winter-wonderland/nocal/dec-16-winter-wonderland-nocal-1440x900.jpg\">1440x900</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/winter-wonderland/nocal/dec-16-winter-wonderland-nocal-1600x1200.jpg\">1600x1200</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/winter-wonderland/nocal/dec-16-winter-wonderland-nocal-1680x1050.jpg\">1680x1050</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/winter-wonderland/nocal/dec-16-winter-wonderland-nocal-1680x1200.jpg\">1680x1200</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/winter-wonderland/nocal/dec-16-winter-wonderland-nocal-1920x1080.jpg\">1920x1080</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/winter-wonderland/nocal/dec-16-winter-wonderland-nocal-1920x1440.jpg\">1920x1440</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-16/winter-wonderland/nocal/dec-16-winter-wonderland-nocal-2560x1440.jpg\">2560x1440</a></li></ul>\n\n<p></p>Cold Outside<p></p>\n<p></p><p>“In December it is cold outside, so cute giraffe with scarf.” — Designed by <a href=\"https://www.behance.net/KimLemin\">Kim Lemin</a> from Belgium.</p><p></p>\n<p></p><a href=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c230deda-c61a-4cc8-809a-ec39e45f0b71/dec-14-cold-outside-nocal-full-opt.png\"><img src=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8a726f03-a4e1-48b8-bd4b-cb32bed20a51/dec-14-cold-outside-nocal-preview-opt.png\" /></a><p></p>\n<ul>\n<li><a href=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8a726f03-a4e1-48b8-bd4b-cb32bed20a51/dec-14-cold-outside-nocal-preview-opt.png\">preview</a></li>\n<li>without calendar: <a href=\"https://smashingmagazine.com/files/wallpapers/dec-14/cold-outside/nocal/dec-14-cold-outside-nocal-320x480.jpg\">320x480</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-14/cold-outside/nocal/dec-14-cold-outside-nocal-640x480.jpg\">640x480</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-14/cold-outside/nocal/dec-14-cold-outside-nocal-800x600.jpg\">800x600</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-14/cold-outside/nocal/dec-14-cold-outside-nocal-1280x800.jpg\">1280x800</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-14/cold-outside/nocal/dec-14-cold-outside-nocal-1280x960.jpg\">1280x960</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-14/cold-outside/nocal/dec-14-cold-outside-nocal-1440x900.jpg\">1440x900</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-14/cold-outside/nocal/dec-14-cold-outside-nocal-1680x1200.jpg\">1680x1200</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-14/cold-outside/nocal/dec-14-cold-outside-nocal-1920x1080.jpg\">1920x1080</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-14/cold-outside/nocal/dec-14-cold-outside-nocal-2560x1440.jpg\">2560x1440</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-14/cold-outside/nocal/dec-14-cold-outside-nocal-2560x2560.jpg\">2560x2560</a></li></ul>\n\n<p></p>Christmas Lights Under The Sea<p></p>\n<p></p><p>“Jellyfish always reminded me of Christmas because of the shiny magic they create. Lights of hope in the deep blue sea.” — Designed by <a href=\"https://icon-a-day.com\">Marko Stupić</a> from Zagreb, Croatia.</p><p></p>\n<p></p><a href=\"https://files.smashing.media/articles/desktop-wallpaper-calendars-dec-2023/dec-14-christmas-lights-under-the-sea-full-opt.png\"><img src=\"https://files.smashing.media/articles/desktop-wallpaper-calendars-dec-2023/dec-14-christmas-lights-under-the-sea-preview-opt.png\" /></a><p></p>\n<ul>\n<li><a href=\"https://files.smashing.media/articles/desktop-wallpaper-calendars-dec-2023/dec-14-christmas-lights-under-the-sea-preview-opt.png\">preview</a></li>\n<li>without calendar: <a href=\"https://smashingmagazine.com/files/wallpapers/dec-14/christmas-lights-under-the-sea/nocal/dec-14-christmas-lights-under-the-sea-nocal-640x480.png\">640x480</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-14/christmas-lights-under-the-sea/nocal/dec-14-christmas-lights-under-the-sea-nocal-800x600.png\">800x600</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-14/christmas-lights-under-the-sea/nocal/dec-14-christmas-lights-under-the-sea-nocal-1024x768.png\">1024x768</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-14/christmas-lights-under-the-sea/nocal/dec-14-christmas-lights-under-the-sea-nocal-1152x864.png\">1152x864</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-14/christmas-lights-under-the-sea/nocal/dec-14-christmas-lights-under-the-sea-nocal-1280x720.png\">1280x720</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-14/christmas-lights-under-the-sea/nocal/dec-14-christmas-lights-under-the-sea-nocal-1280x960.png\">1280x960</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-14/christmas-lights-under-the-sea/nocal/dec-14-christmas-lights-under-the-sea-nocal-1400x1050.png\">1400x1050</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-14/christmas-lights-under-the-sea/nocal/dec-14-christmas-lights-under-the-sea-nocal-1600x1200.png\">1600x1200</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-14/christmas-lights-under-the-sea/nocal/dec-14-christmas-lights-under-the-sea-nocal-1920x1080.png\">1920x1080</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-14/christmas-lights-under-the-sea/nocal/dec-14-christmas-lights-under-the-sea-nocal-1920x1440.png\">1920x1440</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-14/christmas-lights-under-the-sea/nocal/dec-14-christmas-lights-under-the-sea-nocal-2560x1440.png\">2560x1440</a></li></ul>\n\n<p></p>Christmas Time<p></p>\n<p></p><p>Designed by Sofie Keirsmaekers from Belgium.</p><p></p>\n<p></p><a href=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a9988e43-6ee8-414c-8136-ac6939c5182e/dec-13-christmas-time-full-opt.png\"><img src=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cf1ce792-3363-4899-9714-fd569b53452b/dec-13-christmas-time-preview-opt.png\" /></a><p></p>\n<ul>\n<li><a href=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cf1ce792-3363-4899-9714-fd569b53452b/dec-13-christmas-time-preview-opt.png\">preview</a></li>\n<li>without calendar: <a href=\"https://smashingmagazine.com/files/wallpapers/dec-13/christmas-time-/nocal/dec-13-christmas-time--nocal-320x480.png\">320x480</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-13/christmas-time-/nocal/dec-13-christmas-time--nocal-1024x1024.png\">1024x1024</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-13/christmas-time-/nocal/dec-13-christmas-time--nocal-1280x1024.png\">1280x1024</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-13/christmas-time-/nocal/dec-13-christmas-time--nocal-1440x900.png\">1440x900</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-13/christmas-time-/nocal/dec-13-christmas-time--nocal-1920x1200.png\">1920x1200</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-13/christmas-time-/nocal/dec-13-christmas-time--nocal-2560x1440.png\">2560x1440</a></li></ul>\n\n<p></p>Happy Holidays<p></p>\n<p></p><p>Designed by <a href=\"https://www.ricardogimenes.com/\">Ricardo Gimenes</a> from Sweden.</p><p></p>\n<p></p><a href=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e16c6728-d3a1-4800-8a6e-e3c45d2512ac/dec-20-happy-holidays-full-opt.png\"><img src=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/56b7fbec-60c7-4776-96d0-028c06c5a552/dec-20-happy-holidays-preview-opt.png\" /></a><p></p>\n<ul>\n<li><a href=\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/56b7fbec-60c7-4776-96d0-028c06c5a552/dec-20-happy-holidays-preview-opt.png\">preview</a></li>\n<li>without calendar: <a href=\"https://smashingmagazine.com/files/wallpapers/dec-20/happy-holidays/nocal/dec-20-happy-holidays-nocal-640x480.png\">640x480</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-20/happy-holidays/nocal/dec-20-happy-holidays-nocal-800x480.png\">800x480</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-20/happy-holidays/nocal/dec-20-happy-holidays-nocal-800x600.png\">800x600</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-20/happy-holidays/nocal/dec-20-happy-holidays-nocal-1024x768.png\">1024x768</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-20/happy-holidays/nocal/dec-20-happy-holidays-nocal-1024x1024.png\">1024x1024</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-20/happy-holidays/nocal/dec-20-happy-holidays-nocal-1152x864.png\">1152x864</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-20/happy-holidays/nocal/dec-20-happy-holidays-nocal-1280x720.png\">1280x720</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-20/happy-holidays/nocal/dec-20-happy-holidays-nocal-1280x800.png\">1280x800</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-20/happy-holidays/nocal/dec-20-happy-holidays-nocal-1280x960.png\">1280x960</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-20/happy-holidays/nocal/dec-20-happy-holidays-nocal-1280x1024.png\">1280x1024</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-20/happy-holidays/nocal/dec-20-happy-holidays-nocal-1366x768.png\">1366x768</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-20/happy-holidays/nocal/dec-20-happy-holidays-nocal-1400x1050.png\">1400x1050</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-20/happy-holidays/nocal/dec-20-happy-holidays-nocal-1440x900.png\">1440x900</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-20/happy-holidays/nocal/dec-20-happy-holidays-nocal-1600x1200.png\">1600x1200</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-20/happy-holidays/nocal/dec-20-happy-holidays-nocal-1680x1050.png\">1680x1050</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-20/happy-holidays/nocal/dec-20-happy-holidays-nocal-1680x1200.png\">1680x1200</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-20/happy-holidays/nocal/dec-20-happy-holidays-nocal-1920x1080.png\">1920x1080</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-20/happy-holidays/nocal/dec-20-happy-holidays-nocal-1920x1200.png\">1920x1200</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-20/happy-holidays/nocal/dec-20-happy-holidays-nocal-1920x1440.png\">1920x1440</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-20/happy-holidays/nocal/dec-20-happy-holidays-nocal-2560x1440.png\">2560x1440</a>, <a href=\"https://smashingmagazine.com/files/wallpapers/dec-20/happy-holidays/nocal/dec-20-happy-holidays-nocal-3840x2160.png\">3840x2160</a></li>\n</ul>\n\n",
          "content:encodedSnippet": "As the year is coming to a close, many of us feel rushed, meeting deadlines, finishing off projects, or preparing for the upcoming holiday season. So how about some beautiful, wintery desktop wallpapers to cater for some fresh inspiration and get you in the mood for December (and the holidays, if you’re celebrating)?\nAs every month since more than twelve years already, artists and designers from across the globe once again got their ideas bubbling and created wallpaper designs to sweeten up your December. They come in versions with and without a calendar and can be downloaded for free. As a little bonus goodie, we also added a selection of December favorites from our wallpapers archives to the collection that are just waiting to be rediscovered, so maybe you’ll spot one of your almost-forgotten favorites in here, too.\nA huge thank you to everyone who took on the challenge and shared their designs with us — this post wouldn’t exist without you! Happy December!\nYou can click on every image to see a larger preview,\nWe respect and carefully consider the ideas and motivation behind each and every artist’s work. This is why we give all artists the full freedom to explore their creativity and express emotions and experience through their works. This is also why the themes of the wallpapers weren’t anyhow influenced by us but rather designed from scratch by the artists themselves.\nSubmit a wallpaper!\nDid you know that you could get featured in our next wallpapers post, too? We are always looking for creative talent.\nSweet Ride Into The Holidays\n\n\n“December is here, and that means it’s time to celebrate National Cookie Day and embrace the festive spirit with our snowboarding cookie man! This delightful illustration captures the essence of the holidays — a time for indulging in our favorite treats, spreading joy, and creating unforgettable memories with loved ones. So, grab your favorite cookie, put on your coziest pajamas, and let the holiday cheer commence!” — Designed by PopArt Studio from Serbia.\n\n\n\n\npreview\nwith calendar: 320x480, 640x480, 800x480, 800x600, 1024x768, 1024x1024, 1152x864, 1280x720, 1280x800, 1280x960, 1280x1024, 1400x1050, 1440x900, 1600x1200, 1680x1050, 1680x1200, 1920x1080, 1920x1200, 1920x1440, 2560x1440\nwithout calendar: 320x480, 640x480, 800x480, 800x600, 1024x768, 1024x1024, 1152x864, 1280x720, 1280x800, 1280x960, 1280x1024, 1400x1050, 1440x900, 1600x1200, 1680x1050, 1680x1200, 1920x1080, 1920x1200, 1920x1440, 2560x1440\nSpread The Soul Of Christmas\n\n\nDesigned by Bhabna Basak from India.\n\n\n\n\npreview\nwith calendar: 1440x900, 1600x1200, 1680x1050, 1680x1200, 1920x1080, 1920x1200, 1920x1440, 2560x1440\nwithout calendar: 1440x900, 1600x1200, 1680x1050, 1680x1200, 1920x1080, 1920x1200, 1920x1440, 2560x1440\nViews Of The Alhambra\n\n\n“This last month of the year, we wanted to put the focus on one of the most visited buildings in the world whose beauty is unmatched: the Alhambra in Granada. Together, from the Albaicín we will see this beauty and tour its gardens and rooms. We wish you a very merry Christmas and all the best for the coming year!” — Designed by Veronica Valenzuela Jimenez from Spain.\n\n\n\n\npreview\nwith calendar: 640x480, 800x480, 1024x768, 1280x720, 1280x800, 1440x900, 1600x1200, 1920x1080, 1920x1440, 2560x1440\nwithout calendar: 640x480, 800x480, 1024x768, 1280x720, 1280x800, 1440x900, 1600x1200, 1920x1080, 1920x1440, 2560x1440\nEnergy Drink\n\n\nDesigned by Ricardo Gimenes from Sweden.\n\n\n\n\npreview\nwith calendar: 640x480, 800x480, 800x600, 1024x768, 1024x1024, 1152x864, 1280x720, 1280x800, 1280x960, 1280x1024, 1366x768, 1400x1050, 1440x900, 1600x1200, 1680x1050, 1680x1200, 1920x1080, 1920x1200, 1920x1440, 2560x1440, 3840x2160\nwithout calendar: 640x480, 800x480, 800x600, 1024x768, 1024x1024, 1152x864, 1280x720, 1280x800, 1280x960, 1280x1024, 1366x768, 1400x1050, 1440x900, 1600x1200, 1680x1050, 1680x1200, 1920x1080, 1920x1200, 1920x1440, 2560x1440, 3840x2160\nGo Green\n\n\n“We’d love to invite you to our free Smashing Meets Goes Green on Thursday, December 7, to explore how we as designers and developers can make our world just a bit greener.” — Designed by Ricardo Gimenes from Sweden.\n\n\n\n\npreview\nwith calendar: 640x480, 800x480, 800x600, 1024x768, 1024x1024, 1152x864, 1280x720, 1280x800, 1280x960, 1280x1024, 1366x768, 1400x1050, 1440x900, 1600x1200, 1680x1050, 1680x1200, 1920x1080, 1920x1200, 1920x1440, 2560x1440, 3840x2160\nwithout calendar: 640x480, 800x480, 800x600, 1024x768, 1024x1024, 1152x864, 1280x720, 1280x800, 1280x960, 1280x1024, 1366x768, 1400x1050, 1440x900, 1600x1200, 1680x1050, 1680x1200, 1920x1080, 1920x1200, 1920x1440, 2560x1440, 3840x2160\nDear Moon, Merry Christmas\n\n\nDesigned by Vlad Gerasimov from Georgia.\n\n\n\n\npreview\nwithout calendar: 800x480, 800x600, 1024x600, 1024x768, 1152x864, 1280x720, 1280x800, 1280x960, 1280x1024, 1366x768, 1400x1050, 1440x900, 1440x960, 1600x900, 1600x1200, 1680x1050, 1680x1200, 1920x1080, 1920x1200, 1920x1440, 2560x1440, 2560x1600, 2880x1800, 3072x1920, 3840x2160, 5120x2880\nThe House On The River Drina\n\n\n“Since we often yearn for a peaceful and quiet place to work, we have found inspiration in the famous house on the River Drina in Bajina Bašta, Serbia. Wouldn’t it be great being in nature, away from the civilization, swaying in the wind and listening to the waves of the river smashing your house, having no neighbors to bother you? Not sure about the Internet, though…” — Designed by PopArt Studio from Serbia.\n\n\n\n\npreview\nwithout calendar: 640x480, 800x600, 1024x1024, 1152x864, 1280x720, 1280x960, 1280x1024, 1366x768, 1400x1050, 1440x900, 1600x1200, 1680x1200, 1920x1080, 1920x1200, 1920x1440, 2560x1440\nCardinals In Snowfall\n\n\n“During Christmas season, in the cold, colorless days of winter, Cardinal birds are seen as symbols of faith and warmth. In the part of America I live in, there is snowfall every December. While the snow is falling, I can see gorgeous Cardinals flying in and out of my patio. The intriguing color palette of the bright red of the Cardinals, the white of the flurries and the brown/black of dry twigs and fallen leaves on the snow-laden ground fascinates me a lot, and inspired me to create this quaint and sweet, hand-illustrated surface pattern design as I wait for the snowfall in my town!” — Designed by Gyaneshwari Dave from the United States.\n\n\n\n\npreview\nwithout calendar: 640x960, 768x1024, 1280x720, 1280x1024, 1366x768, 1920x1080, 2560x1440\nWinter Coziness At Home\n\n\n“Winter coziness that we all feel when we come home after spending some time outside or when we come to our parental home to celebrate Christmas inspired our designers. Home is the place where we can feel safe and sound, so we couldn’t help ourselves but create this calendar.” — Designed by MasterBundles from Ukraine.\n\n\n\n\npreview\nwithout calendar: 320x480, 640x480, 800x480, 800x600, 1024x768, 1024x1024, 1152x864, 1280x720, 1280x800, 1280x960, 1280x1024, 1366x768, 1400x1050, 1440x900, 1600x1200, 1680x1050, 1680x1200, 1920x1080, 1920x1200, 1920x1440, 2560x1440\nBat Christmas\n\n\nDesigned by Ricardo Gimenes from Sweden.\n\n\n\n\npreview\nwithout calendar: 640x480, 800x480, 800x600, 1024x768, 1024x1024, 1152x864, 1280x720, 1280x800, 1280x960, 1280x1024, 1366x768, 1400x1050, 1440x900, 1600x1200, 1680x1050, 1680x1200, 1920x1080, 1920x1200, 1920x1440, 2560x1440, 3840x2160\nEnchanted Blizzard\n\n\n“A seemingly forgotten world under the shade of winter glaze hides a moment where architecture meets fashion and change encounters steadiness.” — Designed by Ana Masnikosa from Belgrade, Serbia.\n\n\n\n\npreview\nwithout calendar: 320x480, 640x480, 800x480, 800x600, 1024x768, 1024x1024, 1152x864, 1280x720, 1280x800, 1280x960, 1280x1024, 1400x1050, 1440x900, 1600x1200, 1680x1050, 1680x1200, 1920x1080, 1920x1200, 1920x1440, 2560x1440\nKing Of Pop\n\n\nDesigned by Ricardo Gimenes from Sweden.\n\n\n\n\npreview\nwithout calendar: 640x480, 800x480, 800x600, 1024x768, 1024x1024, 1152x864, 1280x720, 1280x800, 1280x960, 1280x1024, 1366x768, 1400x1050, 1440x900, 1600x1200, 1680x1050, 1680x1200, 1920x1080, 1920x1200, 1920x1440, 2560x1440, 3840x2160\nWinter Garphee\n\n\n“Garphee’s flufiness glowing in the snow.” Designed by Razvan Garofeanu from Romania.\n\n\n\n\npreview\nwithout calendar: 320x480, 1024x768, 1024x1024, 1280x800, 1280x1024, 1366x768, 1440x900, 1680x1050, 1920x1080, 1920x1200, 2560x1440\nJoy To The World\n\n\n“Joy to the world, all the boys and girls now, joy to the fishes in the deep blue sea, joy to you and me.” — Designed by Morgan Newnham from Boulder, Colorado.\n\n\n\n\npreview\nwithout calendar: 320x480, 640x480, 800x480, 800x600, 1024x768, 1024x1024, 1152x864, 1280x720, 1280x800, 1280x960, 1280x1024, 1400x1050, 1440x900, 1600x1200, 1680x1050, 1680x1200, 1920x1080, 1920x1200, 1920x1440, 2560x1440\nNinja Santa\n\n\nDesigned by Elise Vanoorbeek from Belgium.\n\n\n\n\npreview\nwithout calendar: 1280x1024, 1366x768, 1400x1050, 1440x900, 1600x1200, 1680x1050, 1680x1200, 1920x1080, 1920x1440, 2560x1440\n\n\n\nHot Hot Hot!\n\n\nDesigned by Ricardo Gimenes from Sweden.\n\n\n\n\npreview\nwithout calendar: 640x480, 800x480, 800x600, 1024x768, 1024x1024, 1152x864, 1280x720, 1280x800, 1280x960, 1280x1024, 1366x768, 1400x1050, 1440x900, 1600x1200, 1680x1050, 1680x1200, 1920x1080, 1920x1200, 1920x1440, 2560x1440, 3840x2160\nChristmas Cookies\n\n\n“Christmas is coming and a great way to share our love is by baking cookies.” — Designed by Maria Keller from Mexico.\n\n\n\n\npreview\nwithout calendar: 320x480, 640x480, 640x1136, 750x1334, 800x480, 800x600, 1024x768, 1024x1024, 1152x864, 1242x2208, 1280x720, 1280x800, 1280x960, 1280x1024, 1366x768, 1400x1050, 1440x900, 1600x1200, 1680x1050, 1680x1200, 1920x1080, 1920x1200, 1920x1440, 2560x1440, 2880x1800\nSweet Snowy Tenderness\n\n\n“You know that warm feeling when you get to spend cold winter days in a snug, homey, relaxed atmosphere? Oh, yes, we love it, too! It is the sentiment we set our hearts on for the holiday season, and this sweet snowy tenderness is for all of us who adore watching the snowfall from our windows. Isn’t it romantic?” — Designed by PopArt Studio from Serbia.\n\n\n\n\npreview\nwithout calendar: 320x480, 640x480, 800x480, 800x600, 1024x768, 1024x1024, 1152x864, 1280x720, 1280x800, 1280x960, 1280x1024, 1366x768, 1400x1050, 1440x900, 1600x1200, 1680x1050, 1680x1200, 1920x1080, 1920x1200, 1920x1440, 2560x1440\nAll That Belongs To The Past\n\n\n“Sometimes new beginnings make us revisit our favorite places or people from the past. We don’t visit them often because they remind us of the past but enjoy the brief reunion. Cheers to new beginnings in the new year!” Designed by Dorvan Davoudi from Canada.\n\n\n\n\npreview\nwithout calendar: 800x480, 800x600, 1024x1024, 1152x864, 1280x720, 1280x800, 1280x960, 1280x1024, 1366x768, 1400x1050, 1440x900, 1600x1200, 1680x1050, 1680x1200, 1920x1080, 1920x1200, 1920x1440, 2560x1440\nTrailer Santa\n\n\n“A mid-century modern Christmas scene outside the norm of snowflakes and winter landscapes.” Designed by Houndstooth from the United States.\n\n\n\n\npreview\nwithout calendar: 1024x1024, 1280x800, 1280x1024, 1440x900, 1680x1050, 2560x1440\nGetting Hygge\n\n\n“There’s no more special time for a fire than in the winter. Cozy blankets, warm beverages, and good company can make all the difference when the sun goes down. We’re all looking forward to generating some hygge this winter, so snuggle up and make some memories.” — Designed by The Hannon Group from Washington D.C.\n\n\n\n\npreview\nwithout calendar: 320x480, 640x480, 800x600, 1024x768, 1280x960, 1440x900, 1600x1200, 1680x1050, 1680x1200, 1920x1080, 1920x1440, 2560x1440\nDecember Through Different Eyes\n\n\n“As a Belgian, December reminds me of snow, cosiness, winter, lights, and so on. However, in the Southern Hemisphere, it is summer at this time. With my illustration I wanted to show the different perspectives on December. I wish you all a Merry Christmas and Happy New Year!” — Designed by Jo Smets from Belgium.\n\n\n\n\npreview\nwithout calendar: 320x480, 800x480, 1280x800, 1280x1024, 1920x1080, 2560x1440\nIce Flowers\n\n\n“I took some photos during a very frosty and cold week before Christmas.” Designed by Anca Varsandan from Romania.\n\n\n\n\npreview\nwithout calendar: 1024x768, 1280x800, 1440x900, 1680x1050, 1920x1200\nBathtub Party Day\n\n\n“December 5th is also known as Bathtub Party Day, which is why I wanted to visualize what celebrating this day could look like.” — Designed by Jonas Vanhamme from Belgium.\n\n\n\n\npreview\nwithout calendar: 320x480, 640x480, 800x480, 800x600, 1024x768, 1280x720, 1280x800, 1280x960, 1400x1050, 1600x1200, 1680x1200, 1920x1080, 1920x1200, 1920x1440, 2560x1440, 2560x1600\nSilver Winter\n\n\nDesigned by Violeta Dabija from Moldova.\n\n\n\n\npreview\nwithout calendar: 1024x768, 1280x800, 1440x900, 1680x1050, 1920x1200, 2560x1440\nChristmas Fail\n\n\nDesigned by Elise Vanoorbeek from Belgium.\n\n\n\n\npreview\nwithout calendar: 1024x768, 1024x1024, 1152x864, 1280x720, 1280x800, 1280x960, 1280x1024, 1366x768, 1400x1050, 1440x900, 1600x1200, 1680x1050, 1680x1200, 1920x1080, 1920x1200, 1920x1440, 2560x1440\nCatch Your Perfect Snowflake\n\n\n“This time of year, people tend to dream big and expect miracles. Let your dreams come true!” Designed by Igor Izhik from Canada.\n\n\n\n\npreview\nwithout calendar: 800x480, 800x600, 1024x768, 1024x1024, 1152x864, 1280x720, 1280x800, 1280x960, 1280x1024, 1400x1050, 1440x900, 1600x1200, 1680x1050, 1680x1200, 1920x1080, 1920x1200, 1920x1440, 2560x1440, 2560x1600\nDream What You Want To Do\n\n\n“The year will end, hope the last month, you can do what you want to do, seize the time, cherish yourself, expect next year we will be better!” — Designed by Hong Zi-Qing from Taiwan.\n\n\n\n\npreview\nwithout calendar: 1024x768, 1152x864, 1280x720, 1280x960, 1366x768, 1400x1050, 1530x900, 1600x1200, 1920x1080, 1920x1440, 2560x1440\n\n\n\n\nTime For Reindeer, Snowflakes And Jingle Bells\n\n\n“Christmas is a time you get homesick, even when you’re home! Christmas reminds me of Harry Potter and his holidays when he would be longing to visit the Weasleys and have a Christmas feast with them at their table! The snowflakes, the Christmas tree, bundles of presents, and the lip smacking feast all gives you a reason to celebrate and stay happy amidst all odds! Life is all about celebration! Christmas is a reason to share the joy of happiness, peace and love with all, your near and dear ones.” — Designed by Acodez IT Solutions from India.\n\n\n\n\npreview\nwithout calendar: 320x480, 640x480, 800x480, 800x600, 1024x768, 1024x1024, 1152x864, 1280x720, 1280x960, 1280x1024, 1366x768, 1400x1050, 1440x900, 1600x1200, 1680x1050, 1680x1200, 1920x1080, 1920x1200, 1920x1440, 2560x1440\n\n\n\nWinter Wonderland\n\n\n“‘Winter is the time for comfort, for good food and warmth, for the touch of a friendly hand and for a talk beside the fire: it is the time for home.’ (Edith Sitwell) — Designed by Dipanjan Karmakar from India.\n\n\n\n\npreview\nwithout calendar: 1280x720, 1280x800, 1280x960, 1280x1024, 1366x768, 1400x1050, 1440x900, 1600x1200, 1680x1050, 1680x1200, 1920x1080, 1920x1440, 2560x1440\n\n\n\nCold Outside\n\n\n“In December it is cold outside, so cute giraffe with scarf.” — Designed by Kim Lemin from Belgium.\n\n\n\n\npreview\nwithout calendar: 320x480, 640x480, 800x600, 1280x800, 1280x960, 1440x900, 1680x1200, 1920x1080, 2560x1440, 2560x2560\n\n\n\nChristmas Lights Under The Sea\n\n\n“Jellyfish always reminded me of Christmas because of the shiny magic they create. Lights of hope in the deep blue sea.” — Designed by Marko Stupić from Zagreb, Croatia.\n\n\n\n\npreview\nwithout calendar: 640x480, 800x600, 1024x768, 1152x864, 1280x720, 1280x960, 1400x1050, 1600x1200, 1920x1080, 1920x1440, 2560x1440\n\n\n\nChristmas Time\n\n\nDesigned by Sofie Keirsmaekers from Belgium.\n\n\n\n\npreview\nwithout calendar: 320x480, 1024x1024, 1280x1024, 1440x900, 1920x1200, 2560x1440\n\n\n\nHappy Holidays\n\n\nDesigned by Ricardo Gimenes from Sweden.\n\n\n\n\npreview\nwithout calendar: 640x480, 800x480, 800x600, 1024x768, 1024x1024, 1152x864, 1280x720, 1280x800, 1280x960, 1280x1024, 1366x768, 1400x1050, 1440x900, 1600x1200, 1680x1050, 1680x1200, 1920x1080, 1920x1200, 1920x1440, 2560x1440, 3840x2160",
          "enclosure": {
            "url": "http://files.smashing.media/articles/desktop-wallpaper-calendars-dec-2023/dec-23-sweet-ride-into-the-holidays-preview-opt.png",
            "length": "0",
            "type": "image/png"
          },
          "content": "Could there be a better way to welcome the new month than with a collection of desktop wallpapers? We’ve got some eye-catching designs to sweeten up the last few weeks of the year and, if you’re celebrating, to get you in the holiday mood.",
          "contentSnippet": "Could there be a better way to welcome the new month than with a collection of desktop wallpapers? We’ve got some eye-catching designs to sweeten up the last few weeks of the year and, if you’re celebrating, to get you in the holiday mood.",
          "guid": "https://smashingmagazine.com/2023/11/desktop-wallpaper-calendars-december-2023/",
          "isoDate": "2023-11-30T09:30:00.000Z"
        }
      ]
    },
    "date": "2023-12-08T11:41:28.559Z"
  }
]